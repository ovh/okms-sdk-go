// Code generated by mockery v2.42.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	types "github.com/ovh/okms-sdk-go/types"

	uuid "github.com/google/uuid"
)

// APIMock is an autogenerated mock type for the API type
type APIMock struct {
	mock.Mock
}

type APIMock_Expecter struct {
	mock *mock.Mock
}

func (_m *APIMock) EXPECT() *APIMock_Expecter {
	return &APIMock_Expecter{mock: &_m.Mock}
}

// ActivateServiceKey provides a mock function with given fields: ctx, keyId
func (_m *APIMock) ActivateServiceKey(ctx context.Context, keyId uuid.UUID) error {
	ret := _m.Called(ctx, keyId)

	if len(ret) == 0 {
		panic("no return value specified for ActivateServiceKey")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, keyId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// APIMock_ActivateServiceKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ActivateServiceKey'
type APIMock_ActivateServiceKey_Call struct {
	*mock.Call
}

// ActivateServiceKey is a helper method to define mock.On call
//   - ctx context.Context
//   - keyId uuid.UUID
func (_e *APIMock_Expecter) ActivateServiceKey(ctx interface{}, keyId interface{}) *APIMock_ActivateServiceKey_Call {
	return &APIMock_ActivateServiceKey_Call{Call: _e.mock.On("ActivateServiceKey", ctx, keyId)}
}

func (_c *APIMock_ActivateServiceKey_Call) Run(run func(ctx context.Context, keyId uuid.UUID)) *APIMock_ActivateServiceKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *APIMock_ActivateServiceKey_Call) Return(_a0 error) *APIMock_ActivateServiceKey_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *APIMock_ActivateServiceKey_Call) RunAndReturn(run func(context.Context, uuid.UUID) error) *APIMock_ActivateServiceKey_Call {
	_c.Call.Return(run)
	return _c
}

// CreateImportServiceKey provides a mock function with given fields: ctx, format, body
func (_m *APIMock) CreateImportServiceKey(ctx context.Context, format *types.KeyFormats, body types.CreateImportServiceKeyRequest) (*types.GetServiceKeyResponse, error) {
	ret := _m.Called(ctx, format, body)

	if len(ret) == 0 {
		panic("no return value specified for CreateImportServiceKey")
	}

	var r0 *types.GetServiceKeyResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.KeyFormats, types.CreateImportServiceKeyRequest) (*types.GetServiceKeyResponse, error)); ok {
		return rf(ctx, format, body)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.KeyFormats, types.CreateImportServiceKeyRequest) *types.GetServiceKeyResponse); ok {
		r0 = rf(ctx, format, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.GetServiceKeyResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.KeyFormats, types.CreateImportServiceKeyRequest) error); ok {
		r1 = rf(ctx, format, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// APIMock_CreateImportServiceKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateImportServiceKey'
type APIMock_CreateImportServiceKey_Call struct {
	*mock.Call
}

// CreateImportServiceKey is a helper method to define mock.On call
//   - ctx context.Context
//   - format *types.KeyFormats
//   - body types.CreateImportServiceKeyRequest
func (_e *APIMock_Expecter) CreateImportServiceKey(ctx interface{}, format interface{}, body interface{}) *APIMock_CreateImportServiceKey_Call {
	return &APIMock_CreateImportServiceKey_Call{Call: _e.mock.On("CreateImportServiceKey", ctx, format, body)}
}

func (_c *APIMock_CreateImportServiceKey_Call) Run(run func(ctx context.Context, format *types.KeyFormats, body types.CreateImportServiceKeyRequest)) *APIMock_CreateImportServiceKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*types.KeyFormats), args[2].(types.CreateImportServiceKeyRequest))
	})
	return _c
}

func (_c *APIMock_CreateImportServiceKey_Call) Return(_a0 *types.GetServiceKeyResponse, _a1 error) *APIMock_CreateImportServiceKey_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *APIMock_CreateImportServiceKey_Call) RunAndReturn(run func(context.Context, *types.KeyFormats, types.CreateImportServiceKeyRequest) (*types.GetServiceKeyResponse, error)) *APIMock_CreateImportServiceKey_Call {
	_c.Call.Return(run)
	return _c
}

// DeactivateServiceKey provides a mock function with given fields: ctx, keyId, reason
func (_m *APIMock) DeactivateServiceKey(ctx context.Context, keyId uuid.UUID, reason types.RevocationReasons) error {
	ret := _m.Called(ctx, keyId, reason)

	if len(ret) == 0 {
		panic("no return value specified for DeactivateServiceKey")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, types.RevocationReasons) error); ok {
		r0 = rf(ctx, keyId, reason)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// APIMock_DeactivateServiceKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeactivateServiceKey'
type APIMock_DeactivateServiceKey_Call struct {
	*mock.Call
}

// DeactivateServiceKey is a helper method to define mock.On call
//   - ctx context.Context
//   - keyId uuid.UUID
//   - reason types.RevocationReasons
func (_e *APIMock_Expecter) DeactivateServiceKey(ctx interface{}, keyId interface{}, reason interface{}) *APIMock_DeactivateServiceKey_Call {
	return &APIMock_DeactivateServiceKey_Call{Call: _e.mock.On("DeactivateServiceKey", ctx, keyId, reason)}
}

func (_c *APIMock_DeactivateServiceKey_Call) Run(run func(ctx context.Context, keyId uuid.UUID, reason types.RevocationReasons)) *APIMock_DeactivateServiceKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(types.RevocationReasons))
	})
	return _c
}

func (_c *APIMock_DeactivateServiceKey_Call) Return(_a0 error) *APIMock_DeactivateServiceKey_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *APIMock_DeactivateServiceKey_Call) RunAndReturn(run func(context.Context, uuid.UUID, types.RevocationReasons) error) *APIMock_DeactivateServiceKey_Call {
	_c.Call.Return(run)
	return _c
}

// Decrypt provides a mock function with given fields: ctx, keyId, keyCtx, data
func (_m *APIMock) Decrypt(ctx context.Context, keyId uuid.UUID, keyCtx string, data string) ([]byte, error) {
	ret := _m.Called(ctx, keyId, keyCtx, data)

	if len(ret) == 0 {
		panic("no return value specified for Decrypt")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string, string) ([]byte, error)); ok {
		return rf(ctx, keyId, keyCtx, data)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string, string) []byte); ok {
		r0 = rf(ctx, keyId, keyCtx, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, string, string) error); ok {
		r1 = rf(ctx, keyId, keyCtx, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// APIMock_Decrypt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Decrypt'
type APIMock_Decrypt_Call struct {
	*mock.Call
}

// Decrypt is a helper method to define mock.On call
//   - ctx context.Context
//   - keyId uuid.UUID
//   - keyCtx string
//   - data string
func (_e *APIMock_Expecter) Decrypt(ctx interface{}, keyId interface{}, keyCtx interface{}, data interface{}) *APIMock_Decrypt_Call {
	return &APIMock_Decrypt_Call{Call: _e.mock.On("Decrypt", ctx, keyId, keyCtx, data)}
}

func (_c *APIMock_Decrypt_Call) Run(run func(ctx context.Context, keyId uuid.UUID, keyCtx string, data string)) *APIMock_Decrypt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *APIMock_Decrypt_Call) Return(_a0 []byte, _a1 error) *APIMock_Decrypt_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *APIMock_Decrypt_Call) RunAndReturn(run func(context.Context, uuid.UUID, string, string) ([]byte, error)) *APIMock_Decrypt_Call {
	_c.Call.Return(run)
	return _c
}

// DecryptDataKey provides a mock function with given fields: ctx, keyId, encryptedKey
func (_m *APIMock) DecryptDataKey(ctx context.Context, keyId uuid.UUID, encryptedKey string) ([]byte, error) {
	ret := _m.Called(ctx, keyId, encryptedKey)

	if len(ret) == 0 {
		panic("no return value specified for DecryptDataKey")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) ([]byte, error)); ok {
		return rf(ctx, keyId, encryptedKey)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) []byte); ok {
		r0 = rf(ctx, keyId, encryptedKey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, string) error); ok {
		r1 = rf(ctx, keyId, encryptedKey)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// APIMock_DecryptDataKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DecryptDataKey'
type APIMock_DecryptDataKey_Call struct {
	*mock.Call
}

// DecryptDataKey is a helper method to define mock.On call
//   - ctx context.Context
//   - keyId uuid.UUID
//   - encryptedKey string
func (_e *APIMock_Expecter) DecryptDataKey(ctx interface{}, keyId interface{}, encryptedKey interface{}) *APIMock_DecryptDataKey_Call {
	return &APIMock_DecryptDataKey_Call{Call: _e.mock.On("DecryptDataKey", ctx, keyId, encryptedKey)}
}

func (_c *APIMock_DecryptDataKey_Call) Run(run func(ctx context.Context, keyId uuid.UUID, encryptedKey string)) *APIMock_DecryptDataKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(string))
	})
	return _c
}

func (_c *APIMock_DecryptDataKey_Call) Return(_a0 []byte, _a1 error) *APIMock_DecryptDataKey_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *APIMock_DecryptDataKey_Call) RunAndReturn(run func(context.Context, uuid.UUID, string) ([]byte, error)) *APIMock_DecryptDataKey_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteSecretMetadata provides a mock function with given fields: ctx, path
func (_m *APIMock) DeleteSecretMetadata(ctx context.Context, path string) error {
	ret := _m.Called(ctx, path)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSecretMetadata")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, path)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// APIMock_DeleteSecretMetadata_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteSecretMetadata'
type APIMock_DeleteSecretMetadata_Call struct {
	*mock.Call
}

// DeleteSecretMetadata is a helper method to define mock.On call
//   - ctx context.Context
//   - path string
func (_e *APIMock_Expecter) DeleteSecretMetadata(ctx interface{}, path interface{}) *APIMock_DeleteSecretMetadata_Call {
	return &APIMock_DeleteSecretMetadata_Call{Call: _e.mock.On("DeleteSecretMetadata", ctx, path)}
}

func (_c *APIMock_DeleteSecretMetadata_Call) Run(run func(ctx context.Context, path string)) *APIMock_DeleteSecretMetadata_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *APIMock_DeleteSecretMetadata_Call) Return(_a0 error) *APIMock_DeleteSecretMetadata_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *APIMock_DeleteSecretMetadata_Call) RunAndReturn(run func(context.Context, string) error) *APIMock_DeleteSecretMetadata_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteSecretRequest provides a mock function with given fields: ctx, path
func (_m *APIMock) DeleteSecretRequest(ctx context.Context, path string) error {
	ret := _m.Called(ctx, path)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSecretRequest")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, path)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// APIMock_DeleteSecretRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteSecretRequest'
type APIMock_DeleteSecretRequest_Call struct {
	*mock.Call
}

// DeleteSecretRequest is a helper method to define mock.On call
//   - ctx context.Context
//   - path string
func (_e *APIMock_Expecter) DeleteSecretRequest(ctx interface{}, path interface{}) *APIMock_DeleteSecretRequest_Call {
	return &APIMock_DeleteSecretRequest_Call{Call: _e.mock.On("DeleteSecretRequest", ctx, path)}
}

func (_c *APIMock_DeleteSecretRequest_Call) Run(run func(ctx context.Context, path string)) *APIMock_DeleteSecretRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *APIMock_DeleteSecretRequest_Call) Return(_a0 error) *APIMock_DeleteSecretRequest_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *APIMock_DeleteSecretRequest_Call) RunAndReturn(run func(context.Context, string) error) *APIMock_DeleteSecretRequest_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteSecretV2 provides a mock function with given fields: ctx, path
func (_m *APIMock) DeleteSecretV2(ctx context.Context, path string) error {
	ret := _m.Called(ctx, path)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSecretV2")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, path)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// APIMock_DeleteSecretV2_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteSecretV2'
type APIMock_DeleteSecretV2_Call struct {
	*mock.Call
}

// DeleteSecretV2 is a helper method to define mock.On call
//   - ctx context.Context
//   - path string
func (_e *APIMock_Expecter) DeleteSecretV2(ctx interface{}, path interface{}) *APIMock_DeleteSecretV2_Call {
	return &APIMock_DeleteSecretV2_Call{Call: _e.mock.On("DeleteSecretV2", ctx, path)}
}

func (_c *APIMock_DeleteSecretV2_Call) Run(run func(ctx context.Context, path string)) *APIMock_DeleteSecretV2_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *APIMock_DeleteSecretV2_Call) Return(_a0 error) *APIMock_DeleteSecretV2_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *APIMock_DeleteSecretV2_Call) RunAndReturn(run func(context.Context, string) error) *APIMock_DeleteSecretV2_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteSecretVersions provides a mock function with given fields: ctx, path, versions
func (_m *APIMock) DeleteSecretVersions(ctx context.Context, path string, versions []uint32) error {
	ret := _m.Called(ctx, path, versions)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSecretVersions")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []uint32) error); ok {
		r0 = rf(ctx, path, versions)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// APIMock_DeleteSecretVersions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteSecretVersions'
type APIMock_DeleteSecretVersions_Call struct {
	*mock.Call
}

// DeleteSecretVersions is a helper method to define mock.On call
//   - ctx context.Context
//   - path string
//   - versions []uint32
func (_e *APIMock_Expecter) DeleteSecretVersions(ctx interface{}, path interface{}, versions interface{}) *APIMock_DeleteSecretVersions_Call {
	return &APIMock_DeleteSecretVersions_Call{Call: _e.mock.On("DeleteSecretVersions", ctx, path, versions)}
}

func (_c *APIMock_DeleteSecretVersions_Call) Run(run func(ctx context.Context, path string, versions []uint32)) *APIMock_DeleteSecretVersions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]uint32))
	})
	return _c
}

func (_c *APIMock_DeleteSecretVersions_Call) Return(_a0 error) *APIMock_DeleteSecretVersions_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *APIMock_DeleteSecretVersions_Call) RunAndReturn(run func(context.Context, string, []uint32) error) *APIMock_DeleteSecretVersions_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteServiceKey provides a mock function with given fields: ctx, keyId
func (_m *APIMock) DeleteServiceKey(ctx context.Context, keyId uuid.UUID) error {
	ret := _m.Called(ctx, keyId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteServiceKey")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, keyId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// APIMock_DeleteServiceKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteServiceKey'
type APIMock_DeleteServiceKey_Call struct {
	*mock.Call
}

// DeleteServiceKey is a helper method to define mock.On call
//   - ctx context.Context
//   - keyId uuid.UUID
func (_e *APIMock_Expecter) DeleteServiceKey(ctx interface{}, keyId interface{}) *APIMock_DeleteServiceKey_Call {
	return &APIMock_DeleteServiceKey_Call{Call: _e.mock.On("DeleteServiceKey", ctx, keyId)}
}

func (_c *APIMock_DeleteServiceKey_Call) Run(run func(ctx context.Context, keyId uuid.UUID)) *APIMock_DeleteServiceKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *APIMock_DeleteServiceKey_Call) Return(_a0 error) *APIMock_DeleteServiceKey_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *APIMock_DeleteServiceKey_Call) RunAndReturn(run func(context.Context, uuid.UUID) error) *APIMock_DeleteServiceKey_Call {
	_c.Call.Return(run)
	return _c
}

// Encrypt provides a mock function with given fields: ctx, keyId, keyCtx, data
func (_m *APIMock) Encrypt(ctx context.Context, keyId uuid.UUID, keyCtx string, data []byte) (string, error) {
	ret := _m.Called(ctx, keyId, keyCtx, data)

	if len(ret) == 0 {
		panic("no return value specified for Encrypt")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string, []byte) (string, error)); ok {
		return rf(ctx, keyId, keyCtx, data)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string, []byte) string); ok {
		r0 = rf(ctx, keyId, keyCtx, data)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, string, []byte) error); ok {
		r1 = rf(ctx, keyId, keyCtx, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// APIMock_Encrypt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Encrypt'
type APIMock_Encrypt_Call struct {
	*mock.Call
}

// Encrypt is a helper method to define mock.On call
//   - ctx context.Context
//   - keyId uuid.UUID
//   - keyCtx string
//   - data []byte
func (_e *APIMock_Expecter) Encrypt(ctx interface{}, keyId interface{}, keyCtx interface{}, data interface{}) *APIMock_Encrypt_Call {
	return &APIMock_Encrypt_Call{Call: _e.mock.On("Encrypt", ctx, keyId, keyCtx, data)}
}

func (_c *APIMock_Encrypt_Call) Run(run func(ctx context.Context, keyId uuid.UUID, keyCtx string, data []byte)) *APIMock_Encrypt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(string), args[3].([]byte))
	})
	return _c
}

func (_c *APIMock_Encrypt_Call) Return(_a0 string, _a1 error) *APIMock_Encrypt_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *APIMock_Encrypt_Call) RunAndReturn(run func(context.Context, uuid.UUID, string, []byte) (string, error)) *APIMock_Encrypt_Call {
	_c.Call.Return(run)
	return _c
}

// GenerateDataKey provides a mock function with given fields: ctx, keyId, name, size
func (_m *APIMock) GenerateDataKey(ctx context.Context, keyId uuid.UUID, name string, size int32) ([]byte, string, error) {
	ret := _m.Called(ctx, keyId, name, size)

	if len(ret) == 0 {
		panic("no return value specified for GenerateDataKey")
	}

	var r0 []byte
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string, int32) ([]byte, string, error)); ok {
		return rf(ctx, keyId, name, size)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string, int32) []byte); ok {
		r0 = rf(ctx, keyId, name, size)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, string, int32) string); ok {
		r1 = rf(ctx, keyId, name, size)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(context.Context, uuid.UUID, string, int32) error); ok {
		r2 = rf(ctx, keyId, name, size)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// APIMock_GenerateDataKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateDataKey'
type APIMock_GenerateDataKey_Call struct {
	*mock.Call
}

// GenerateDataKey is a helper method to define mock.On call
//   - ctx context.Context
//   - keyId uuid.UUID
//   - name string
//   - size int32
func (_e *APIMock_Expecter) GenerateDataKey(ctx interface{}, keyId interface{}, name interface{}, size interface{}) *APIMock_GenerateDataKey_Call {
	return &APIMock_GenerateDataKey_Call{Call: _e.mock.On("GenerateDataKey", ctx, keyId, name, size)}
}

func (_c *APIMock_GenerateDataKey_Call) Run(run func(ctx context.Context, keyId uuid.UUID, name string, size int32)) *APIMock_GenerateDataKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(string), args[3].(int32))
	})
	return _c
}

func (_c *APIMock_GenerateDataKey_Call) Return(plain []byte, encrypted string, err error) *APIMock_GenerateDataKey_Call {
	_c.Call.Return(plain, encrypted, err)
	return _c
}

func (_c *APIMock_GenerateDataKey_Call) RunAndReturn(run func(context.Context, uuid.UUID, string, int32) ([]byte, string, error)) *APIMock_GenerateDataKey_Call {
	_c.Call.Return(run)
	return _c
}

// GetSecretConfig provides a mock function with given fields: ctx
func (_m *APIMock) GetSecretConfig(ctx context.Context) (*types.GetConfigResponse, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetSecretConfig")
	}

	var r0 *types.GetConfigResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*types.GetConfigResponse, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *types.GetConfigResponse); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.GetConfigResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// APIMock_GetSecretConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSecretConfig'
type APIMock_GetSecretConfig_Call struct {
	*mock.Call
}

// GetSecretConfig is a helper method to define mock.On call
//   - ctx context.Context
func (_e *APIMock_Expecter) GetSecretConfig(ctx interface{}) *APIMock_GetSecretConfig_Call {
	return &APIMock_GetSecretConfig_Call{Call: _e.mock.On("GetSecretConfig", ctx)}
}

func (_c *APIMock_GetSecretConfig_Call) Run(run func(ctx context.Context)) *APIMock_GetSecretConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *APIMock_GetSecretConfig_Call) Return(_a0 *types.GetConfigResponse, _a1 error) *APIMock_GetSecretConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *APIMock_GetSecretConfig_Call) RunAndReturn(run func(context.Context) (*types.GetConfigResponse, error)) *APIMock_GetSecretConfig_Call {
	_c.Call.Return(run)
	return _c
}

// GetSecretConfigV2 provides a mock function with given fields: ctx
func (_m *APIMock) GetSecretConfigV2(ctx context.Context) (*types.GetSecretConfigV2Response, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetSecretConfigV2")
	}

	var r0 *types.GetSecretConfigV2Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*types.GetSecretConfigV2Response, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *types.GetSecretConfigV2Response); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.GetSecretConfigV2Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// APIMock_GetSecretConfigV2_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSecretConfigV2'
type APIMock_GetSecretConfigV2_Call struct {
	*mock.Call
}

// GetSecretConfigV2 is a helper method to define mock.On call
//   - ctx context.Context
func (_e *APIMock_Expecter) GetSecretConfigV2(ctx interface{}) *APIMock_GetSecretConfigV2_Call {
	return &APIMock_GetSecretConfigV2_Call{Call: _e.mock.On("GetSecretConfigV2", ctx)}
}

func (_c *APIMock_GetSecretConfigV2_Call) Run(run func(ctx context.Context)) *APIMock_GetSecretConfigV2_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *APIMock_GetSecretConfigV2_Call) Return(_a0 *types.GetSecretConfigV2Response, _a1 error) *APIMock_GetSecretConfigV2_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *APIMock_GetSecretConfigV2_Call) RunAndReturn(run func(context.Context) (*types.GetSecretConfigV2Response, error)) *APIMock_GetSecretConfigV2_Call {
	_c.Call.Return(run)
	return _c
}

// GetSecretRequest provides a mock function with given fields: ctx, path, version
func (_m *APIMock) GetSecretRequest(ctx context.Context, path string, version *uint32) (*types.GetSecretResponse, error) {
	ret := _m.Called(ctx, path, version)

	if len(ret) == 0 {
		panic("no return value specified for GetSecretRequest")
	}

	var r0 *types.GetSecretResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *uint32) (*types.GetSecretResponse, error)); ok {
		return rf(ctx, path, version)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *uint32) *types.GetSecretResponse); ok {
		r0 = rf(ctx, path, version)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.GetSecretResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *uint32) error); ok {
		r1 = rf(ctx, path, version)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// APIMock_GetSecretRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSecretRequest'
type APIMock_GetSecretRequest_Call struct {
	*mock.Call
}

// GetSecretRequest is a helper method to define mock.On call
//   - ctx context.Context
//   - path string
//   - version *uint32
func (_e *APIMock_Expecter) GetSecretRequest(ctx interface{}, path interface{}, version interface{}) *APIMock_GetSecretRequest_Call {
	return &APIMock_GetSecretRequest_Call{Call: _e.mock.On("GetSecretRequest", ctx, path, version)}
}

func (_c *APIMock_GetSecretRequest_Call) Run(run func(ctx context.Context, path string, version *uint32)) *APIMock_GetSecretRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*uint32))
	})
	return _c
}

func (_c *APIMock_GetSecretRequest_Call) Return(_a0 *types.GetSecretResponse, _a1 error) *APIMock_GetSecretRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *APIMock_GetSecretRequest_Call) RunAndReturn(run func(context.Context, string, *uint32) (*types.GetSecretResponse, error)) *APIMock_GetSecretRequest_Call {
	_c.Call.Return(run)
	return _c
}

// GetSecretSubkeys provides a mock function with given fields: ctx, path, depth, version
func (_m *APIMock) GetSecretSubkeys(ctx context.Context, path string, depth *uint32, version *uint32) (*types.GetSecretSubkeysResponse, error) {
	ret := _m.Called(ctx, path, depth, version)

	if len(ret) == 0 {
		panic("no return value specified for GetSecretSubkeys")
	}

	var r0 *types.GetSecretSubkeysResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *uint32, *uint32) (*types.GetSecretSubkeysResponse, error)); ok {
		return rf(ctx, path, depth, version)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *uint32, *uint32) *types.GetSecretSubkeysResponse); ok {
		r0 = rf(ctx, path, depth, version)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.GetSecretSubkeysResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *uint32, *uint32) error); ok {
		r1 = rf(ctx, path, depth, version)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// APIMock_GetSecretSubkeys_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSecretSubkeys'
type APIMock_GetSecretSubkeys_Call struct {
	*mock.Call
}

// GetSecretSubkeys is a helper method to define mock.On call
//   - ctx context.Context
//   - path string
//   - depth *uint32
//   - version *uint32
func (_e *APIMock_Expecter) GetSecretSubkeys(ctx interface{}, path interface{}, depth interface{}, version interface{}) *APIMock_GetSecretSubkeys_Call {
	return &APIMock_GetSecretSubkeys_Call{Call: _e.mock.On("GetSecretSubkeys", ctx, path, depth, version)}
}

func (_c *APIMock_GetSecretSubkeys_Call) Run(run func(ctx context.Context, path string, depth *uint32, version *uint32)) *APIMock_GetSecretSubkeys_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*uint32), args[3].(*uint32))
	})
	return _c
}

func (_c *APIMock_GetSecretSubkeys_Call) Return(_a0 *types.GetSecretSubkeysResponse, _a1 error) *APIMock_GetSecretSubkeys_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *APIMock_GetSecretSubkeys_Call) RunAndReturn(run func(context.Context, string, *uint32, *uint32) (*types.GetSecretSubkeysResponse, error)) *APIMock_GetSecretSubkeys_Call {
	_c.Call.Return(run)
	return _c
}

// GetSecretV2 provides a mock function with given fields: ctx, path, version, includeData
func (_m *APIMock) GetSecretV2(ctx context.Context, path string, version *uint32, includeData *bool) (*types.GetSecretV2Response, error) {
	ret := _m.Called(ctx, path, version, includeData)

	if len(ret) == 0 {
		panic("no return value specified for GetSecretV2")
	}

	var r0 *types.GetSecretV2Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *uint32, *bool) (*types.GetSecretV2Response, error)); ok {
		return rf(ctx, path, version, includeData)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *uint32, *bool) *types.GetSecretV2Response); ok {
		r0 = rf(ctx, path, version, includeData)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.GetSecretV2Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *uint32, *bool) error); ok {
		r1 = rf(ctx, path, version, includeData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// APIMock_GetSecretV2_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSecretV2'
type APIMock_GetSecretV2_Call struct {
	*mock.Call
}

// GetSecretV2 is a helper method to define mock.On call
//   - ctx context.Context
//   - path string
//   - version *uint32
//   - includeData *bool
func (_e *APIMock_Expecter) GetSecretV2(ctx interface{}, path interface{}, version interface{}, includeData interface{}) *APIMock_GetSecretV2_Call {
	return &APIMock_GetSecretV2_Call{Call: _e.mock.On("GetSecretV2", ctx, path, version, includeData)}
}

func (_c *APIMock_GetSecretV2_Call) Run(run func(ctx context.Context, path string, version *uint32, includeData *bool)) *APIMock_GetSecretV2_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*uint32), args[3].(*bool))
	})
	return _c
}

func (_c *APIMock_GetSecretV2_Call) Return(_a0 *types.GetSecretV2Response, _a1 error) *APIMock_GetSecretV2_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *APIMock_GetSecretV2_Call) RunAndReturn(run func(context.Context, string, *uint32, *bool) (*types.GetSecretV2Response, error)) *APIMock_GetSecretV2_Call {
	_c.Call.Return(run)
	return _c
}

// GetSecretVersionV2 provides a mock function with given fields: ctx, path, version, includeData
func (_m *APIMock) GetSecretVersionV2(ctx context.Context, path string, version uint32, includeData *bool) (*types.SecretV2Version, error) {
	ret := _m.Called(ctx, path, version, includeData)

	if len(ret) == 0 {
		panic("no return value specified for GetSecretVersionV2")
	}

	var r0 *types.SecretV2Version
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, uint32, *bool) (*types.SecretV2Version, error)); ok {
		return rf(ctx, path, version, includeData)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, uint32, *bool) *types.SecretV2Version); ok {
		r0 = rf(ctx, path, version, includeData)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.SecretV2Version)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, uint32, *bool) error); ok {
		r1 = rf(ctx, path, version, includeData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// APIMock_GetSecretVersionV2_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSecretVersionV2'
type APIMock_GetSecretVersionV2_Call struct {
	*mock.Call
}

// GetSecretVersionV2 is a helper method to define mock.On call
//   - ctx context.Context
//   - path string
//   - version uint32
//   - includeData *bool
func (_e *APIMock_Expecter) GetSecretVersionV2(ctx interface{}, path interface{}, version interface{}, includeData interface{}) *APIMock_GetSecretVersionV2_Call {
	return &APIMock_GetSecretVersionV2_Call{Call: _e.mock.On("GetSecretVersionV2", ctx, path, version, includeData)}
}

func (_c *APIMock_GetSecretVersionV2_Call) Run(run func(ctx context.Context, path string, version uint32, includeData *bool)) *APIMock_GetSecretVersionV2_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(uint32), args[3].(*bool))
	})
	return _c
}

func (_c *APIMock_GetSecretVersionV2_Call) Return(_a0 *types.SecretV2Version, _a1 error) *APIMock_GetSecretVersionV2_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *APIMock_GetSecretVersionV2_Call) RunAndReturn(run func(context.Context, string, uint32, *bool) (*types.SecretV2Version, error)) *APIMock_GetSecretVersionV2_Call {
	_c.Call.Return(run)
	return _c
}

// GetSecretsMetadata provides a mock function with given fields: ctx, path, list
func (_m *APIMock) GetSecretsMetadata(ctx context.Context, path string, list bool) (*types.GetMetadataResponse, error) {
	ret := _m.Called(ctx, path, list)

	if len(ret) == 0 {
		panic("no return value specified for GetSecretsMetadata")
	}

	var r0 *types.GetMetadataResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, bool) (*types.GetMetadataResponse, error)); ok {
		return rf(ctx, path, list)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, bool) *types.GetMetadataResponse); ok {
		r0 = rf(ctx, path, list)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.GetMetadataResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, bool) error); ok {
		r1 = rf(ctx, path, list)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// APIMock_GetSecretsMetadata_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSecretsMetadata'
type APIMock_GetSecretsMetadata_Call struct {
	*mock.Call
}

// GetSecretsMetadata is a helper method to define mock.On call
//   - ctx context.Context
//   - path string
//   - list bool
func (_e *APIMock_Expecter) GetSecretsMetadata(ctx interface{}, path interface{}, list interface{}) *APIMock_GetSecretsMetadata_Call {
	return &APIMock_GetSecretsMetadata_Call{Call: _e.mock.On("GetSecretsMetadata", ctx, path, list)}
}

func (_c *APIMock_GetSecretsMetadata_Call) Run(run func(ctx context.Context, path string, list bool)) *APIMock_GetSecretsMetadata_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(bool))
	})
	return _c
}

func (_c *APIMock_GetSecretsMetadata_Call) Return(_a0 *types.GetMetadataResponse, _a1 error) *APIMock_GetSecretsMetadata_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *APIMock_GetSecretsMetadata_Call) RunAndReturn(run func(context.Context, string, bool) (*types.GetMetadataResponse, error)) *APIMock_GetSecretsMetadata_Call {
	_c.Call.Return(run)
	return _c
}

// GetServiceKey provides a mock function with given fields: ctx, keyId, format
func (_m *APIMock) GetServiceKey(ctx context.Context, keyId uuid.UUID, format *types.KeyFormats) (*types.GetServiceKeyResponse, error) {
	ret := _m.Called(ctx, keyId, format)

	if len(ret) == 0 {
		panic("no return value specified for GetServiceKey")
	}

	var r0 *types.GetServiceKeyResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, *types.KeyFormats) (*types.GetServiceKeyResponse, error)); ok {
		return rf(ctx, keyId, format)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, *types.KeyFormats) *types.GetServiceKeyResponse); ok {
		r0 = rf(ctx, keyId, format)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.GetServiceKeyResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, *types.KeyFormats) error); ok {
		r1 = rf(ctx, keyId, format)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// APIMock_GetServiceKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetServiceKey'
type APIMock_GetServiceKey_Call struct {
	*mock.Call
}

// GetServiceKey is a helper method to define mock.On call
//   - ctx context.Context
//   - keyId uuid.UUID
//   - format *types.KeyFormats
func (_e *APIMock_Expecter) GetServiceKey(ctx interface{}, keyId interface{}, format interface{}) *APIMock_GetServiceKey_Call {
	return &APIMock_GetServiceKey_Call{Call: _e.mock.On("GetServiceKey", ctx, keyId, format)}
}

func (_c *APIMock_GetServiceKey_Call) Run(run func(ctx context.Context, keyId uuid.UUID, format *types.KeyFormats)) *APIMock_GetServiceKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(*types.KeyFormats))
	})
	return _c
}

func (_c *APIMock_GetServiceKey_Call) Return(_a0 *types.GetServiceKeyResponse, _a1 error) *APIMock_GetServiceKey_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *APIMock_GetServiceKey_Call) RunAndReturn(run func(context.Context, uuid.UUID, *types.KeyFormats) (*types.GetServiceKeyResponse, error)) *APIMock_GetServiceKey_Call {
	_c.Call.Return(run)
	return _c
}

// ListSecretV2 provides a mock function with given fields: ctx, pageSize, pageCursor
func (_m *APIMock) ListSecretV2(ctx context.Context, pageSize *uint32, pageCursor *string) (*[]types.GetSecretV2Response, error) {
	ret := _m.Called(ctx, pageSize, pageCursor)

	if len(ret) == 0 {
		panic("no return value specified for ListSecretV2")
	}

	var r0 *[]types.GetSecretV2Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *uint32, *string) (*[]types.GetSecretV2Response, error)); ok {
		return rf(ctx, pageSize, pageCursor)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *uint32, *string) *[]types.GetSecretV2Response); ok {
		r0 = rf(ctx, pageSize, pageCursor)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]types.GetSecretV2Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *uint32, *string) error); ok {
		r1 = rf(ctx, pageSize, pageCursor)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// APIMock_ListSecretV2_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListSecretV2'
type APIMock_ListSecretV2_Call struct {
	*mock.Call
}

// ListSecretV2 is a helper method to define mock.On call
//   - ctx context.Context
//   - pageSize *uint32
//   - pageCursor *string
func (_e *APIMock_Expecter) ListSecretV2(ctx interface{}, pageSize interface{}, pageCursor interface{}) *APIMock_ListSecretV2_Call {
	return &APIMock_ListSecretV2_Call{Call: _e.mock.On("ListSecretV2", ctx, pageSize, pageCursor)}
}

func (_c *APIMock_ListSecretV2_Call) Run(run func(ctx context.Context, pageSize *uint32, pageCursor *string)) *APIMock_ListSecretV2_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*uint32), args[2].(*string))
	})
	return _c
}

func (_c *APIMock_ListSecretV2_Call) Return(_a0 *[]types.GetSecretV2Response, _a1 error) *APIMock_ListSecretV2_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *APIMock_ListSecretV2_Call) RunAndReturn(run func(context.Context, *uint32, *string) (*[]types.GetSecretV2Response, error)) *APIMock_ListSecretV2_Call {
	_c.Call.Return(run)
	return _c
}

// ListSecretVersionV2 provides a mock function with given fields: ctx, path, pageSize, pageCursor
func (_m *APIMock) ListSecretVersionV2(ctx context.Context, path string, pageSize *uint32, pageCursor *string) (*[]types.SecretV2Version, error) {
	ret := _m.Called(ctx, path, pageSize, pageCursor)

	if len(ret) == 0 {
		panic("no return value specified for ListSecretVersionV2")
	}

	var r0 *[]types.SecretV2Version
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *uint32, *string) (*[]types.SecretV2Version, error)); ok {
		return rf(ctx, path, pageSize, pageCursor)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *uint32, *string) *[]types.SecretV2Version); ok {
		r0 = rf(ctx, path, pageSize, pageCursor)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]types.SecretV2Version)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *uint32, *string) error); ok {
		r1 = rf(ctx, path, pageSize, pageCursor)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// APIMock_ListSecretVersionV2_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListSecretVersionV2'
type APIMock_ListSecretVersionV2_Call struct {
	*mock.Call
}

// ListSecretVersionV2 is a helper method to define mock.On call
//   - ctx context.Context
//   - path string
//   - pageSize *uint32
//   - pageCursor *string
func (_e *APIMock_Expecter) ListSecretVersionV2(ctx interface{}, path interface{}, pageSize interface{}, pageCursor interface{}) *APIMock_ListSecretVersionV2_Call {
	return &APIMock_ListSecretVersionV2_Call{Call: _e.mock.On("ListSecretVersionV2", ctx, path, pageSize, pageCursor)}
}

func (_c *APIMock_ListSecretVersionV2_Call) Run(run func(ctx context.Context, path string, pageSize *uint32, pageCursor *string)) *APIMock_ListSecretVersionV2_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*uint32), args[3].(*string))
	})
	return _c
}

func (_c *APIMock_ListSecretVersionV2_Call) Return(_a0 *[]types.SecretV2Version, _a1 error) *APIMock_ListSecretVersionV2_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *APIMock_ListSecretVersionV2_Call) RunAndReturn(run func(context.Context, string, *uint32, *string) (*[]types.SecretV2Version, error)) *APIMock_ListSecretVersionV2_Call {
	_c.Call.Return(run)
	return _c
}

// ListServiceKeys provides a mock function with given fields: ctx, continuationToken, maxKey, state
func (_m *APIMock) ListServiceKeys(ctx context.Context, continuationToken *string, maxKey *uint32, state *types.KeyStates) (*types.ListServiceKeysResponse, error) {
	ret := _m.Called(ctx, continuationToken, maxKey, state)

	if len(ret) == 0 {
		panic("no return value specified for ListServiceKeys")
	}

	var r0 *types.ListServiceKeysResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *string, *uint32, *types.KeyStates) (*types.ListServiceKeysResponse, error)); ok {
		return rf(ctx, continuationToken, maxKey, state)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *string, *uint32, *types.KeyStates) *types.ListServiceKeysResponse); ok {
		r0 = rf(ctx, continuationToken, maxKey, state)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.ListServiceKeysResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *string, *uint32, *types.KeyStates) error); ok {
		r1 = rf(ctx, continuationToken, maxKey, state)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// APIMock_ListServiceKeys_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListServiceKeys'
type APIMock_ListServiceKeys_Call struct {
	*mock.Call
}

// ListServiceKeys is a helper method to define mock.On call
//   - ctx context.Context
//   - continuationToken *string
//   - maxKey *uint32
//   - state *types.KeyStates
func (_e *APIMock_Expecter) ListServiceKeys(ctx interface{}, continuationToken interface{}, maxKey interface{}, state interface{}) *APIMock_ListServiceKeys_Call {
	return &APIMock_ListServiceKeys_Call{Call: _e.mock.On("ListServiceKeys", ctx, continuationToken, maxKey, state)}
}

func (_c *APIMock_ListServiceKeys_Call) Run(run func(ctx context.Context, continuationToken *string, maxKey *uint32, state *types.KeyStates)) *APIMock_ListServiceKeys_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*string), args[2].(*uint32), args[3].(*types.KeyStates))
	})
	return _c
}

func (_c *APIMock_ListServiceKeys_Call) Return(_a0 *types.ListServiceKeysResponse, _a1 error) *APIMock_ListServiceKeys_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *APIMock_ListServiceKeys_Call) RunAndReturn(run func(context.Context, *string, *uint32, *types.KeyStates) (*types.ListServiceKeysResponse, error)) *APIMock_ListServiceKeys_Call {
	_c.Call.Return(run)
	return _c
}

// PatchSecretMetadata provides a mock function with given fields: ctx, path, body
func (_m *APIMock) PatchSecretMetadata(ctx context.Context, path string, body types.SecretUpdatableMetadata) error {
	ret := _m.Called(ctx, path, body)

	if len(ret) == 0 {
		panic("no return value specified for PatchSecretMetadata")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, types.SecretUpdatableMetadata) error); ok {
		r0 = rf(ctx, path, body)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// APIMock_PatchSecretMetadata_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PatchSecretMetadata'
type APIMock_PatchSecretMetadata_Call struct {
	*mock.Call
}

// PatchSecretMetadata is a helper method to define mock.On call
//   - ctx context.Context
//   - path string
//   - body types.SecretUpdatableMetadata
func (_e *APIMock_Expecter) PatchSecretMetadata(ctx interface{}, path interface{}, body interface{}) *APIMock_PatchSecretMetadata_Call {
	return &APIMock_PatchSecretMetadata_Call{Call: _e.mock.On("PatchSecretMetadata", ctx, path, body)}
}

func (_c *APIMock_PatchSecretMetadata_Call) Run(run func(ctx context.Context, path string, body types.SecretUpdatableMetadata)) *APIMock_PatchSecretMetadata_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(types.SecretUpdatableMetadata))
	})
	return _c
}

func (_c *APIMock_PatchSecretMetadata_Call) Return(_a0 error) *APIMock_PatchSecretMetadata_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *APIMock_PatchSecretMetadata_Call) RunAndReturn(run func(context.Context, string, types.SecretUpdatableMetadata) error) *APIMock_PatchSecretMetadata_Call {
	_c.Call.Return(run)
	return _c
}

// PatchSecretRequest provides a mock function with given fields: ctx, path, body
func (_m *APIMock) PatchSecretRequest(ctx context.Context, path string, body types.PostSecretRequest) (*types.PatchSecretResponse, error) {
	ret := _m.Called(ctx, path, body)

	if len(ret) == 0 {
		panic("no return value specified for PatchSecretRequest")
	}

	var r0 *types.PatchSecretResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, types.PostSecretRequest) (*types.PatchSecretResponse, error)); ok {
		return rf(ctx, path, body)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, types.PostSecretRequest) *types.PatchSecretResponse); ok {
		r0 = rf(ctx, path, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.PatchSecretResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, types.PostSecretRequest) error); ok {
		r1 = rf(ctx, path, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// APIMock_PatchSecretRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PatchSecretRequest'
type APIMock_PatchSecretRequest_Call struct {
	*mock.Call
}

// PatchSecretRequest is a helper method to define mock.On call
//   - ctx context.Context
//   - path string
//   - body types.PostSecretRequest
func (_e *APIMock_Expecter) PatchSecretRequest(ctx interface{}, path interface{}, body interface{}) *APIMock_PatchSecretRequest_Call {
	return &APIMock_PatchSecretRequest_Call{Call: _e.mock.On("PatchSecretRequest", ctx, path, body)}
}

func (_c *APIMock_PatchSecretRequest_Call) Run(run func(ctx context.Context, path string, body types.PostSecretRequest)) *APIMock_PatchSecretRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(types.PostSecretRequest))
	})
	return _c
}

func (_c *APIMock_PatchSecretRequest_Call) Return(_a0 *types.PatchSecretResponse, _a1 error) *APIMock_PatchSecretRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *APIMock_PatchSecretRequest_Call) RunAndReturn(run func(context.Context, string, types.PostSecretRequest) (*types.PatchSecretResponse, error)) *APIMock_PatchSecretRequest_Call {
	_c.Call.Return(run)
	return _c
}

// PostSecretConfig provides a mock function with given fields: ctx, body
func (_m *APIMock) PostSecretConfig(ctx context.Context, body types.PostConfigRequest) error {
	ret := _m.Called(ctx, body)

	if len(ret) == 0 {
		panic("no return value specified for PostSecretConfig")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, types.PostConfigRequest) error); ok {
		r0 = rf(ctx, body)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// APIMock_PostSecretConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostSecretConfig'
type APIMock_PostSecretConfig_Call struct {
	*mock.Call
}

// PostSecretConfig is a helper method to define mock.On call
//   - ctx context.Context
//   - body types.PostConfigRequest
func (_e *APIMock_Expecter) PostSecretConfig(ctx interface{}, body interface{}) *APIMock_PostSecretConfig_Call {
	return &APIMock_PostSecretConfig_Call{Call: _e.mock.On("PostSecretConfig", ctx, body)}
}

func (_c *APIMock_PostSecretConfig_Call) Run(run func(ctx context.Context, body types.PostConfigRequest)) *APIMock_PostSecretConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.PostConfigRequest))
	})
	return _c
}

func (_c *APIMock_PostSecretConfig_Call) Return(_a0 error) *APIMock_PostSecretConfig_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *APIMock_PostSecretConfig_Call) RunAndReturn(run func(context.Context, types.PostConfigRequest) error) *APIMock_PostSecretConfig_Call {
	_c.Call.Return(run)
	return _c
}

// PostSecretMetadata provides a mock function with given fields: ctx, path, body
func (_m *APIMock) PostSecretMetadata(ctx context.Context, path string, body types.SecretUpdatableMetadata) error {
	ret := _m.Called(ctx, path, body)

	if len(ret) == 0 {
		panic("no return value specified for PostSecretMetadata")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, types.SecretUpdatableMetadata) error); ok {
		r0 = rf(ctx, path, body)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// APIMock_PostSecretMetadata_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostSecretMetadata'
type APIMock_PostSecretMetadata_Call struct {
	*mock.Call
}

// PostSecretMetadata is a helper method to define mock.On call
//   - ctx context.Context
//   - path string
//   - body types.SecretUpdatableMetadata
func (_e *APIMock_Expecter) PostSecretMetadata(ctx interface{}, path interface{}, body interface{}) *APIMock_PostSecretMetadata_Call {
	return &APIMock_PostSecretMetadata_Call{Call: _e.mock.On("PostSecretMetadata", ctx, path, body)}
}

func (_c *APIMock_PostSecretMetadata_Call) Run(run func(ctx context.Context, path string, body types.SecretUpdatableMetadata)) *APIMock_PostSecretMetadata_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(types.SecretUpdatableMetadata))
	})
	return _c
}

func (_c *APIMock_PostSecretMetadata_Call) Return(_a0 error) *APIMock_PostSecretMetadata_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *APIMock_PostSecretMetadata_Call) RunAndReturn(run func(context.Context, string, types.SecretUpdatableMetadata) error) *APIMock_PostSecretMetadata_Call {
	_c.Call.Return(run)
	return _c
}

// PostSecretRequest provides a mock function with given fields: ctx, path, body
func (_m *APIMock) PostSecretRequest(ctx context.Context, path string, body types.PostSecretRequest) (*types.PostSecretResponse, error) {
	ret := _m.Called(ctx, path, body)

	if len(ret) == 0 {
		panic("no return value specified for PostSecretRequest")
	}

	var r0 *types.PostSecretResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, types.PostSecretRequest) (*types.PostSecretResponse, error)); ok {
		return rf(ctx, path, body)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, types.PostSecretRequest) *types.PostSecretResponse); ok {
		r0 = rf(ctx, path, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.PostSecretResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, types.PostSecretRequest) error); ok {
		r1 = rf(ctx, path, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// APIMock_PostSecretRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostSecretRequest'
type APIMock_PostSecretRequest_Call struct {
	*mock.Call
}

// PostSecretRequest is a helper method to define mock.On call
//   - ctx context.Context
//   - path string
//   - body types.PostSecretRequest
func (_e *APIMock_Expecter) PostSecretRequest(ctx interface{}, path interface{}, body interface{}) *APIMock_PostSecretRequest_Call {
	return &APIMock_PostSecretRequest_Call{Call: _e.mock.On("PostSecretRequest", ctx, path, body)}
}

func (_c *APIMock_PostSecretRequest_Call) Run(run func(ctx context.Context, path string, body types.PostSecretRequest)) *APIMock_PostSecretRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(types.PostSecretRequest))
	})
	return _c
}

func (_c *APIMock_PostSecretRequest_Call) Return(_a0 *types.PostSecretResponse, _a1 error) *APIMock_PostSecretRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *APIMock_PostSecretRequest_Call) RunAndReturn(run func(context.Context, string, types.PostSecretRequest) (*types.PostSecretResponse, error)) *APIMock_PostSecretRequest_Call {
	_c.Call.Return(run)
	return _c
}

// PostSecretUndelete provides a mock function with given fields: ctx, path, versions
func (_m *APIMock) PostSecretUndelete(ctx context.Context, path string, versions []uint32) error {
	ret := _m.Called(ctx, path, versions)

	if len(ret) == 0 {
		panic("no return value specified for PostSecretUndelete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []uint32) error); ok {
		r0 = rf(ctx, path, versions)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// APIMock_PostSecretUndelete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostSecretUndelete'
type APIMock_PostSecretUndelete_Call struct {
	*mock.Call
}

// PostSecretUndelete is a helper method to define mock.On call
//   - ctx context.Context
//   - path string
//   - versions []uint32
func (_e *APIMock_Expecter) PostSecretUndelete(ctx interface{}, path interface{}, versions interface{}) *APIMock_PostSecretUndelete_Call {
	return &APIMock_PostSecretUndelete_Call{Call: _e.mock.On("PostSecretUndelete", ctx, path, versions)}
}

func (_c *APIMock_PostSecretUndelete_Call) Run(run func(ctx context.Context, path string, versions []uint32)) *APIMock_PostSecretUndelete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]uint32))
	})
	return _c
}

func (_c *APIMock_PostSecretUndelete_Call) Return(_a0 error) *APIMock_PostSecretUndelete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *APIMock_PostSecretUndelete_Call) RunAndReturn(run func(context.Context, string, []uint32) error) *APIMock_PostSecretUndelete_Call {
	_c.Call.Return(run)
	return _c
}

// PostSecretV2 provides a mock function with given fields: ctx, body
func (_m *APIMock) PostSecretV2(ctx context.Context, body types.PostSecretV2Request) (*types.PostSecretV2Response, error) {
	ret := _m.Called(ctx, body)

	if len(ret) == 0 {
		panic("no return value specified for PostSecretV2")
	}

	var r0 *types.PostSecretV2Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, types.PostSecretV2Request) (*types.PostSecretV2Response, error)); ok {
		return rf(ctx, body)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.PostSecretV2Request) *types.PostSecretV2Response); ok {
		r0 = rf(ctx, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.PostSecretV2Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.PostSecretV2Request) error); ok {
		r1 = rf(ctx, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// APIMock_PostSecretV2_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostSecretV2'
type APIMock_PostSecretV2_Call struct {
	*mock.Call
}

// PostSecretV2 is a helper method to define mock.On call
//   - ctx context.Context
//   - body types.PostSecretV2Request
func (_e *APIMock_Expecter) PostSecretV2(ctx interface{}, body interface{}) *APIMock_PostSecretV2_Call {
	return &APIMock_PostSecretV2_Call{Call: _e.mock.On("PostSecretV2", ctx, body)}
}

func (_c *APIMock_PostSecretV2_Call) Run(run func(ctx context.Context, body types.PostSecretV2Request)) *APIMock_PostSecretV2_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.PostSecretV2Request))
	})
	return _c
}

func (_c *APIMock_PostSecretV2_Call) Return(_a0 *types.PostSecretV2Response, _a1 error) *APIMock_PostSecretV2_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *APIMock_PostSecretV2_Call) RunAndReturn(run func(context.Context, types.PostSecretV2Request) (*types.PostSecretV2Response, error)) *APIMock_PostSecretV2_Call {
	_c.Call.Return(run)
	return _c
}

// PostSecretVersionV2 provides a mock function with given fields: ctx, path, cas, body
func (_m *APIMock) PostSecretVersionV2(ctx context.Context, path string, cas *uint32, body types.PostSecretVersionV2Request) (*types.SecretV2Version, error) {
	ret := _m.Called(ctx, path, cas, body)

	if len(ret) == 0 {
		panic("no return value specified for PostSecretVersionV2")
	}

	var r0 *types.SecretV2Version
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *uint32, types.PostSecretVersionV2Request) (*types.SecretV2Version, error)); ok {
		return rf(ctx, path, cas, body)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *uint32, types.PostSecretVersionV2Request) *types.SecretV2Version); ok {
		r0 = rf(ctx, path, cas, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.SecretV2Version)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *uint32, types.PostSecretVersionV2Request) error); ok {
		r1 = rf(ctx, path, cas, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// APIMock_PostSecretVersionV2_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostSecretVersionV2'
type APIMock_PostSecretVersionV2_Call struct {
	*mock.Call
}

// PostSecretVersionV2 is a helper method to define mock.On call
//   - ctx context.Context
//   - path string
//   - cas *uint32
//   - body types.PostSecretVersionV2Request
func (_e *APIMock_Expecter) PostSecretVersionV2(ctx interface{}, path interface{}, cas interface{}, body interface{}) *APIMock_PostSecretVersionV2_Call {
	return &APIMock_PostSecretVersionV2_Call{Call: _e.mock.On("PostSecretVersionV2", ctx, path, cas, body)}
}

func (_c *APIMock_PostSecretVersionV2_Call) Run(run func(ctx context.Context, path string, cas *uint32, body types.PostSecretVersionV2Request)) *APIMock_PostSecretVersionV2_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*uint32), args[3].(types.PostSecretVersionV2Request))
	})
	return _c
}

func (_c *APIMock_PostSecretVersionV2_Call) Return(_a0 *types.SecretV2Version, _a1 error) *APIMock_PostSecretVersionV2_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *APIMock_PostSecretVersionV2_Call) RunAndReturn(run func(context.Context, string, *uint32, types.PostSecretVersionV2Request) (*types.SecretV2Version, error)) *APIMock_PostSecretVersionV2_Call {
	_c.Call.Return(run)
	return _c
}

// PutSecretConfigV2 provides a mock function with given fields: ctx, body
func (_m *APIMock) PutSecretConfigV2(ctx context.Context, body types.PutSecretConfigV2Request) (*types.PutSecretConfigV2Response, error) {
	ret := _m.Called(ctx, body)

	if len(ret) == 0 {
		panic("no return value specified for PutSecretConfigV2")
	}

	var r0 *types.PutSecretConfigV2Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, types.PutSecretConfigV2Request) (*types.PutSecretConfigV2Response, error)); ok {
		return rf(ctx, body)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.PutSecretConfigV2Request) *types.PutSecretConfigV2Response); ok {
		r0 = rf(ctx, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.PutSecretConfigV2Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.PutSecretConfigV2Request) error); ok {
		r1 = rf(ctx, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// APIMock_PutSecretConfigV2_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutSecretConfigV2'
type APIMock_PutSecretConfigV2_Call struct {
	*mock.Call
}

// PutSecretConfigV2 is a helper method to define mock.On call
//   - ctx context.Context
//   - body types.PutSecretConfigV2Request
func (_e *APIMock_Expecter) PutSecretConfigV2(ctx interface{}, body interface{}) *APIMock_PutSecretConfigV2_Call {
	return &APIMock_PutSecretConfigV2_Call{Call: _e.mock.On("PutSecretConfigV2", ctx, body)}
}

func (_c *APIMock_PutSecretConfigV2_Call) Run(run func(ctx context.Context, body types.PutSecretConfigV2Request)) *APIMock_PutSecretConfigV2_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.PutSecretConfigV2Request))
	})
	return _c
}

func (_c *APIMock_PutSecretConfigV2_Call) Return(_a0 *types.PutSecretConfigV2Response, _a1 error) *APIMock_PutSecretConfigV2_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *APIMock_PutSecretConfigV2_Call) RunAndReturn(run func(context.Context, types.PutSecretConfigV2Request) (*types.PutSecretConfigV2Response, error)) *APIMock_PutSecretConfigV2_Call {
	_c.Call.Return(run)
	return _c
}

// PutSecretDestroy provides a mock function with given fields: ctx, path, versions
func (_m *APIMock) PutSecretDestroy(ctx context.Context, path string, versions []uint32) error {
	ret := _m.Called(ctx, path, versions)

	if len(ret) == 0 {
		panic("no return value specified for PutSecretDestroy")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []uint32) error); ok {
		r0 = rf(ctx, path, versions)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// APIMock_PutSecretDestroy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutSecretDestroy'
type APIMock_PutSecretDestroy_Call struct {
	*mock.Call
}

// PutSecretDestroy is a helper method to define mock.On call
//   - ctx context.Context
//   - path string
//   - versions []uint32
func (_e *APIMock_Expecter) PutSecretDestroy(ctx interface{}, path interface{}, versions interface{}) *APIMock_PutSecretDestroy_Call {
	return &APIMock_PutSecretDestroy_Call{Call: _e.mock.On("PutSecretDestroy", ctx, path, versions)}
}

func (_c *APIMock_PutSecretDestroy_Call) Run(run func(ctx context.Context, path string, versions []uint32)) *APIMock_PutSecretDestroy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]uint32))
	})
	return _c
}

func (_c *APIMock_PutSecretDestroy_Call) Return(_a0 error) *APIMock_PutSecretDestroy_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *APIMock_PutSecretDestroy_Call) RunAndReturn(run func(context.Context, string, []uint32) error) *APIMock_PutSecretDestroy_Call {
	_c.Call.Return(run)
	return _c
}

// PutSecretV2 provides a mock function with given fields: ctx, path, cas, body
func (_m *APIMock) PutSecretV2(ctx context.Context, path string, cas *uint32, body types.PutSecretV2Request) (*types.PutSecretV2Response, error) {
	ret := _m.Called(ctx, path, cas, body)

	if len(ret) == 0 {
		panic("no return value specified for PutSecretV2")
	}

	var r0 *types.PutSecretV2Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *uint32, types.PutSecretV2Request) (*types.PutSecretV2Response, error)); ok {
		return rf(ctx, path, cas, body)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *uint32, types.PutSecretV2Request) *types.PutSecretV2Response); ok {
		r0 = rf(ctx, path, cas, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.PutSecretV2Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *uint32, types.PutSecretV2Request) error); ok {
		r1 = rf(ctx, path, cas, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// APIMock_PutSecretV2_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutSecretV2'
type APIMock_PutSecretV2_Call struct {
	*mock.Call
}

// PutSecretV2 is a helper method to define mock.On call
//   - ctx context.Context
//   - path string
//   - cas *uint32
//   - body types.PutSecretV2Request
func (_e *APIMock_Expecter) PutSecretV2(ctx interface{}, path interface{}, cas interface{}, body interface{}) *APIMock_PutSecretV2_Call {
	return &APIMock_PutSecretV2_Call{Call: _e.mock.On("PutSecretV2", ctx, path, cas, body)}
}

func (_c *APIMock_PutSecretV2_Call) Run(run func(ctx context.Context, path string, cas *uint32, body types.PutSecretV2Request)) *APIMock_PutSecretV2_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*uint32), args[3].(types.PutSecretV2Request))
	})
	return _c
}

func (_c *APIMock_PutSecretV2_Call) Return(_a0 *types.PutSecretV2Response, _a1 error) *APIMock_PutSecretV2_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *APIMock_PutSecretV2_Call) RunAndReturn(run func(context.Context, string, *uint32, types.PutSecretV2Request) (*types.PutSecretV2Response, error)) *APIMock_PutSecretV2_Call {
	_c.Call.Return(run)
	return _c
}

// PutSecretVersionV2 provides a mock function with given fields: ctx, path, version, body
func (_m *APIMock) PutSecretVersionV2(ctx context.Context, path string, version uint32, body types.PutSecretVersionV2Request) (*types.SecretV2Version, error) {
	ret := _m.Called(ctx, path, version, body)

	if len(ret) == 0 {
		panic("no return value specified for PutSecretVersionV2")
	}

	var r0 *types.SecretV2Version
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, uint32, types.PutSecretVersionV2Request) (*types.SecretV2Version, error)); ok {
		return rf(ctx, path, version, body)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, uint32, types.PutSecretVersionV2Request) *types.SecretV2Version); ok {
		r0 = rf(ctx, path, version, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.SecretV2Version)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, uint32, types.PutSecretVersionV2Request) error); ok {
		r1 = rf(ctx, path, version, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// APIMock_PutSecretVersionV2_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutSecretVersionV2'
type APIMock_PutSecretVersionV2_Call struct {
	*mock.Call
}

// PutSecretVersionV2 is a helper method to define mock.On call
//   - ctx context.Context
//   - path string
//   - version uint32
//   - body types.PutSecretVersionV2Request
func (_e *APIMock_Expecter) PutSecretVersionV2(ctx interface{}, path interface{}, version interface{}, body interface{}) *APIMock_PutSecretVersionV2_Call {
	return &APIMock_PutSecretVersionV2_Call{Call: _e.mock.On("PutSecretVersionV2", ctx, path, version, body)}
}

func (_c *APIMock_PutSecretVersionV2_Call) Run(run func(ctx context.Context, path string, version uint32, body types.PutSecretVersionV2Request)) *APIMock_PutSecretVersionV2_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(uint32), args[3].(types.PutSecretVersionV2Request))
	})
	return _c
}

func (_c *APIMock_PutSecretVersionV2_Call) Return(_a0 *types.SecretV2Version, _a1 error) *APIMock_PutSecretVersionV2_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *APIMock_PutSecretVersionV2_Call) RunAndReturn(run func(context.Context, string, uint32, types.PutSecretVersionV2Request) (*types.SecretV2Version, error)) *APIMock_PutSecretVersionV2_Call {
	_c.Call.Return(run)
	return _c
}

// SetCustomHeader provides a mock function with given fields: key, value
func (_m *APIMock) SetCustomHeader(key string, value string) {
	_m.Called(key, value)
}

// APIMock_SetCustomHeader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetCustomHeader'
type APIMock_SetCustomHeader_Call struct {
	*mock.Call
}

// SetCustomHeader is a helper method to define mock.On call
//   - key string
//   - value string
func (_e *APIMock_Expecter) SetCustomHeader(key interface{}, value interface{}) *APIMock_SetCustomHeader_Call {
	return &APIMock_SetCustomHeader_Call{Call: _e.mock.On("SetCustomHeader", key, value)}
}

func (_c *APIMock_SetCustomHeader_Call) Run(run func(key string, value string)) *APIMock_SetCustomHeader_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *APIMock_SetCustomHeader_Call) Return() *APIMock_SetCustomHeader_Call {
	_c.Call.Return()
	return _c
}

func (_c *APIMock_SetCustomHeader_Call) RunAndReturn(run func(string, string)) *APIMock_SetCustomHeader_Call {
	_c.Call.Return(run)
	return _c
}

// Sign provides a mock function with given fields: ctx, keyId, format, alg, preHashed, msg
func (_m *APIMock) Sign(ctx context.Context, keyId uuid.UUID, format *types.SignatureFormats, alg types.DigitalSignatureAlgorithms, preHashed bool, msg []byte) (string, error) {
	ret := _m.Called(ctx, keyId, format, alg, preHashed, msg)

	if len(ret) == 0 {
		panic("no return value specified for Sign")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, *types.SignatureFormats, types.DigitalSignatureAlgorithms, bool, []byte) (string, error)); ok {
		return rf(ctx, keyId, format, alg, preHashed, msg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, *types.SignatureFormats, types.DigitalSignatureAlgorithms, bool, []byte) string); ok {
		r0 = rf(ctx, keyId, format, alg, preHashed, msg)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, *types.SignatureFormats, types.DigitalSignatureAlgorithms, bool, []byte) error); ok {
		r1 = rf(ctx, keyId, format, alg, preHashed, msg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// APIMock_Sign_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Sign'
type APIMock_Sign_Call struct {
	*mock.Call
}

// Sign is a helper method to define mock.On call
//   - ctx context.Context
//   - keyId uuid.UUID
//   - format *types.SignatureFormats
//   - alg types.DigitalSignatureAlgorithms
//   - preHashed bool
//   - msg []byte
func (_e *APIMock_Expecter) Sign(ctx interface{}, keyId interface{}, format interface{}, alg interface{}, preHashed interface{}, msg interface{}) *APIMock_Sign_Call {
	return &APIMock_Sign_Call{Call: _e.mock.On("Sign", ctx, keyId, format, alg, preHashed, msg)}
}

func (_c *APIMock_Sign_Call) Run(run func(ctx context.Context, keyId uuid.UUID, format *types.SignatureFormats, alg types.DigitalSignatureAlgorithms, preHashed bool, msg []byte)) *APIMock_Sign_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(*types.SignatureFormats), args[3].(types.DigitalSignatureAlgorithms), args[4].(bool), args[5].([]byte))
	})
	return _c
}

func (_c *APIMock_Sign_Call) Return(_a0 string, _a1 error) *APIMock_Sign_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *APIMock_Sign_Call) RunAndReturn(run func(context.Context, uuid.UUID, *types.SignatureFormats, types.DigitalSignatureAlgorithms, bool, []byte) (string, error)) *APIMock_Sign_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateServiceKey provides a mock function with given fields: ctx, keyId, body
func (_m *APIMock) UpdateServiceKey(ctx context.Context, keyId uuid.UUID, body types.PatchServiceKeyRequest) (*types.GetServiceKeyResponse, error) {
	ret := _m.Called(ctx, keyId, body)

	if len(ret) == 0 {
		panic("no return value specified for UpdateServiceKey")
	}

	var r0 *types.GetServiceKeyResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, types.PatchServiceKeyRequest) (*types.GetServiceKeyResponse, error)); ok {
		return rf(ctx, keyId, body)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, types.PatchServiceKeyRequest) *types.GetServiceKeyResponse); ok {
		r0 = rf(ctx, keyId, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.GetServiceKeyResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, types.PatchServiceKeyRequest) error); ok {
		r1 = rf(ctx, keyId, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// APIMock_UpdateServiceKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateServiceKey'
type APIMock_UpdateServiceKey_Call struct {
	*mock.Call
}

// UpdateServiceKey is a helper method to define mock.On call
//   - ctx context.Context
//   - keyId uuid.UUID
//   - body types.PatchServiceKeyRequest
func (_e *APIMock_Expecter) UpdateServiceKey(ctx interface{}, keyId interface{}, body interface{}) *APIMock_UpdateServiceKey_Call {
	return &APIMock_UpdateServiceKey_Call{Call: _e.mock.On("UpdateServiceKey", ctx, keyId, body)}
}

func (_c *APIMock_UpdateServiceKey_Call) Run(run func(ctx context.Context, keyId uuid.UUID, body types.PatchServiceKeyRequest)) *APIMock_UpdateServiceKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(types.PatchServiceKeyRequest))
	})
	return _c
}

func (_c *APIMock_UpdateServiceKey_Call) Return(_a0 *types.GetServiceKeyResponse, _a1 error) *APIMock_UpdateServiceKey_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *APIMock_UpdateServiceKey_Call) RunAndReturn(run func(context.Context, uuid.UUID, types.PatchServiceKeyRequest) (*types.GetServiceKeyResponse, error)) *APIMock_UpdateServiceKey_Call {
	_c.Call.Return(run)
	return _c
}

// Verify provides a mock function with given fields: ctx, keyId, alg, preHashed, msg, sig
func (_m *APIMock) Verify(ctx context.Context, keyId uuid.UUID, alg types.DigitalSignatureAlgorithms, preHashed bool, msg []byte, sig string) (bool, error) {
	ret := _m.Called(ctx, keyId, alg, preHashed, msg, sig)

	if len(ret) == 0 {
		panic("no return value specified for Verify")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, types.DigitalSignatureAlgorithms, bool, []byte, string) (bool, error)); ok {
		return rf(ctx, keyId, alg, preHashed, msg, sig)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, types.DigitalSignatureAlgorithms, bool, []byte, string) bool); ok {
		r0 = rf(ctx, keyId, alg, preHashed, msg, sig)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, types.DigitalSignatureAlgorithms, bool, []byte, string) error); ok {
		r1 = rf(ctx, keyId, alg, preHashed, msg, sig)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// APIMock_Verify_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Verify'
type APIMock_Verify_Call struct {
	*mock.Call
}

// Verify is a helper method to define mock.On call
//   - ctx context.Context
//   - keyId uuid.UUID
//   - alg types.DigitalSignatureAlgorithms
//   - preHashed bool
//   - msg []byte
//   - sig string
func (_e *APIMock_Expecter) Verify(ctx interface{}, keyId interface{}, alg interface{}, preHashed interface{}, msg interface{}, sig interface{}) *APIMock_Verify_Call {
	return &APIMock_Verify_Call{Call: _e.mock.On("Verify", ctx, keyId, alg, preHashed, msg, sig)}
}

func (_c *APIMock_Verify_Call) Run(run func(ctx context.Context, keyId uuid.UUID, alg types.DigitalSignatureAlgorithms, preHashed bool, msg []byte, sig string)) *APIMock_Verify_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(types.DigitalSignatureAlgorithms), args[3].(bool), args[4].([]byte), args[5].(string))
	})
	return _c
}

func (_c *APIMock_Verify_Call) Return(_a0 bool, _a1 error) *APIMock_Verify_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *APIMock_Verify_Call) RunAndReturn(run func(context.Context, uuid.UUID, types.DigitalSignatureAlgorithms, bool, []byte, string) (bool, error)) *APIMock_Verify_Call {
	_c.Call.Return(run)
	return _c
}

// NewAPIMock creates a new instance of APIMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAPIMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *APIMock {
	mock := &APIMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
