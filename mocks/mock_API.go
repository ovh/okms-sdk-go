// Code generated by mockery v2.42.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	types "github.com/ovh/okms-sdk-go/types"

	uuid "github.com/google/uuid"
)

// APIMock is an autogenerated mock type for the API type
type APIMock struct {
	mock.Mock
}

type APIMock_Expecter struct {
	mock *mock.Mock
}

func (_m *APIMock) EXPECT() *APIMock_Expecter {
	return &APIMock_Expecter{mock: &_m.Mock}
}

// ActivateServiceKey provides a mock function with given fields: ctx, keyId
func (_m *APIMock) ActivateServiceKey(ctx context.Context, keyId uuid.UUID) error {
	ret := _m.Called(ctx, keyId)

	if len(ret) == 0 {
		panic("no return value specified for ActivateServiceKey")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, keyId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// APIMock_ActivateServiceKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ActivateServiceKey'
type APIMock_ActivateServiceKey_Call struct {
	*mock.Call
}

// ActivateServiceKey is a helper method to define mock.On call
//   - ctx context.Context
//   - keyId uuid.UUID
func (_e *APIMock_Expecter) ActivateServiceKey(ctx interface{}, keyId interface{}) *APIMock_ActivateServiceKey_Call {
	return &APIMock_ActivateServiceKey_Call{Call: _e.mock.On("ActivateServiceKey", ctx, keyId)}
}

func (_c *APIMock_ActivateServiceKey_Call) Run(run func(ctx context.Context, keyId uuid.UUID)) *APIMock_ActivateServiceKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *APIMock_ActivateServiceKey_Call) Return(_a0 error) *APIMock_ActivateServiceKey_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *APIMock_ActivateServiceKey_Call) RunAndReturn(run func(context.Context, uuid.UUID) error) *APIMock_ActivateServiceKey_Call {
	_c.Call.Return(run)
	return _c
}

// CreateImportServiceKey provides a mock function with given fields: ctx, format, body
func (_m *APIMock) CreateImportServiceKey(ctx context.Context, format *types.KeyFormats, body types.CreateImportServiceKeyRequest) (*types.GetServiceKeyResponse, error) {
	ret := _m.Called(ctx, format, body)

	if len(ret) == 0 {
		panic("no return value specified for CreateImportServiceKey")
	}

	var r0 *types.GetServiceKeyResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.KeyFormats, types.CreateImportServiceKeyRequest) (*types.GetServiceKeyResponse, error)); ok {
		return rf(ctx, format, body)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.KeyFormats, types.CreateImportServiceKeyRequest) *types.GetServiceKeyResponse); ok {
		r0 = rf(ctx, format, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.GetServiceKeyResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.KeyFormats, types.CreateImportServiceKeyRequest) error); ok {
		r1 = rf(ctx, format, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// APIMock_CreateImportServiceKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateImportServiceKey'
type APIMock_CreateImportServiceKey_Call struct {
	*mock.Call
}

// CreateImportServiceKey is a helper method to define mock.On call
//   - ctx context.Context
//   - format *types.KeyFormats
//   - body types.CreateImportServiceKeyRequest
func (_e *APIMock_Expecter) CreateImportServiceKey(ctx interface{}, format interface{}, body interface{}) *APIMock_CreateImportServiceKey_Call {
	return &APIMock_CreateImportServiceKey_Call{Call: _e.mock.On("CreateImportServiceKey", ctx, format, body)}
}

func (_c *APIMock_CreateImportServiceKey_Call) Run(run func(ctx context.Context, format *types.KeyFormats, body types.CreateImportServiceKeyRequest)) *APIMock_CreateImportServiceKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*types.KeyFormats), args[2].(types.CreateImportServiceKeyRequest))
	})
	return _c
}

func (_c *APIMock_CreateImportServiceKey_Call) Return(_a0 *types.GetServiceKeyResponse, _a1 error) *APIMock_CreateImportServiceKey_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *APIMock_CreateImportServiceKey_Call) RunAndReturn(run func(context.Context, *types.KeyFormats, types.CreateImportServiceKeyRequest) (*types.GetServiceKeyResponse, error)) *APIMock_CreateImportServiceKey_Call {
	_c.Call.Return(run)
	return _c
}

// DeactivateServiceKey provides a mock function with given fields: ctx, keyId, reason
func (_m *APIMock) DeactivateServiceKey(ctx context.Context, keyId uuid.UUID, reason types.RevocationReasons) error {
	ret := _m.Called(ctx, keyId, reason)

	if len(ret) == 0 {
		panic("no return value specified for DeactivateServiceKey")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, types.RevocationReasons) error); ok {
		r0 = rf(ctx, keyId, reason)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// APIMock_DeactivateServiceKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeactivateServiceKey'
type APIMock_DeactivateServiceKey_Call struct {
	*mock.Call
}

// DeactivateServiceKey is a helper method to define mock.On call
//   - ctx context.Context
//   - keyId uuid.UUID
//   - reason types.RevocationReasons
func (_e *APIMock_Expecter) DeactivateServiceKey(ctx interface{}, keyId interface{}, reason interface{}) *APIMock_DeactivateServiceKey_Call {
	return &APIMock_DeactivateServiceKey_Call{Call: _e.mock.On("DeactivateServiceKey", ctx, keyId, reason)}
}

func (_c *APIMock_DeactivateServiceKey_Call) Run(run func(ctx context.Context, keyId uuid.UUID, reason types.RevocationReasons)) *APIMock_DeactivateServiceKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(types.RevocationReasons))
	})
	return _c
}

func (_c *APIMock_DeactivateServiceKey_Call) Return(_a0 error) *APIMock_DeactivateServiceKey_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *APIMock_DeactivateServiceKey_Call) RunAndReturn(run func(context.Context, uuid.UUID, types.RevocationReasons) error) *APIMock_DeactivateServiceKey_Call {
	_c.Call.Return(run)
	return _c
}

// Decrypt provides a mock function with given fields: ctx, keyId, keyCtx, data
func (_m *APIMock) Decrypt(ctx context.Context, keyId uuid.UUID, keyCtx string, data string) ([]byte, error) {
	ret := _m.Called(ctx, keyId, keyCtx, data)

	if len(ret) == 0 {
		panic("no return value specified for Decrypt")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string, string) ([]byte, error)); ok {
		return rf(ctx, keyId, keyCtx, data)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string, string) []byte); ok {
		r0 = rf(ctx, keyId, keyCtx, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, string, string) error); ok {
		r1 = rf(ctx, keyId, keyCtx, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// APIMock_Decrypt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Decrypt'
type APIMock_Decrypt_Call struct {
	*mock.Call
}

// Decrypt is a helper method to define mock.On call
//   - ctx context.Context
//   - keyId uuid.UUID
//   - keyCtx string
//   - data string
func (_e *APIMock_Expecter) Decrypt(ctx interface{}, keyId interface{}, keyCtx interface{}, data interface{}) *APIMock_Decrypt_Call {
	return &APIMock_Decrypt_Call{Call: _e.mock.On("Decrypt", ctx, keyId, keyCtx, data)}
}

func (_c *APIMock_Decrypt_Call) Run(run func(ctx context.Context, keyId uuid.UUID, keyCtx string, data string)) *APIMock_Decrypt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *APIMock_Decrypt_Call) Return(_a0 []byte, _a1 error) *APIMock_Decrypt_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *APIMock_Decrypt_Call) RunAndReturn(run func(context.Context, uuid.UUID, string, string) ([]byte, error)) *APIMock_Decrypt_Call {
	_c.Call.Return(run)
	return _c
}

// DecryptDataKey provides a mock function with given fields: ctx, keyId, encryptedKey
func (_m *APIMock) DecryptDataKey(ctx context.Context, keyId uuid.UUID, encryptedKey string) ([]byte, error) {
	ret := _m.Called(ctx, keyId, encryptedKey)

	if len(ret) == 0 {
		panic("no return value specified for DecryptDataKey")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) ([]byte, error)); ok {
		return rf(ctx, keyId, encryptedKey)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) []byte); ok {
		r0 = rf(ctx, keyId, encryptedKey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, string) error); ok {
		r1 = rf(ctx, keyId, encryptedKey)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// APIMock_DecryptDataKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DecryptDataKey'
type APIMock_DecryptDataKey_Call struct {
	*mock.Call
}

// DecryptDataKey is a helper method to define mock.On call
//   - ctx context.Context
//   - keyId uuid.UUID
//   - encryptedKey string
func (_e *APIMock_Expecter) DecryptDataKey(ctx interface{}, keyId interface{}, encryptedKey interface{}) *APIMock_DecryptDataKey_Call {
	return &APIMock_DecryptDataKey_Call{Call: _e.mock.On("DecryptDataKey", ctx, keyId, encryptedKey)}
}

func (_c *APIMock_DecryptDataKey_Call) Run(run func(ctx context.Context, keyId uuid.UUID, encryptedKey string)) *APIMock_DecryptDataKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(string))
	})
	return _c
}

func (_c *APIMock_DecryptDataKey_Call) Return(_a0 []byte, _a1 error) *APIMock_DecryptDataKey_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *APIMock_DecryptDataKey_Call) RunAndReturn(run func(context.Context, uuid.UUID, string) ([]byte, error)) *APIMock_DecryptDataKey_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteServiceKey provides a mock function with given fields: ctx, keyId
func (_m *APIMock) DeleteServiceKey(ctx context.Context, keyId uuid.UUID) error {
	ret := _m.Called(ctx, keyId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteServiceKey")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, keyId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// APIMock_DeleteServiceKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteServiceKey'
type APIMock_DeleteServiceKey_Call struct {
	*mock.Call
}

// DeleteServiceKey is a helper method to define mock.On call
//   - ctx context.Context
//   - keyId uuid.UUID
func (_e *APIMock_Expecter) DeleteServiceKey(ctx interface{}, keyId interface{}) *APIMock_DeleteServiceKey_Call {
	return &APIMock_DeleteServiceKey_Call{Call: _e.mock.On("DeleteServiceKey", ctx, keyId)}
}

func (_c *APIMock_DeleteServiceKey_Call) Run(run func(ctx context.Context, keyId uuid.UUID)) *APIMock_DeleteServiceKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *APIMock_DeleteServiceKey_Call) Return(_a0 error) *APIMock_DeleteServiceKey_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *APIMock_DeleteServiceKey_Call) RunAndReturn(run func(context.Context, uuid.UUID) error) *APIMock_DeleteServiceKey_Call {
	_c.Call.Return(run)
	return _c
}

// Encrypt provides a mock function with given fields: ctx, keyId, keyCtx, data
func (_m *APIMock) Encrypt(ctx context.Context, keyId uuid.UUID, keyCtx string, data []byte) (string, error) {
	ret := _m.Called(ctx, keyId, keyCtx, data)

	if len(ret) == 0 {
		panic("no return value specified for Encrypt")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string, []byte) (string, error)); ok {
		return rf(ctx, keyId, keyCtx, data)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string, []byte) string); ok {
		r0 = rf(ctx, keyId, keyCtx, data)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, string, []byte) error); ok {
		r1 = rf(ctx, keyId, keyCtx, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// APIMock_Encrypt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Encrypt'
type APIMock_Encrypt_Call struct {
	*mock.Call
}

// Encrypt is a helper method to define mock.On call
//   - ctx context.Context
//   - keyId uuid.UUID
//   - keyCtx string
//   - data []byte
func (_e *APIMock_Expecter) Encrypt(ctx interface{}, keyId interface{}, keyCtx interface{}, data interface{}) *APIMock_Encrypt_Call {
	return &APIMock_Encrypt_Call{Call: _e.mock.On("Encrypt", ctx, keyId, keyCtx, data)}
}

func (_c *APIMock_Encrypt_Call) Run(run func(ctx context.Context, keyId uuid.UUID, keyCtx string, data []byte)) *APIMock_Encrypt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(string), args[3].([]byte))
	})
	return _c
}

func (_c *APIMock_Encrypt_Call) Return(_a0 string, _a1 error) *APIMock_Encrypt_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *APIMock_Encrypt_Call) RunAndReturn(run func(context.Context, uuid.UUID, string, []byte) (string, error)) *APIMock_Encrypt_Call {
	_c.Call.Return(run)
	return _c
}

// GenerateDataKey provides a mock function with given fields: ctx, keyId, name, size
func (_m *APIMock) GenerateDataKey(ctx context.Context, keyId uuid.UUID, name string, size int32) ([]byte, string, error) {
	ret := _m.Called(ctx, keyId, name, size)

	if len(ret) == 0 {
		panic("no return value specified for GenerateDataKey")
	}

	var r0 []byte
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string, int32) ([]byte, string, error)); ok {
		return rf(ctx, keyId, name, size)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string, int32) []byte); ok {
		r0 = rf(ctx, keyId, name, size)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, string, int32) string); ok {
		r1 = rf(ctx, keyId, name, size)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(context.Context, uuid.UUID, string, int32) error); ok {
		r2 = rf(ctx, keyId, name, size)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// APIMock_GenerateDataKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateDataKey'
type APIMock_GenerateDataKey_Call struct {
	*mock.Call
}

// GenerateDataKey is a helper method to define mock.On call
//   - ctx context.Context
//   - keyId uuid.UUID
//   - name string
//   - size int32
func (_e *APIMock_Expecter) GenerateDataKey(ctx interface{}, keyId interface{}, name interface{}, size interface{}) *APIMock_GenerateDataKey_Call {
	return &APIMock_GenerateDataKey_Call{Call: _e.mock.On("GenerateDataKey", ctx, keyId, name, size)}
}

func (_c *APIMock_GenerateDataKey_Call) Run(run func(ctx context.Context, keyId uuid.UUID, name string, size int32)) *APIMock_GenerateDataKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(string), args[3].(int32))
	})
	return _c
}

func (_c *APIMock_GenerateDataKey_Call) Return(plain []byte, encrypted string, err error) *APIMock_GenerateDataKey_Call {
	_c.Call.Return(plain, encrypted, err)
	return _c
}

func (_c *APIMock_GenerateDataKey_Call) RunAndReturn(run func(context.Context, uuid.UUID, string, int32) ([]byte, string, error)) *APIMock_GenerateDataKey_Call {
	_c.Call.Return(run)
	return _c
}

// GetServiceKey provides a mock function with given fields: ctx, keyId, format
func (_m *APIMock) GetServiceKey(ctx context.Context, keyId uuid.UUID, format *types.KeyFormats) (*types.GetServiceKeyResponse, error) {
	ret := _m.Called(ctx, keyId, format)

	if len(ret) == 0 {
		panic("no return value specified for GetServiceKey")
	}

	var r0 *types.GetServiceKeyResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, *types.KeyFormats) (*types.GetServiceKeyResponse, error)); ok {
		return rf(ctx, keyId, format)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, *types.KeyFormats) *types.GetServiceKeyResponse); ok {
		r0 = rf(ctx, keyId, format)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.GetServiceKeyResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, *types.KeyFormats) error); ok {
		r1 = rf(ctx, keyId, format)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// APIMock_GetServiceKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetServiceKey'
type APIMock_GetServiceKey_Call struct {
	*mock.Call
}

// GetServiceKey is a helper method to define mock.On call
//   - ctx context.Context
//   - keyId uuid.UUID
//   - format *types.KeyFormats
func (_e *APIMock_Expecter) GetServiceKey(ctx interface{}, keyId interface{}, format interface{}) *APIMock_GetServiceKey_Call {
	return &APIMock_GetServiceKey_Call{Call: _e.mock.On("GetServiceKey", ctx, keyId, format)}
}

func (_c *APIMock_GetServiceKey_Call) Run(run func(ctx context.Context, keyId uuid.UUID, format *types.KeyFormats)) *APIMock_GetServiceKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(*types.KeyFormats))
	})
	return _c
}

func (_c *APIMock_GetServiceKey_Call) Return(_a0 *types.GetServiceKeyResponse, _a1 error) *APIMock_GetServiceKey_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *APIMock_GetServiceKey_Call) RunAndReturn(run func(context.Context, uuid.UUID, *types.KeyFormats) (*types.GetServiceKeyResponse, error)) *APIMock_GetServiceKey_Call {
	_c.Call.Return(run)
	return _c
}

// ListServiceKeys provides a mock function with given fields: ctx, continuationToken, maxKey, state
func (_m *APIMock) ListServiceKeys(ctx context.Context, continuationToken *string, maxKey *int32, state *types.KeyStates) (*types.ListServiceKeysResponse, error) {
	ret := _m.Called(ctx, continuationToken, maxKey, state)

	if len(ret) == 0 {
		panic("no return value specified for ListServiceKeys")
	}

	var r0 *types.ListServiceKeysResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *string, *int32, *types.KeyStates) (*types.ListServiceKeysResponse, error)); ok {
		return rf(ctx, continuationToken, maxKey, state)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *string, *int32, *types.KeyStates) *types.ListServiceKeysResponse); ok {
		r0 = rf(ctx, continuationToken, maxKey, state)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.ListServiceKeysResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *string, *int32, *types.KeyStates) error); ok {
		r1 = rf(ctx, continuationToken, maxKey, state)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// APIMock_ListServiceKeys_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListServiceKeys'
type APIMock_ListServiceKeys_Call struct {
	*mock.Call
}

// ListServiceKeys is a helper method to define mock.On call
//   - ctx context.Context
//   - continuationToken *string
//   - maxKey *int32
//   - state *types.KeyStates
func (_e *APIMock_Expecter) ListServiceKeys(ctx interface{}, continuationToken interface{}, maxKey interface{}, state interface{}) *APIMock_ListServiceKeys_Call {
	return &APIMock_ListServiceKeys_Call{Call: _e.mock.On("ListServiceKeys", ctx, continuationToken, maxKey, state)}
}

func (_c *APIMock_ListServiceKeys_Call) Run(run func(ctx context.Context, continuationToken *string, maxKey *int32, state *types.KeyStates)) *APIMock_ListServiceKeys_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*string), args[2].(*int32), args[3].(*types.KeyStates))
	})
	return _c
}

func (_c *APIMock_ListServiceKeys_Call) Return(_a0 *types.ListServiceKeysResponse, _a1 error) *APIMock_ListServiceKeys_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *APIMock_ListServiceKeys_Call) RunAndReturn(run func(context.Context, *string, *int32, *types.KeyStates) (*types.ListServiceKeysResponse, error)) *APIMock_ListServiceKeys_Call {
	_c.Call.Return(run)
	return _c
}

// SetCustomHeader provides a mock function with given fields: key, value
func (_m *APIMock) SetCustomHeader(key string, value string) {
	_m.Called(key, value)
}

// APIMock_SetCustomHeader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetCustomHeader'
type APIMock_SetCustomHeader_Call struct {
	*mock.Call
}

// SetCustomHeader is a helper method to define mock.On call
//   - key string
//   - value string
func (_e *APIMock_Expecter) SetCustomHeader(key interface{}, value interface{}) *APIMock_SetCustomHeader_Call {
	return &APIMock_SetCustomHeader_Call{Call: _e.mock.On("SetCustomHeader", key, value)}
}

func (_c *APIMock_SetCustomHeader_Call) Run(run func(key string, value string)) *APIMock_SetCustomHeader_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *APIMock_SetCustomHeader_Call) Return() *APIMock_SetCustomHeader_Call {
	_c.Call.Return()
	return _c
}

func (_c *APIMock_SetCustomHeader_Call) RunAndReturn(run func(string, string)) *APIMock_SetCustomHeader_Call {
	_c.Call.Return(run)
	return _c
}

// Sign provides a mock function with given fields: ctx, keyId, alg, preHashed, msg
func (_m *APIMock) Sign(ctx context.Context, keyId uuid.UUID, alg types.DigitalSignatureAlgorithms, preHashed bool, msg []byte) (string, error) {
	ret := _m.Called(ctx, keyId, alg, preHashed, msg)

	if len(ret) == 0 {
		panic("no return value specified for Sign")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, types.DigitalSignatureAlgorithms, bool, []byte) (string, error)); ok {
		return rf(ctx, keyId, alg, preHashed, msg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, types.DigitalSignatureAlgorithms, bool, []byte) string); ok {
		r0 = rf(ctx, keyId, alg, preHashed, msg)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, types.DigitalSignatureAlgorithms, bool, []byte) error); ok {
		r1 = rf(ctx, keyId, alg, preHashed, msg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// APIMock_Sign_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Sign'
type APIMock_Sign_Call struct {
	*mock.Call
}

// Sign is a helper method to define mock.On call
//   - ctx context.Context
//   - keyId uuid.UUID
//   - alg types.DigitalSignatureAlgorithms
//   - preHashed bool
//   - msg []byte
func (_e *APIMock_Expecter) Sign(ctx interface{}, keyId interface{}, alg interface{}, preHashed interface{}, msg interface{}) *APIMock_Sign_Call {
	return &APIMock_Sign_Call{Call: _e.mock.On("Sign", ctx, keyId, alg, preHashed, msg)}
}

func (_c *APIMock_Sign_Call) Run(run func(ctx context.Context, keyId uuid.UUID, alg types.DigitalSignatureAlgorithms, preHashed bool, msg []byte)) *APIMock_Sign_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(types.DigitalSignatureAlgorithms), args[3].(bool), args[4].([]byte))
	})
	return _c
}

func (_c *APIMock_Sign_Call) Return(_a0 string, _a1 error) *APIMock_Sign_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *APIMock_Sign_Call) RunAndReturn(run func(context.Context, uuid.UUID, types.DigitalSignatureAlgorithms, bool, []byte) (string, error)) *APIMock_Sign_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateServiceKey provides a mock function with given fields: ctx, keyId, body
func (_m *APIMock) UpdateServiceKey(ctx context.Context, keyId uuid.UUID, body types.PatchServiceKeyRequest) (*types.GetServiceKeyResponse, error) {
	ret := _m.Called(ctx, keyId, body)

	if len(ret) == 0 {
		panic("no return value specified for UpdateServiceKey")
	}

	var r0 *types.GetServiceKeyResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, types.PatchServiceKeyRequest) (*types.GetServiceKeyResponse, error)); ok {
		return rf(ctx, keyId, body)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, types.PatchServiceKeyRequest) *types.GetServiceKeyResponse); ok {
		r0 = rf(ctx, keyId, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.GetServiceKeyResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, types.PatchServiceKeyRequest) error); ok {
		r1 = rf(ctx, keyId, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// APIMock_UpdateServiceKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateServiceKey'
type APIMock_UpdateServiceKey_Call struct {
	*mock.Call
}

// UpdateServiceKey is a helper method to define mock.On call
//   - ctx context.Context
//   - keyId uuid.UUID
//   - body types.PatchServiceKeyRequest
func (_e *APIMock_Expecter) UpdateServiceKey(ctx interface{}, keyId interface{}, body interface{}) *APIMock_UpdateServiceKey_Call {
	return &APIMock_UpdateServiceKey_Call{Call: _e.mock.On("UpdateServiceKey", ctx, keyId, body)}
}

func (_c *APIMock_UpdateServiceKey_Call) Run(run func(ctx context.Context, keyId uuid.UUID, body types.PatchServiceKeyRequest)) *APIMock_UpdateServiceKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(types.PatchServiceKeyRequest))
	})
	return _c
}

func (_c *APIMock_UpdateServiceKey_Call) Return(_a0 *types.GetServiceKeyResponse, _a1 error) *APIMock_UpdateServiceKey_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *APIMock_UpdateServiceKey_Call) RunAndReturn(run func(context.Context, uuid.UUID, types.PatchServiceKeyRequest) (*types.GetServiceKeyResponse, error)) *APIMock_UpdateServiceKey_Call {
	_c.Call.Return(run)
	return _c
}

// Verify provides a mock function with given fields: ctx, keyId, alg, preHashed, msg, sig
func (_m *APIMock) Verify(ctx context.Context, keyId uuid.UUID, alg types.DigitalSignatureAlgorithms, preHashed bool, msg []byte, sig string) (bool, error) {
	ret := _m.Called(ctx, keyId, alg, preHashed, msg, sig)

	if len(ret) == 0 {
		panic("no return value specified for Verify")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, types.DigitalSignatureAlgorithms, bool, []byte, string) (bool, error)); ok {
		return rf(ctx, keyId, alg, preHashed, msg, sig)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, types.DigitalSignatureAlgorithms, bool, []byte, string) bool); ok {
		r0 = rf(ctx, keyId, alg, preHashed, msg, sig)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, types.DigitalSignatureAlgorithms, bool, []byte, string) error); ok {
		r1 = rf(ctx, keyId, alg, preHashed, msg, sig)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// APIMock_Verify_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Verify'
type APIMock_Verify_Call struct {
	*mock.Call
}

// Verify is a helper method to define mock.On call
//   - ctx context.Context
//   - keyId uuid.UUID
//   - alg types.DigitalSignatureAlgorithms
//   - preHashed bool
//   - msg []byte
//   - sig string
func (_e *APIMock_Expecter) Verify(ctx interface{}, keyId interface{}, alg interface{}, preHashed interface{}, msg interface{}, sig interface{}) *APIMock_Verify_Call {
	return &APIMock_Verify_Call{Call: _e.mock.On("Verify", ctx, keyId, alg, preHashed, msg, sig)}
}

func (_c *APIMock_Verify_Call) Run(run func(ctx context.Context, keyId uuid.UUID, alg types.DigitalSignatureAlgorithms, preHashed bool, msg []byte, sig string)) *APIMock_Verify_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(types.DigitalSignatureAlgorithms), args[3].(bool), args[4].([]byte), args[5].(string))
	})
	return _c
}

func (_c *APIMock_Verify_Call) Return(_a0 bool, _a1 error) *APIMock_Verify_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *APIMock_Verify_Call) RunAndReturn(run func(context.Context, uuid.UUID, types.DigitalSignatureAlgorithms, bool, []byte, string) (bool, error)) *APIMock_Verify_Call {
	_c.Call.Return(run)
	return _c
}

// NewAPIMock creates a new instance of APIMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAPIMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *APIMock {
	mock := &APIMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
