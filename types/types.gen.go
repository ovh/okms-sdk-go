// Package types provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package types

import (
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for CryptographicUsages.
const (
	Decrypt   CryptographicUsages = "decrypt"
	Encrypt   CryptographicUsages = "encrypt"
	Sign      CryptographicUsages = "sign"
	UnwrapKey CryptographicUsages = "unwrapKey"
	Verify    CryptographicUsages = "verify"
	WrapKey   CryptographicUsages = "wrapKey"
)

// Defines values for Curves.
const (
	P256 Curves = "P-256"
	P384 Curves = "P-384"
	P521 Curves = "P-521"
)

// Defines values for DigitalSignatureAlgorithms.
const (
	ES256 DigitalSignatureAlgorithms = "ES256"
	ES384 DigitalSignatureAlgorithms = "ES384"
	ES512 DigitalSignatureAlgorithms = "ES512"
	PS256 DigitalSignatureAlgorithms = "PS256"
	PS384 DigitalSignatureAlgorithms = "PS384"
	PS512 DigitalSignatureAlgorithms = "PS512"
	RS256 DigitalSignatureAlgorithms = "RS256"
	RS384 DigitalSignatureAlgorithms = "RS384"
	RS512 DigitalSignatureAlgorithms = "RS512"
)

// Defines values for JwkUses.
const (
	Enc JwkUses = "enc"
	Sig JwkUses = "sig"
)

// Defines values for KeyFormats.
const (
	Jwk KeyFormats = "jwk"
)

// Defines values for KeySizes.
const (
	N128  KeySizes = 128
	N192  KeySizes = 192
	N2048 KeySizes = 2048
	N256  KeySizes = 256
	N3072 KeySizes = 3072
	N4096 KeySizes = 4096
)

// Defines values for KeyStates.
const (
	Active               KeyStates = "active"
	All                  KeyStates = "all"
	Compromised          KeyStates = "compromised"
	Deactivated          KeyStates = "deactivated"
	Destroyed            KeyStates = "destroyed"
	DestroyedCompromised KeyStates = "destroyed_compromised"
	PreActive            KeyStates = "pre_active"
)

// Defines values for KeyTypes.
const (
	EC  KeyTypes = "EC"
	Oct KeyTypes = "oct"
	RSA KeyTypes = "RSA"
)

// Defines values for RevocationReasons.
const (
	AffiliationChanged   RevocationReasons = "affiliation_changed"
	CaCompromise         RevocationReasons = "ca_compromise"
	CessationOfOperation RevocationReasons = "cessation_of_operation"
	KeyCompromise        RevocationReasons = "key_compromise"
	PrivilegeWithdrawn   RevocationReasons = "privilege_withdrawn"
	Superseded           RevocationReasons = "superseded"
	Unspecified          RevocationReasons = "unspecified"
)

// CreateImportServiceKeyRequest Create domain key model
type CreateImportServiceKeyRequest struct {
	// Context Optional key context, utf8 text string
	Context *string `json:"context,omitempty"`
	Curve   *Curves `json:"curve,omitempty"`

	// Keys Json Web Key Set representing keys in request
	Keys *[]JsonWebKey `json:"keys"`

	// Name Key friendly name
	Name string `json:"name"`

	// Operations Operations array specifies key usage
	Operations *[]CryptographicUsages `json:"operations"`
	Size       *KeySizes              `json:"size,omitempty"`
	Type       *KeyTypes              `json:"type,omitempty"`
}

// CryptographicUsages defines model for CryptographicUsages.
type CryptographicUsages string

// Curves defines model for Curves.
type Curves string

// DeactivateServicekeyRequest defines model for DeactivateServicekeyRequest.
type DeactivateServicekeyRequest struct {
	Reason RevocationReasons `json:"reason"`
}

// DecryptDataKeyRequest Request to extract and decrypt data key from protobuffer key metadata message
type DecryptDataKeyRequest struct {
	// Key Encrypted data key blob (base64), output of generate data key operations
	Key string `json:"key"`
}

// DecryptDataKeyResponse Response for data key decrypt operation
type DecryptDataKeyResponse struct {
	// Plaintext Plaintext data key (based64 encoded)
	Plaintext *string `json:"plaintext,omitempty"`
}

// DecryptRequest Decrypt request model
type DecryptRequest struct {
	// Ciphertext Ciphertext for Decrypt operation
	Ciphertext string `json:"ciphertext"`

	// Context Optional additional context to be used for decryption if provided on encryption
	Context *string `json:"context"`
}

// DecryptResponse Decrypt operation response model
type DecryptResponse struct {
	// Plaintext Decrypted ciphertext
	Plaintext string `json:"plaintext"`
}

// DigitalSignatureAlgorithms defines model for DigitalSignatureAlgorithms.
type DigitalSignatureAlgorithms string

// EncryptRequest Decrypt request model
type EncryptRequest struct {
	// Context Optional additional authenticated data
	Context *string `json:"context"`

	// Plaintext Plaintext for encryption
	Plaintext string `json:"plaintext"`
}

// EncryptResponse Encrypt operation response model
type EncryptResponse struct {
	// Ciphertext Result of encrypt operation, ciphertext
	Ciphertext string `json:"ciphertext"`
}

// ErrorResponse API error response
type ErrorResponse struct {
	// ErrorCode Error code
	ErrorCode *int32 `json:"error_code,omitempty"`

	// ErrorId Error id
	ErrorId *string `json:"error_id,omitempty"`

	// Errors List with text error messages associated with ErrorId
	Errors *[]string `json:"errors,omitempty"`
}

// GenerateDataKeyRequest Generate data key shortcut helper
type GenerateDataKeyRequest struct {
	// Name Key name
	Name *string `json:"name"`

	// Size Size of the key to be generated in bits
	Size int32 `json:"size"`
}

// GenerateDataKeyResponse Data key creation model
type GenerateDataKeyResponse struct {
	// Key Data key blob (base64, protobuffer bytes)
	Key string `json:"key"`

	// Plaintext Plaintext key material (based64 encoded)
	Plaintext *string `json:"plaintext,omitempty"`
}

// GetServiceKeyResponse Get service key response
type GetServiceKeyResponse struct {
	// Attributes Additional key metadata
	Attributes *map[string]interface{} `json:"attributes"`
	Curve      *Curves                 `json:"curve,omitempty"`

	// Id Id of the key, UUID
	Id openapi_types.UUID `json:"id"`

	// Keys Json Web Key Set representing keys in request
	Keys *[]JsonWebKey `json:"keys"`

	// Name Key friendly name
	Name string `json:"name"`

	// Operations Key usage array specifies key usage
	Operations *[]CryptographicUsages `json:"operations,omitempty"`
	Size       *KeySizes              `json:"size,omitempty"`
	Type       KeyTypes               `json:"type"`
}

// JsonWebKey Json Web Key model
type JsonWebKey struct {
	Alg *DigitalSignatureAlgorithms `json:"alg,omitempty"`
	Crv *Curves                     `json:"crv,omitempty"`

	// D The "d" parameter of EC key or RSA private exponent
	D *string `json:"d"`

	// Dp "dp" RSA private key parameter (first factor CRT exponent)
	Dp *string `json:"dp"`

	// Dq "dq" RSA private key parameter (second factor CRT exponent)
	Dq *string `json:"dq"`

	// E The "e" (exponent) parameter contains the exponent value for the RSA public key. It is represented as a Base64urlUInt-encoded value.
	// Required for RSA public key
	E *string `json:"e"`

	// K The "k" (key value) parameter contains the value of the symmetric (or other single-valued) key.
	// It is represented as the base64url encoding of the octet sequence containing the key value.
	K *string `json:"k"`

	// KeyOps The "key_ops" (key operations) parameter identifies the operation(s) for which the key is intended to be used.
	KeyOps *[]CryptographicUsages `json:"key_ops"`

	// Kid The "kid" (key ID) parameter is used to match a specific key.
	Kid string   `json:"kid"`
	Kty KeyTypes `json:"kty"`

	// N The "n" (modulus) parameter contains the modulus value for the RSA public key. It is represented as a Base64urlUInt-encoded value.
	// Required for RSA public key
	N *string `json:"n"`

	// P "p" RSA private key parameter (first prime factor)
	P *string `json:"p"`

	// Q "q" RSA private key parameter (second prime factor)
	Q *string `json:"q"`

	// Qi "qi" RSA private key parameter (first CRT coefficient)
	Qi  *string  `json:"qi"`
	Use *JwkUses `json:"use,omitempty"`

	// X The "x" (x coordinate) parameter contains the x coordinate for the Elliptic Curve point.
	// It is represented as the base64url encoding of the octet string representation of the coordinate
	X *string `json:"x"`

	// Y The "y" (y coordinate) parameter contains the y coordinate for the Elliptic Curve point.
	// It is represented as the base64url encoding of the octet string representation of the coordinate
	Y *string `json:"y"`
}

// JwkUses defines model for JwkUses.
type JwkUses string

// KeyFormats defines model for KeyFormats.
type KeyFormats string

// KeySizes defines model for KeySizes.
type KeySizes int

// KeyStates defines model for KeyStates.
type KeyStates string

// KeyTypes defines model for KeyTypes.
type KeyTypes string

// ListServiceKeysResponse List domain keys response
type ListServiceKeysResponse struct {
	// ContinuationToken continuation token if list is not complete
	ContinuationToken *string `json:"continuation_token,omitempty"`

	// IsTruncated Is the list complete
	IsTruncated *bool `json:"is_truncated,omitempty"`

	// ObjectsList List of keys returnede
	ObjectsList *[]GetServiceKeyResponse `json:"objects_list,omitempty"`
}

// PatchServiceKeyRequest Patch domain key model
type PatchServiceKeyRequest struct {
	// Name Key friendly name
	Name string `json:"name"`
}

// RevocationReasons defines model for RevocationReasons.
type RevocationReasons string

// SignRequest Sign request model
type SignRequest struct {
	Alg DigitalSignatureAlgorithms `json:"alg"`

	// Isdigest Is the message already hashed
	Isdigest *bool `json:"isdigest,omitempty"`

	// Message Message to be signed
	Message string `json:"message"`
}

// SignResponse Sign response model
type SignResponse struct {
	// Signature Base64 encoded signature
	Signature *string `json:"signature,omitempty"`
}

// StatusCodes defines model for StatusCodes.
type StatusCodes = map[string]interface{}

// VerifyRequest Verify signature request model
type VerifyRequest struct {
	Alg DigitalSignatureAlgorithms `json:"alg"`

	// Isdigest Is the message already hashed
	Isdigest *bool `json:"isdigest,omitempty"`

	// Message Initial message
	Message string `json:"message"`

	// Signature Base64 encoded signature
	Signature string `json:"signature"`
}

// VerifyResponse Verify response model
type VerifyResponse struct {
	// Result Result of verify operation
	Result *bool `json:"result,omitempty"`
}

// ListServiceKeysParams defines parameters for ListServiceKeys.
type ListServiceKeysParams struct {
	// State Returns objects with specified state
	State *KeyStates `form:"state,omitempty" json:"state,omitempty"`

	// ContinuationToken Continuation token from previous incomplete call
	ContinuationToken *string `form:"continuation-token,omitempty" json:"continuation-token,omitempty"`

	// Max Maximum number of keys returned in one call
	Max *int32 `form:"max,omitempty" json:"max,omitempty"`
}

// CreateImportServiceKeyParams defines parameters for CreateImportServiceKey.
type CreateImportServiceKeyParams struct {
	// Format Formatting options for key representation
	Format *KeyFormats `form:"format,omitempty" json:"format,omitempty"`
}

// GetServiceKeyParams defines parameters for GetServiceKey.
type GetServiceKeyParams struct {
	// Format Formatting options for key representation
	Format *KeyFormats `form:"format,omitempty" json:"format,omitempty"`
}

// CreateImportServiceKeyJSONRequestBody defines body for CreateImportServiceKey for application/json ContentType.
type CreateImportServiceKeyJSONRequestBody = CreateImportServiceKeyRequest

// PatchServiceKeyApplicationWildcardPlusJSONRequestBody defines body for PatchServiceKey for application/*+json ContentType.
type PatchServiceKeyApplicationWildcardPlusJSONRequestBody = PatchServiceKeyRequest

// PatchServiceKeyJSONRequestBody defines body for PatchServiceKey for application/json ContentType.
type PatchServiceKeyJSONRequestBody = PatchServiceKeyRequest

// GenerateDataKeyJSONRequestBody defines body for GenerateDataKey for application/json ContentType.
type GenerateDataKeyJSONRequestBody = GenerateDataKeyRequest

// DecryptDataKeyJSONRequestBody defines body for DecryptDataKey for application/json ContentType.
type DecryptDataKeyJSONRequestBody = DecryptDataKeyRequest

// DeactivateServiceKeyJSONRequestBody defines body for DeactivateServiceKey for application/json ContentType.
type DeactivateServiceKeyJSONRequestBody = DeactivateServicekeyRequest

// DecryptJSONRequestBody defines body for Decrypt for application/json ContentType.
type DecryptJSONRequestBody = DecryptRequest

// EncryptJSONRequestBody defines body for Encrypt for application/json ContentType.
type EncryptJSONRequestBody = EncryptRequest

// SignJSONRequestBody defines body for Sign for application/json ContentType.
type SignJSONRequestBody = SignRequest

// VerifyJSONRequestBody defines body for Verify for application/json ContentType.
type VerifyJSONRequestBody = VerifyRequest
