// Package types provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package types

import (
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	OAuth2ClientCredentialsScopes = "oAuth2ClientCredentials.Scopes"
	PersonalAccessTokenScopes     = "personalAccessToken.Scopes"
)

// Defines values for CryptographicUsages.
const (
	Decrypt   CryptographicUsages = "decrypt"
	Encrypt   CryptographicUsages = "encrypt"
	Sign      CryptographicUsages = "sign"
	UnwrapKey CryptographicUsages = "unwrapKey"
	Verify    CryptographicUsages = "verify"
	WrapKey   CryptographicUsages = "wrapKey"
)

// Defines values for Curves.
const (
	P256 Curves = "P-256"
	P384 Curves = "P-384"
	P521 Curves = "P-521"
)

// Defines values for DigitalSignatureAlgorithms.
const (
	ES256 DigitalSignatureAlgorithms = "ES256"
	ES384 DigitalSignatureAlgorithms = "ES384"
	ES512 DigitalSignatureAlgorithms = "ES512"
	PS256 DigitalSignatureAlgorithms = "PS256"
	PS384 DigitalSignatureAlgorithms = "PS384"
	PS512 DigitalSignatureAlgorithms = "PS512"
	RS256 DigitalSignatureAlgorithms = "RS256"
	RS384 DigitalSignatureAlgorithms = "RS384"
	RS512 DigitalSignatureAlgorithms = "RS512"
)

// Defines values for JwkUses.
const (
	Enc JwkUses = "enc"
	Sig JwkUses = "sig"
)

// Defines values for KeyFormats.
const (
	Jwk KeyFormats = "jwk"
)

// Defines values for KeySizes.
const (
	N128  KeySizes = 128
	N192  KeySizes = 192
	N2048 KeySizes = 2048
	N256  KeySizes = 256
	N3072 KeySizes = 3072
	N4096 KeySizes = 4096
)

// Defines values for KeyStates.
const (
	KeyStatesActive               KeyStates = "active"
	KeyStatesAll                  KeyStates = "all"
	KeyStatesCompromised          KeyStates = "compromised"
	KeyStatesDeactivated          KeyStates = "deactivated"
	KeyStatesDestroyed            KeyStates = "destroyed"
	KeyStatesDestroyedCompromised KeyStates = "destroyed_compromised"
	KeyStatesPreActive            KeyStates = "pre_active"
)

// Defines values for KeyTypes.
const (
	EC  KeyTypes = "EC"
	Oct KeyTypes = "oct"
	RSA KeyTypes = "RSA"
)

// Defines values for RevocationReasons.
const (
	AffiliationChanged   RevocationReasons = "affiliation_changed"
	CaCompromise         RevocationReasons = "ca_compromise"
	CessationOfOperation RevocationReasons = "cessation_of_operation"
	KeyCompromise        RevocationReasons = "key_compromise"
	PrivilegeWithdrawn   RevocationReasons = "privilege_withdrawn"
	Superseded           RevocationReasons = "superseded"
	Unspecified          RevocationReasons = "unspecified"
)

// Defines values for SecretV2State.
const (
	SecretV2StateActive      SecretV2State = "active"
	SecretV2StateDeactivated SecretV2State = "deactivated"
	SecretV2StateDeleted     SecretV2State = "deleted"
)

// Defines values for SignatureFormats.
const (
	Jws SignatureFormats = "jws"
	Jwt SignatureFormats = "jwt"
	Raw SignatureFormats = "raw"
)

// CreateImportServiceKeyRequest Create domain key model
type CreateImportServiceKeyRequest struct {
	// Context Optional key context, utf8 text string
	Context *string `json:"context,omitempty"`
	Curve   *Curves `json:"curve,omitempty"`

	// Keys Json Web Key Set representing keys in request
	Keys *[]JsonWebKeyRequest `json:"keys"`

	// Name Key friendly name
	Name string `json:"name"`

	// Operations Operations array specifies key usage
	Operations *[]CryptographicUsages `json:"operations"`
	Size       *KeySizes              `json:"size,omitempty"`
	Type       *KeyTypes              `json:"type,omitempty"`
}

// CryptographicUsages defines model for CryptographicUsages.
type CryptographicUsages string

// Curves defines model for Curves.
type Curves string

// DeactivateServicekeyRequest Request to deactivate a service key
type DeactivateServicekeyRequest struct {
	Reason RevocationReasons `json:"reason"`
}

// DecryptDataKeyRequest Request to extract and decrypt data key from protobuffer key metadata message
type DecryptDataKeyRequest struct {
	// Key Encrypted data key blob, output of generate data key operations
	Key string `json:"key"`
}

// DecryptDataKeyResponse Response for data key decrypt operation
type DecryptDataKeyResponse struct {
	// Plaintext Plaintext data key (base64 encoded bytes)
	Plaintext []byte `json:"plaintext"`
}

// DecryptRequest Decrypt request model
type DecryptRequest struct {
	// Ciphertext Ciphertext for Decrypt operation
	Ciphertext string `json:"ciphertext"`

	// Context Optional additional context to be used for decryption if provided on encryption
	Context *string `json:"context"`
}

// DecryptResponse Decrypt operation response model
type DecryptResponse struct {
	// Plaintext Decrypted ciphertext
	Plaintext []byte `json:"plaintext"`
}

// DigitalSignatureAlgorithms defines model for DigitalSignatureAlgorithms.
type DigitalSignatureAlgorithms string

// EncryptRequest Encrypt request model
type EncryptRequest struct {
	// Context Optional additional authenticated data
	Context *string `json:"context"`

	// Plaintext Plaintext for encryption
	Plaintext []byte `json:"plaintext"`
}

// EncryptResponse Encrypt operation response model
type EncryptResponse struct {
	// Ciphertext Result of encrypt operation, ciphertext
	Ciphertext string `json:"ciphertext"`
}

// ErrorResponse API error response
type ErrorResponse struct {
	// ErrorCode Error code
	ErrorCode *int32 `json:"error_code,omitempty"`

	// ErrorId Error id
	ErrorId *string `json:"error_id,omitempty"`

	// Errors List with text error messages associated with ErrorId
	Errors *[]string `json:"errors,omitempty"`

	// RequestId Request id
	RequestId *string `json:"request_id,omitempty"`
}

// GenerateDataKeyRequest Generate data key shortcut helper
type GenerateDataKeyRequest struct {
	// Name Key name
	Name *string `json:"name"`

	// Size Size of the key to be generated in bits
	Size int32 `json:"size"`
}

// GenerateDataKeyResponse Data key creation model
type GenerateDataKeyResponse struct {
	// Key Data key blob (JWE token)
	Key string `json:"key"`

	// Plaintext Plaintext key material (based64 encoded bytes)
	Plaintext *[]byte `json:"plaintext,omitempty"`
}

// GetConfigResponse Get engine configuration
type GetConfigResponse struct {
	// Data Default settings for Secret API backend service
	Data      *PostConfigRequest `json:"data,omitempty"`
	RequestId *string            `json:"request_id"`
}

// GetErrorResponseWithMetadata defines model for GetErrorResponseWithMetadata.
type GetErrorResponseWithMetadata struct {
	// Data Secret content model
	Data *SecretData `json:"data,omitempty"`

	// ErrorCode Error code
	ErrorCode *int32 `json:"error_code,omitempty"`

	// ErrorId Error id
	ErrorId *string `json:"error_id,omitempty"`

	// Errors List with text error messages associated with ErrorId
	Errors *[]string `json:"errors,omitempty"`

	// RequestId Request id
	RequestId *string `json:"request_id,omitempty"`
}

// GetMetadataResponse Get secret metadata values or list of keys
type GetMetadataResponse struct {
	// Data Secret metadata or list of keys
	Data      *SecretMetadata `json:"data,omitempty"`
	RequestId *string         `json:"request_id"`
}

// GetSecretConfigV2Response defines model for GetSecretConfigV2Response.
type GetSecretConfigV2Response struct {
	// CasRequired The “Cas” parameter will be required for each write call if set to true. When the “cas” (Check and set) is specified, the current version of the secret is verified before updating it.
	CasRequired *bool `json:"cas_required,omitempty"`

	// DeactivateVersionAfter The length of time before a version is deleted
	DeactivateVersionAfter *string `json:"deactivate_version_after"`

	// MaxVersions The number of versions to keep (10 default)
	MaxVersions *uint32 `json:"max_versions"`
}

// GetSecretResponse Response to get secret operation
type GetSecretResponse struct {
	// Data Secret content model
	Data      *SecretData `json:"data,omitempty"`
	RequestId *string     `json:"request_id"`
}

// GetSecretSubkeysResponse Get subkeys of the secret
type GetSecretSubkeysResponse struct {
	// Data Subkey model
	Data      *SecretDataSubkeys `json:"data,omitempty"`
	RequestId *string            `json:"request_id"`
}

// GetSecretV2Response defines model for GetSecretV2Response.
type GetSecretV2Response struct {
	Metadata *SecretV2Metadata `json:"metadata,omitempty"`

	// Path Secret identifier
	Path    *string          `json:"path,omitempty"`
	Version *SecretV2Version `json:"version,omitempty"`
}

// GetServiceKeyResponse Get service key response
type GetServiceKeyResponse struct {
	// Attributes Additional key metadata
	Attributes *map[string]interface{} `json:"attributes"`
	Curve      *Curves                 `json:"curve,omitempty"`

	// Id Id of the key, UUID
	Id openapi_types.UUID `json:"id"`

	// Keys Json Web Key Set representing keys in request
	Keys *[]JsonWebKeyResponse `json:"keys"`

	// Name Key friendly name
	Name string `json:"name"`

	// Operations Key usage array specifies key usage
	Operations *[]CryptographicUsages `json:"operations,omitempty"`
	Size       *KeySizes              `json:"size,omitempty"`
	Type       KeyTypes               `json:"type"`
}

// JsonWebKeyRequest defines model for JsonWebKeyRequest.
type JsonWebKeyRequest struct {
	Alg *DigitalSignatureAlgorithms `json:"alg,omitempty"`
	Crv *Curves                     `json:"crv,omitempty"`

	// D The "d" parameter of EC key or RSA private exponent
	D *string `json:"d"`

	// Dp "dp" RSA private key parameter (first factor CRT exponent)
	Dp *string `json:"dp"`

	// Dq "dq" RSA private key parameter (second factor CRT exponent)
	Dq *string `json:"dq"`

	// E The "e" (exponent) parameter contains the exponent value for the RSA public key. It is represented as a Base64urlUInt-encoded value.
	// Required for RSA public key
	E *string `json:"e"`

	// K The "k" (key value) parameter contains the value of the symmetric (or other single-valued) key.
	// It is represented as the base64url encoding of the octet sequence containing the key value.
	K *string `json:"k"`

	// KeyOps The "key_ops" (key operations) parameter identifies the operation(s) for which the key is intended to be used.
	KeyOps *[]CryptographicUsages `json:"key_ops"`

	// Kid The "kid" (key ID) parameter is used to match a specific key.
	Kid *string  `json:"kid"`
	Kty KeyTypes `json:"kty"`

	// N The "n" (modulus) parameter contains the modulus value for the RSA public key. It is represented as a Base64urlUInt-encoded value.
	// Required for RSA public key
	N *string `json:"n"`

	// P "p" RSA private key parameter (first prime factor)
	P *string `json:"p"`

	// Q "q" RSA private key parameter (second prime factor)
	Q *string `json:"q"`

	// Qi "qi" RSA private key parameter (first CRT coefficient)
	Qi  *string  `json:"qi"`
	Use *JwkUses `json:"use,omitempty"`

	// X The "x" (x coordinate) parameter contains the x coordinate for the Elliptic Curve point.
	// It is represented as the base64url encoding of the octet string representation of the coordinate
	X *string `json:"x"`

	// Y The "y" (y coordinate) parameter contains the y coordinate for the Elliptic Curve point.
	// It is represented as the base64url encoding of the octet string representation of the coordinate
	Y *string `json:"y"`
}

// JsonWebKeyResponse defines model for JsonWebKeyResponse.
type JsonWebKeyResponse struct {
	Alg *DigitalSignatureAlgorithms `json:"alg,omitempty"`
	Crv *Curves                     `json:"crv,omitempty"`

	// D The "d" parameter of EC key or RSA private exponent
	D *string `json:"d"`

	// Dp "dp" RSA private key parameter (first factor CRT exponent)
	Dp *string `json:"dp"`

	// Dq "dq" RSA private key parameter (second factor CRT exponent)
	Dq *string `json:"dq"`

	// E The "e" (exponent) parameter contains the exponent value for the RSA public key. It is represented as a Base64urlUInt-encoded value.
	// Required for RSA public key
	E *string `json:"e"`

	// K The "k" (key value) parameter contains the value of the symmetric (or other single-valued) key.
	// It is represented as the base64url encoding of the octet sequence containing the key value.
	K *string `json:"k"`

	// KeyOps The "key_ops" (key operations) parameter identifies the operation(s) for which the key is intended to be used.
	KeyOps *[]CryptographicUsages `json:"key_ops"`

	// Kid The "kid" (key ID) parameter is used to match a specific key.
	Kid string   `json:"kid"`
	Kty KeyTypes `json:"kty"`

	// N The "n" (modulus) parameter contains the modulus value for the RSA public key. It is represented as a Base64urlUInt-encoded value.
	// Required for RSA public key
	N *string `json:"n"`

	// P "p" RSA private key parameter (first prime factor)
	P *string `json:"p"`

	// Q "q" RSA private key parameter (second prime factor)
	Q *string `json:"q"`

	// Qi "qi" RSA private key parameter (first CRT coefficient)
	Qi  *string  `json:"qi"`
	Use *JwkUses `json:"use,omitempty"`

	// X The "x" (x coordinate) parameter contains the x coordinate for the Elliptic Curve point.
	// It is represented as the base64url encoding of the octet string representation of the coordinate
	X *string `json:"x"`

	// Y The "y" (y coordinate) parameter contains the y coordinate for the Elliptic Curve point.
	// It is represented as the base64url encoding of the octet string representation of the coordinate
	Y *string `json:"y"`
}

// JwkUses defines model for JwkUses.
type JwkUses string

// KeyFormats defines model for KeyFormats.
type KeyFormats string

// KeySizes defines model for KeySizes.
type KeySizes int

// KeyStates defines model for KeyStates.
type KeyStates string

// KeyTypes defines model for KeyTypes.
type KeyTypes string

// ListSecretV2Response List of secrets
type ListSecretV2Response = []GetSecretV2Response

// ListSecretVersionV2Response defines model for ListSecretVersionV2Response.
type ListSecretVersionV2Response = []SecretV2Version

// ListServiceKeysResponse List domain keys response
type ListServiceKeysResponse struct {
	// ContinuationToken continuation token if list is not complete
	ContinuationToken string `json:"continuation_token"`

	// IsTruncated Is the list complete
	IsTruncated bool `json:"is_truncated"`

	// ObjectsList List of keys returned
	ObjectsList []GetServiceKeyResponse `json:"objects_list"`
}

// PatchErrorResponseWithMetadata defines model for PatchErrorResponseWithMetadata.
type PatchErrorResponseWithMetadata struct {
	// Data Secret version specific metadata fields
	Data *SecretVersionMetadata `json:"data,omitempty"`

	// ErrorCode Error code
	ErrorCode *int32 `json:"error_code,omitempty"`

	// ErrorId Error id
	ErrorId *string `json:"error_id,omitempty"`

	// Errors List with text error messages associated with ErrorId
	Errors *[]string `json:"errors,omitempty"`

	// RequestId Request id
	RequestId *string `json:"request_id,omitempty"`
}

// PatchSecretResponse Patch secret operation response
type PatchSecretResponse struct {
	// Data Secret version specific metadata fields
	Data      *SecretVersionMetadata `json:"data,omitempty"`
	RequestId *string                `json:"request_id"`
}

// PatchServiceKeyRequest Patch domain key model
type PatchServiceKeyRequest struct {
	// Name Key friendly name
	Name string `json:"name"`
}

// PostConfigRequest Default settings for Secret API backend service
type PostConfigRequest struct {
	// CasRequired The “Cas” parameter will be required for each write call if set to true. When the “cas” (Check and set) is specified, the current version of the secret is verified before updating it.
	CasRequired *bool `json:"cas_required"`

	// DeleteVersionAfter The length of time before a version is deleted
	DeleteVersionAfter *string `json:"delete_version_after"`

	// MaxVersions The number of versions to keep (10 default)
	MaxVersions *uint32 `json:"max_versions"`
}

// PostSecretOptions Secret request options
type PostSecretOptions struct {
	// Cas Version of the current secret
	Cas *uint32 `json:"cas"`
}

// PostSecretRequest Secret request model
type PostSecretRequest struct {
	// Data The secret data map to store
	Data interface{} `json:"data"`

	// Options Secret request options
	Options *PostSecretOptions `json:"options,omitempty"`
}

// PostSecretResponse Post secret operation response
type PostSecretResponse struct {
	// Data Secret version specific metadata fields
	Data      *SecretVersionMetadata `json:"data,omitempty"`
	RequestId *string                `json:"request_id"`
}

// PostSecretV2Request defines model for PostSecretV2Request.
type PostSecretV2Request struct {
	Metadata *SecretV2MetadataShort `json:"metadata,omitempty"`

	// Path Secret identifier
	Path string `json:"path"`

	// Version Data of the secret version
	Version SecretV2VersionShort `json:"version"`
}

// PostSecretV2Response defines model for PostSecretV2Response.
type PostSecretV2Response struct {
	Metadata *SecretV2Metadata `json:"metadata,omitempty"`

	// Path Secret identifier
	Path *string `json:"path,omitempty"`
}

// PostSecretVersionV2Request defines model for PostSecretVersionV2Request.
type PostSecretVersionV2Request struct {
	// Data The secret data map to store
	Data *map[string]interface{} `json:"data"`
}

// PutSecretConfigV2Request defines model for PutSecretConfigV2Request.
type PutSecretConfigV2Request struct {
	// CasRequired “Cas” parameter will be required for each write call if set to true. When the “cas” (Check and set) is specified, the current version of the secret is verified before updating it.
	CasRequired *bool `json:"cas_required"`

	// DeactivateVersionAfter The length of time before a version is deleted
	DeactivateVersionAfter *string `json:"deactivate_version_after"`

	// MaxVersions The number of versions to keep (10 default)
	MaxVersions *uint32 `json:"max_versions"`
}

// PutSecretConfigV2Response defines model for PutSecretConfigV2Response.
type PutSecretConfigV2Response struct {
	// CasRequired “Cas” parameter will be required for each write call if set to true. When the “cas” (Check and set) is specified, the current version of the secret is verified before updating it.
	CasRequired *bool `json:"cas_required,omitempty"`

	// DeactivateVersionAfter The length of time before a version is deleted
	DeactivateVersionAfter *string `json:"deactivate_version_after"`

	// MaxVersions The number of versions to keep (10 default)
	MaxVersions *uint32 `json:"max_versions"`
}

// PutSecretV2Request defines model for PutSecretV2Request.
type PutSecretV2Request struct {
	Metadata *SecretV2MetadataShort `json:"metadata,omitempty"`

	// Version Data of the secret version
	Version *SecretV2VersionShort `json:"version,omitempty"`
}

// PutSecretV2Response defines model for PutSecretV2Response.
type PutSecretV2Response struct {
	Metadata *SecretV2Metadata `json:"metadata,omitempty"`

	// Path Secret identifier
	Path *string `json:"path,omitempty"`
}

// PutSecretVersionV2Request defines model for PutSecretVersionV2Request.
type PutSecretVersionV2Request struct {
	// State State of the secret version
	State SecretV2State `json:"state"`
}

// RevocationReasons defines model for RevocationReasons.
type RevocationReasons string

// SecretData Secret content model
type SecretData struct {
	// Data Data field
	Data interface{} `json:"data"`

	// Metadata Secret version specific metadata fields
	Metadata *SecretVersionMetadata `json:"metadata,omitempty"`
}

// SecretDataSubkeys Subkey model
type SecretDataSubkeys struct {
	// Metadata Secret version specific metadata fields
	Metadata *SecretVersionMetadata `json:"metadata,omitempty"`

	// Subkeys Subkey element
	Subkeys interface{} `json:"subkeys"`
}

// SecretMetadata Secret metadata or list of keys
type SecretMetadata struct {
	// CasRequired The “Cas” parameter will be required for each write call if set to true. When the “cas” (Check and set) is specified, the current version of the secret is verified before updating it.
	CasRequired *bool `json:"cas_required"`

	// CreatedTime Time of creation of the secret version
	CreatedTime *string `json:"created_time"`

	// CurrentVersion Current version number of the secret
	CurrentVersion *uint32 `json:"current_version"`

	// CustomMetadata Custom metadata attached to the secret
	CustomMetadata *map[string]string `json:"custom_metadata"`

	// DeleteVersionAfter The length of time before a version is deleted
	DeleteVersionAfter *string `json:"delete_version_after"`

	// Keys Keys of the element stored in the secret
	Keys *[]string `json:"keys"`

	// MaxVersions The number of versions to keep
	MaxVersions *uint32 `json:"max_versions"`

	// OldestVersion Oldest version kept of the secret
	OldestVersion *uint32 `json:"oldest_version"`

	// UpdatedTime Time fof the last update of the secret
	UpdatedTime *string `json:"updated_time"`

	// Versions List of versions of the secret
	Versions *map[string]SecretVersionMetadataShort `json:"versions"`
}

// SecretUpdatableMetadata Model of payload to update metadata
type SecretUpdatableMetadata struct {
	// CasRequired The “Cas” parameter will be required for each write call if set to true. When the “cas” (Check and set) is specified, the current version of the secret is verified before updating it.
	CasRequired *bool `json:"cas_required"`

	// CustomMetadata Custom metadata attached to the secret
	CustomMetadata *map[string]string `json:"custom_metadata"`

	// DeleteVersionAfter The length of time before a version is deleted
	DeleteVersionAfter *string `json:"delete_version_after"`

	// MaxVersions description: The number of versions to keep
	MaxVersions *uint32 `json:"max_versions"`
}

// SecretV2CustomMetadata defines model for SecretV2CustomMetadata.
type SecretV2CustomMetadata map[string]string

// SecretV2Metadata defines model for SecretV2Metadata.
type SecretV2Metadata struct {
	// CasRequired The cas parameter will be required for all write requests if set to true
	CasRequired *bool `json:"cas_required"`

	// CreatedAt Time of creation of the secret version
	CreatedAt *string `json:"created_at"`

	// CurrentVersion The secret version.
	CurrentVersion *uint32                 `json:"current_version,omitempty"`
	CustomMetadata *SecretV2CustomMetadata `json:"custom_metadata,omitempty"`

	// DeactivateVersionAfter Time duration before a version is deactivated
	DeactivateVersionAfter *string `json:"deactivate_version_after"`

	// MaxVersions The number of versions to keep (10 default)
	MaxVersions *uint32 `json:"max_versions"`

	// OldestVersion The secret oldest version
	OldestVersion *uint32 `json:"oldest_version,omitempty"`

	// UpdatedAt Time of the last update of the secret
	UpdatedAt *string `json:"updated_at"`
}

// SecretV2MetadataShort defines model for SecretV2MetadataShort.
type SecretV2MetadataShort struct {
	// CasRequired The “Cas” parameter will be required for each write call if set to true. When the “cas” (Check and set) is specified, the current version of the secret is verified before updating it.
	CasRequired    *bool                   `json:"cas_required"`
	CustomMetadata *SecretV2CustomMetadata `json:"custom_metadata,omitempty"`

	// DeactivateVersionAfter Time duration before a version is deactivated
	DeactivateVersionAfter *string `json:"deactivate_version_after"`

	// MaxVersions The number of versions to keep (10 default)
	MaxVersions *uint32 `json:"max_versions"`
}

// SecretV2State State of the secret version
type SecretV2State string

// SecretV2Version defines model for SecretV2Version.
type SecretV2Version struct {
	// CreatedAt Time of creation of the secret version
	CreatedAt string `json:"created_at"`

	// Data The secret data map to store
	Data *map[string]interface{} `json:"data"`

	// DeactivatedAt Time of deactivation of the secret version
	DeactivatedAt *string `json:"deactivated_at"`

	// Id Secret version
	Id uint32 `json:"id"`

	// State State of the secret version
	State SecretV2State `json:"state"`
}

// SecretV2VersionShort Data of the secret version
type SecretV2VersionShort struct {
	// Data The secret data map to store
	Data *map[string]interface{} `json:"data"`
}

// SecretVersionMetadata Secret version specific metadata fields
type SecretVersionMetadata struct {
	// CreatedTime Time of creation of the secret version
	CreatedTime *string `json:"created_time"`

	// CustomMetadata Custom metadata attached to the secret
	CustomMetadata *map[string]string `json:"custom_metadata"`

	// DeletionTime Time of deletion of the secret version
	DeletionTime *string `json:"deletion_time"`

	// Destroyed Is the secret destroyed
	Destroyed *bool `json:"destroyed"`

	// Version Version number of the secret
	Version *uint32 `json:"version"`
}

// SecretVersionMetadataShort Secret version specific metadata fields short model
type SecretVersionMetadataShort struct {
	// CreatedTime Time of creation of the secret version
	CreatedTime *string `json:"created_time"`

	// DeletionTime Time of deletion of the secret version
	DeletionTime *string `json:"deletion_time"`

	// Destroyed Is the secret version destroyed
	Destroyed *bool `json:"destroyed,omitempty"`
}

// SecretVersionsRequest List of secrets in scope of operation
type SecretVersionsRequest struct {
	// Versions The versions to be soft deleted
	Versions []uint32 `json:"versions"`
}

// SignRequest Sign request model
type SignRequest struct {
	Alg DigitalSignatureAlgorithms `json:"alg"`

	// Isdigest Is the message already hashed
	Isdigest *bool `json:"isdigest,omitempty"`

	// Message Message to be signed
	Message []byte `json:"message"`
}

// SignResponse Sign response model
type SignResponse struct {
	// Signature Signature data
	Signature string `json:"signature"`
}

// SignatureFormats Formats for digital signature result.
type SignatureFormats string

// VerifyRequest Verify signature request model
type VerifyRequest struct {
	Alg *DigitalSignatureAlgorithms `json:"alg,omitempty"`

	// Isdigest Is the message already hashed
	Isdigest *bool `json:"isdigest,omitempty"`

	// Message Signed message to be verified
	Message *[]byte `json:"message"`

	// Signature String token containing signature for verification
	Signature string `json:"signature"`
}

// VerifyResponse Verify response model
type VerifyResponse struct {
	// Result Result of verify operation
	Result bool `json:"result"`
}

// OkmsId defines model for okmsId.
type OkmsId = openapi_types.UUID

// PaginationCursor defines model for paginationCursor.
type PaginationCursor = string

// PaginationSize defines model for paginationSize.
type PaginationSize = uint32

// SecretPath defines model for secretPath.
type SecretPath = string

// ServicekeyPath defines model for servicekeyPath.
type ServicekeyPath = openapi_types.UUID

// GetSecretRequestParams defines parameters for GetSecretRequest.
type GetSecretRequestParams struct {
	// Version Version of the secret requested
	Version *uint32 `form:"version,omitempty" json:"version,omitempty"`
}

// GetSecretsMetadataParams defines parameters for GetSecretsMetadata.
type GetSecretsMetadataParams struct {
	// List Return a list of secrets instead of metadata if set to true
	List *bool `form:"list,omitempty" json:"list,omitempty"`

	// XPaginationSize Maximum number of results returned in one call.
	XPaginationSize *PaginationSize `json:"X-Pagination-Size,omitempty"`

	// XPaginationCursor Page cursor to use as offset.
	XPaginationCursor *PaginationCursor `json:"X-Pagination-Cursor,omitempty"`
}

// GetSecretSubkeysParams defines parameters for GetSecretSubkeys.
type GetSecretSubkeysParams struct {
	// Depth Location of the secret
	Depth *uint32 `form:"depth,omitempty" json:"depth,omitempty"`

	// Version Version of the secret requested
	Version *uint32 `form:"version,omitempty" json:"version,omitempty"`
}

// ListServiceKeysParams defines parameters for ListServiceKeys.
type ListServiceKeysParams struct {
	// State Returns objects with specified state.
	State *KeyStates `form:"state,omitempty" json:"state,omitempty"`

	// ContinuationToken Continuation token from previous incomplete call.
	ContinuationToken *string `form:"continuation-token,omitempty" json:"continuation-token,omitempty"`

	// Max Maximum number of keys returned in one call.
	Max *uint32 `form:"max,omitempty" json:"max,omitempty"`
}

// CreateImportServiceKeyParams defines parameters for CreateImportServiceKey.
type CreateImportServiceKeyParams struct {
	// Format Formatting options for key representation.
	Format *KeyFormats `form:"format,omitempty" json:"format,omitempty"`
}

// GetServiceKeyParams defines parameters for GetServiceKey.
type GetServiceKeyParams struct {
	// Format Formatting options for key representation.
	Format *KeyFormats `form:"format,omitempty" json:"format,omitempty"`
}

// SignParams defines parameters for Sign.
type SignParams struct {
	// Format Signature format.
	Format *SignatureFormats `form:"format,omitempty" json:"format,omitempty"`
}

// ListSecretV2Params defines parameters for ListSecretV2.
type ListSecretV2Params struct {
	// XPaginationSize Maximum number of results returned in one call.
	XPaginationSize *PaginationSize `json:"X-Pagination-Size,omitempty"`

	// XPaginationCursor Page cursor to use as offset.
	XPaginationCursor *PaginationCursor `json:"X-Pagination-Cursor,omitempty"`
}

// GetSecretV2Params defines parameters for GetSecretV2.
type GetSecretV2Params struct {
	// Version Secret version. If not set, the latest version will be returned.
	Version *uint32 `form:"version,omitempty" json:"version,omitempty"`

	// IncludeData Secret data.
	IncludeData *bool `form:"includeData,omitempty" json:"includeData,omitempty"`
}

// PutSecretV2Params defines parameters for PutSecretV2.
type PutSecretV2Params struct {
	// Cas Current secret version number. When the “cas” (Check and set) is specified, the current version of the secret is verified before updating it. In order for a write to be successful,“cas” must be set to the current version of the secret.
	Cas *uint32 `form:"cas,omitempty" json:"cas,omitempty"`
}

// ListSecretVersionV2Params defines parameters for ListSecretVersionV2.
type ListSecretVersionV2Params struct {
	// XPaginationSize Maximum number of results returned in one call.
	XPaginationSize *PaginationSize `json:"X-Pagination-Size,omitempty"`

	// XPaginationCursor Page cursor to use as offset.
	XPaginationCursor *PaginationCursor `json:"X-Pagination-Cursor,omitempty"`
}

// PostSecretVersionV2Params defines parameters for PostSecretVersionV2.
type PostSecretVersionV2Params struct {
	// Cas Current secret version number. When the “cas” (Check and set) is specified, the current version of the secret is verified before updating it. In order for a write to be successful,“cas” must be set to the current version of the secret.
	Cas *uint32 `form:"cas,omitempty" json:"cas,omitempty"`
}

// GetSecretVersionV2Params defines parameters for GetSecretVersionV2.
type GetSecretVersionV2Params struct {
	// IncludeData Secret data.
	IncludeData *bool `form:"includeData,omitempty" json:"includeData,omitempty"`
}

// PostSecretConfigJSONRequestBody defines body for PostSecretConfig for application/json ContentType.
type PostSecretConfigJSONRequestBody = PostConfigRequest

// PatchSecretRequestJSONRequestBody defines body for PatchSecretRequest for application/json ContentType.
type PatchSecretRequestJSONRequestBody = PostSecretRequest

// PatchSecretRequestApplicationMergePatchPlusJSONRequestBody defines body for PatchSecretRequest for application/merge-patch+json ContentType.
type PatchSecretRequestApplicationMergePatchPlusJSONRequestBody = PostSecretRequest

// PostSecretRequestJSONRequestBody defines body for PostSecretRequest for application/json ContentType.
type PostSecretRequestJSONRequestBody = PostSecretRequest

// DeleteSecretVersionsJSONRequestBody defines body for DeleteSecretVersions for application/json ContentType.
type DeleteSecretVersionsJSONRequestBody = SecretVersionsRequest

// PutSecretDestroyJSONRequestBody defines body for PutSecretDestroy for application/json ContentType.
type PutSecretDestroyJSONRequestBody = SecretVersionsRequest

// PatchSecretMetadataJSONRequestBody defines body for PatchSecretMetadata for application/json ContentType.
type PatchSecretMetadataJSONRequestBody = SecretUpdatableMetadata

// PatchSecretMetadataApplicationMergePatchPlusJSONRequestBody defines body for PatchSecretMetadata for application/merge-patch+json ContentType.
type PatchSecretMetadataApplicationMergePatchPlusJSONRequestBody = SecretUpdatableMetadata

// PostSecretMetadataJSONRequestBody defines body for PostSecretMetadata for application/json ContentType.
type PostSecretMetadataJSONRequestBody = SecretUpdatableMetadata

// PostSecretUndeleteJSONRequestBody defines body for PostSecretUndelete for application/json ContentType.
type PostSecretUndeleteJSONRequestBody = SecretVersionsRequest

// CreateImportServiceKeyJSONRequestBody defines body for CreateImportServiceKey for application/json ContentType.
type CreateImportServiceKeyJSONRequestBody = CreateImportServiceKeyRequest

// PatchServiceKeyApplicationWildcardPlusJSONRequestBody defines body for PatchServiceKey for application/*+json ContentType.
type PatchServiceKeyApplicationWildcardPlusJSONRequestBody = PatchServiceKeyRequest

// PatchServiceKeyJSONRequestBody defines body for PatchServiceKey for application/json ContentType.
type PatchServiceKeyJSONRequestBody = PatchServiceKeyRequest

// GenerateDataKeyJSONRequestBody defines body for GenerateDataKey for application/json ContentType.
type GenerateDataKeyJSONRequestBody = GenerateDataKeyRequest

// DecryptDataKeyJSONRequestBody defines body for DecryptDataKey for application/json ContentType.
type DecryptDataKeyJSONRequestBody = DecryptDataKeyRequest

// DeactivateServiceKeyJSONRequestBody defines body for DeactivateServiceKey for application/json ContentType.
type DeactivateServiceKeyJSONRequestBody = DeactivateServicekeyRequest

// DecryptJSONRequestBody defines body for Decrypt for application/json ContentType.
type DecryptJSONRequestBody = DecryptRequest

// EncryptJSONRequestBody defines body for Encrypt for application/json ContentType.
type EncryptJSONRequestBody = EncryptRequest

// SignJSONRequestBody defines body for Sign for application/json ContentType.
type SignJSONRequestBody = SignRequest

// VerifyJSONRequestBody defines body for Verify for application/json ContentType.
type VerifyJSONRequestBody = VerifyRequest

// PostSecretV2JSONRequestBody defines body for PostSecretV2 for application/json ContentType.
type PostSecretV2JSONRequestBody = PostSecretV2Request

// PutSecretV2JSONRequestBody defines body for PutSecretV2 for application/json ContentType.
type PutSecretV2JSONRequestBody = PutSecretV2Request

// PostSecretVersionV2JSONRequestBody defines body for PostSecretVersionV2 for application/json ContentType.
type PostSecretVersionV2JSONRequestBody = PostSecretVersionV2Request

// PutSecretVersionV2JSONRequestBody defines body for PutSecretVersionV2 for application/json ContentType.
type PutSecretVersionV2JSONRequestBody = PutSecretVersionV2Request

// PutSecretConfigV2JSONRequestBody defines body for PutSecretConfigV2 for application/json ContentType.
type PutSecretConfigV2JSONRequestBody = PutSecretConfigV2Request
