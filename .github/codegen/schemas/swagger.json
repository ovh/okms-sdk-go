{
  "openapi": "3.0.1",
  "info": {
    "title": "OVHCloud.KMS.RESTAPI",
    "version": "1.0"
  },
  "paths": {
    "/v1/secret/config": {
      "get": {
        "tags": [
          "SecretsApi"
        ],
        "summary": "Read the backend level settings for the secrets engine",
        "description": "",
        "operationId": "GetSecretConfig",
        "responses": {
          "200": {
            "description": "Settings",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetConfigResponse"
                }
              }
            }
          },
          "400": {
            "description": "Operation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "502": {
            "description": "Ccm error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429": {
            "description": "Rate limit error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "SecretsApi"
        ],
        "summary": "Updates backend level settings",
        "description": "",
        "operationId": "PostSecretConfig",
        "requestBody": {
          "description": "Parameters to change",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostConfigRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Empty response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodes"
                }
              }
            }
          },
          "400": {
            "description": "Bad request error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "502": {
            "description": "Ccm error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429": {
            "description": "Rate limit error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/secret/data/{path}": {
      "post": {
        "tags": [
          "SecretsApi"
        ],
        "summary": "Post secret kv value",
        "description": "",
        "operationId": "PostSecretRequest",
        "parameters": [
          {
            "name": "path",
            "in": "path",
            "description": "Location of the secret.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Secret json data to be created",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostSecretRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Created secret metadata",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostSecretResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "502": {
            "description": "Ccm error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429": {
            "description": "Rate limit error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "SecretsApi"
        ],
        "summary": "Get data from kv secret store",
        "description": "",
        "operationId": "GetSecretRequest",
        "parameters": [
          {
            "name": "path",
            "in": "path",
            "description": "Location of the secret",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "query",
            "description": "Version of the secret requested",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Secret data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetSecretResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429": {
            "description": "Rate limit error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "502": {
            "description": "Ccm error"
          }
        }
      },
      "patch": {
        "tags": [
          "SecretsApi"
        ],
        "summary": "Patch secret kv value",
        "description": "",
        "operationId": "PatchSecretRequest",
        "parameters": [
          {
            "name": "path",
            "in": "path",
            "description": "Location of the secret",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Patch data for the secret",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostSecretRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Secret metadata",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PatchSecretResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "502": {
            "description": "Ccm error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429": {
            "description": "Rate limit error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "SecretsApi"
        ],
        "summary": "Delete data in the kv store",
        "description": "",
        "operationId": "DeleteSecretRequest",
        "parameters": [
          {
            "name": "path",
            "in": "path",
            "description": "Location of the secret to be deleted",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodes"
                }
              }
            }
          },
          "400": {
            "description": "Bad request error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "502": {
            "description": "Ccm error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429": {
            "description": "Rate limit error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/secret/subkeys/{path}": {
      "get": {
        "tags": [
          "SecretsApi"
        ],
        "summary": "Read the keys of a secret data with no values",
        "description": "",
        "operationId": "GetSecretSubkeys",
        "parameters": [
          {
            "name": "path",
            "in": "path",
            "description": "Location of the secret",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "depth",
            "in": "query",
            "description": "Location of the secret",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "version",
            "in": "query",
            "description": "Version of the secret requested",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Secret data keys",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetSecretSubkeysResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "502": {
            "description": "Ccm error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429": {
            "description": "Rate limit error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/secret/delete/{path}": {
      "post": {
        "tags": [
          "SecretsApi"
        ],
        "summary": "Delete several versions in one request",
        "description": "",
        "operationId": "DeleteSecretVersions",
        "parameters": [
          {
            "name": "path",
            "in": "path",
            "description": "Location of the secret to be deleted",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Request payload",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SecretVersionsRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Empty response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodes"
                }
              }
            }
          },
          "400": {
            "description": "Bad request error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "502": {
            "description": "Ccm error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429": {
            "description": "Rate limit error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/secret/undelete/{path}": {
      "post": {
        "tags": [
          "SecretsApi"
        ],
        "summary": "Undeletes one or more secret version",
        "operationId": "PostSecretUndelete",
        "parameters": [
          {
            "name": "path",
            "in": "path",
            "description": "Location of the secret",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Request payload",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SecretVersionsRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Empty response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodes"
                }
              }
            }
          },
          "400": {
            "description": "Bad request error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "502": {
            "description": "Ccm error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429": {
            "description": "Rate limit error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/secret/destroy/{path}": {
      "post": {
        "tags": [
          "SecretsApi"
        ],
        "summary": "Permanently removes one or more secret versions in the kv store",
        "operationId": "PostSecretDestroy",
        "parameters": [
          {
            "name": "path",
            "in": "path",
            "description": "Location of the secret.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Request payload",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SecretVersionsRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Empty response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodes"
                }
              }
            }
          },
          "400": {
            "description": "Bad request error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "502": {
            "description": "Ccm error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429": {
            "description": "Rate limit error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/secret/metadata/{path}": {
      "get": {
        "tags": [
          "SecretsApi"
        ],
        "summary": "List secrets metadata or get secrets list",
        "operationId": "GetSecretsMetadata",
        "parameters": [
          {
            "name": "path",
            "in": "path",
            "description": "Location of the secret",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "list",
            "in": "query",
            "description": "Return a list of secrets instead of metadata if set to true",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of secret at requested level",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetMetadataResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "502": {
            "description": "Ccm error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429": {
            "description": "Rate limit error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "SecretsApi"
        ],
        "summary": "Updates metadata for a secret",
        "operationId": "PostSecretMetadata",
        "parameters": [
          {
            "name": "path",
            "in": "path",
            "description": "Location of the secret",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Request payload",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SecretUpdatableMetadata"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Empty response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodes"
                }
              }
            }
          },
          "400": {
            "description": "Bad request error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "502": {
            "description": "Ccm error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429": {
            "description": "Rate limit error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "SecretsApi"
        ],
        "summary": "Updates metadata for a secret using patch semantics",
        "operationId": "PatchSecretMetadata",
        "parameters": [
          {
            "name": "path",
            "in": "path",
            "description": "Location of the secret",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Request payload",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SecretUpdatableMetadata"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Empty response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodes"
                }
              }
            }
          },
          "400": {
            "description": "Bad request error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "502": {
            "description": "Ccm error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429": {
            "description": "Rate limit error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "SecretsApi"
        ],
        "summary": "Deletes metadata for a secret",
        "operationId": "DeleteSecretMetadata",
        "parameters": [
          {
            "name": "path",
            "in": "path",
            "description": "Location of the secret.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodes"
                }
              }
            }
          },
          "400": {
            "description": "Bad request error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "502": {
            "description": "Ccm error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429": {
            "description": "Rate limit error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/servicekey": {
      "post": {
        "tags": [
          "ServicekeyApi"
        ],
        "summary": "Create or imports customer service key",
        "description": "/v1/servicekey.",
        "operationId": "CreateImportServiceKey",
        "parameters": [
          {
            "name": "format",
            "in": "query",
            "description": "Formatting options for key representation.",
            "schema": {
              "$ref": "#/components/schemas/KeyFormats"
            }
          }
        ],
        "requestBody": {
          "description": "Request payload.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateImportServiceKeyRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Returns id of a key created or imported.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetServiceKeyResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "502": {
            "description": "Ccm error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429": {
            "description": "Rate limit error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "ServicekeyApi"
        ],
        "summary": "List service keys, returns continuation token if result is not complete, returns max 100 values by default",
        "description": "/v1/servicekey.",
        "operationId": "ListServiceKeys",
        "parameters": [
          {
            "name": "state",
            "in": "query",
            "description": "Returns objects with specified state.",
            "schema": {
              "$ref": "#/components/schemas/KeyStates"
            }
          },
          {
            "name": "continuation-token",
            "in": "query",
            "description": "Continuation token from previous incomplete call.",
            "schema": {
              "maxLength": 50,
              "type": "string"
            }
          },
          {
            "name": "max",
            "in": "query",
            "description": "Maximum number of keys returned in one call.",
            "schema": {
              "maximum": 100,
              "minimum": 10,
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of service keys.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListServiceKeysResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "502": {
            "description": "Ccm error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429": {
            "description": "Rate limit error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          }
        }
      }
    },
    "/v1/servicekey/{id}/encrypt": {
      "post": {
        "tags": [
          "ServicekeyApi"
        ],
        "summary": "Encrypts data, up to 4Kb in size, using service key provided",
        "description": "/v1/servicekey/{id}/encrypt.",
        "operationId": "Encrypt",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of a key used for operation.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "Body of a request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EncryptRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Ciphertext produced by encryption.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EncryptResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "502": {
            "description": "Ccm error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429": {
            "description": "Rate limit error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          }
        }
      }
    },
    "/v1/servicekey/{id}/decrypt": {
      "post": {
        "tags": [
          "ServicekeyApi"
        ],
        "summary": "Decrypt data previously encrypted by Encrypt operation",
        "description": "/v1/servicekey/{id}/decrypt.",
        "operationId": "Decrypt",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of a key used for operation.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "Body payload.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DecryptRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Plaintext produced by decryption.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DecryptResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "502": {
            "description": "Bad Gateway",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429": {
            "description": "Rate limit error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          }
        }
      }
    },
    "/v1/servicekey/{id}/datakey": {
      "post": {
        "tags": [
          "ServicekeyApi"
        ],
        "summary": "Generate data key enveloped by servicekey",
        "description": "/v1/servicekey/{id}/datakey.",
        "operationId": "GenerateDataKey",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Service key id used for operation.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "Data key generation request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GenerateDataKeyRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "New data key encrypted blob and plaintext copy.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenerateDataKeyResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "502": {
            "description": "Ccm error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429": {
            "description": "Rate limit error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          }
        }
      }
    },
    "/v1/servicekey/{id}/datakey/decrypt": {
      "post": {
        "tags": [
          "ServicekeyApi"
        ],
        "summary": "Decrypt data key encrypted by service key",
        "description": "/v1/servicekey/{id}/datakey/decrypt.",
        "operationId": "DecryptDataKey",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Service key id used for operation.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "Body payload containing data key blob.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DecryptDataKeyRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Plaintext data key, base64 encoded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DecryptDataKeyResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "502": {
            "description": "Ccm error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429": {
            "description": "Rate limit error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          }
        }
      }
    },
    "/v1/servicekey/{id}/sign": {
      "post": {
        "tags": [
          "ServicekeyApi"
        ],
        "summary": "Sign digest with service key",
        "description": "/v1/servicekey/{id}/sign.",
        "operationId": "Sign",
        "parameters": [
          {
            "name": "format",
            "in": "query",
            "description": "Signature format.",
            "schema": {
              "$ref": "#/components/schemas/SignatureFormats"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Service key id used for operation.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "Body payload containing digest and algorithm spec.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SignRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SignResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "502": {
            "description": "Ccm error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429": {
            "description": "Rate limit error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          }
        }
      }
    },
    "/v1/servicekey/{id}/verify": {
      "post": {
        "tags": [
          "ServicekeyApi"
        ],
        "summary": "Verify signature",
        "description": "/v1/servicekey/{id}/verify.",
        "operationId": "Verify",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VerifyRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VerifyResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "502": {
            "description": "Ccm error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429": {
            "description": "Rate limit error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          }
        }
      }
    },
    "/v1/servicekey/{id}": {
      "delete": {
        "tags": [
          "ServicekeyApi"
        ],
        "summary": "Delete service key",
        "description": "/v1/servicekey/{id}.",
        "operationId": "DeleteServiceKey",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of a service key.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodes"
                }
              }
            }
          },
          "400": {
            "description": "Bad request error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "502": {
            "description": "Ccm error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429": {
            "description": "Rate limit error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "204": {
            "description": "Object is deleted."
          },
          "401": {
            "description": "Unauthorized."
          }
        }
      },
      "get": {
        "tags": [
          "ServicekeyApi"
        ],
        "summary": "Get service key metadata",
        "description": "/v1/servicekey/{id}.",
        "operationId": "GetServiceKey",
        "parameters": [
          {
            "name": "format",
            "in": "query",
            "description": "Formatting options for key representation.",
            "schema": {
              "$ref": "#/components/schemas/KeyFormats"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Id of a service key.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Service key metadata.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetServiceKeyResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "502": {
            "description": "Ccm error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429": {
            "description": "Rate limit error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          }
        }
      },
      "patch": {
        "tags": [
          "ServicekeyApi"
        ],
        "summary": "Patch service key metadata",
        "description": "/v1/servicekey/{id}.",
        "operationId": "PatchServiceKey",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of a service key.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "Request payload.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchServiceKeyRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchServiceKeyRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PatchServiceKeyRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Service key metadata.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetServiceKeyResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "502": {
            "description": "Ccm error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429": {
            "description": "Rate limit error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          }
        }
      }
    },
    "/v1/servicekey/{id}/activate": {
      "post": {
        "tags": [
          "ServicekeyApi"
        ],
        "summary": "Activate service key",
        "description": "/v1/servicekey/{id}/activate.",
        "operationId": "ActivateServiceKey",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of a service key.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodes"
                }
              }
            }
          },
          "400": {
            "description": "Bad request error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "502": {
            "description": "Ccm error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429": {
            "description": "Rate limit error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          }
        }
      }
    },
    "/v1/servicekey/{id}/deactivate": {
      "post": {
        "tags": [
          "ServicekeyApi"
        ],
        "summary": "Deactivate service key",
        "description": "/v1/servicekey/{id}/deactivate.",
        "operationId": "DeactivateServiceKey",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of a service key.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "Request body.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeactivateServicekeyRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCodes"
                }
              }
            }
          },
          "400": {
            "description": "Bad request error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "502": {
            "description": "Ccm error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429": {
            "description": "Rate limit error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          }
        }
      }
    },
    "/v1/random": {
      "get": {
        "tags": [
          "ServicekeyApi"
        ],
        "summary": "Generate random bytes sequence",
        "description": "/v1/random.",
        "operationId": "GenerateRandomBytes",
        "parameters": [
          {
            "name": "length",
            "in": "query",
            "description": "Number of bytes to generate.",
            "schema": {
              "maximum": 4096,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Random bytes sequence.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetRandomResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "502": {
            "description": "Ccm error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429": {
            "description": "Rate limit error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "CreateImportServiceKeyRequest": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "description": "Key friendly name"
          },
          "context": {
            "maxLength": 64,
            "type": "string",
            "description": "Optional key context, utf8 text string"
          },
          "type": {
            "$ref": "#/components/schemas/KeyTypes"
          },
          "size": {
            "$ref": "#/components/schemas/KeySizes"
          },
          "curve": {
            "$ref": "#/components/schemas/Curves"
          },
          "operations": {
            "maxItems": 32,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CryptographicUsages"
            },
            "description": "Operations array specifies key usage",
            "nullable": true
          },
          "keys": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/JsonWebKeyRequest"
            },
            "description": "Json Web Key Set representing keys in request",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Create domain key model"
      },
      "CryptographicUsages": {
        "enum": [
          "sign",
          "verify",
          "encrypt",
          "decrypt",
          "wrapKey",
          "unwrapKey"
        ],
        "type": "string"
      },
      "Curves": {
        "enum": [
          "P-256",
          "P-384",
          "P-521"
        ],
        "type": "string"
      },
      "DeactivateServicekeyRequest": {
        "required": [
          "reason"
        ],
        "type": "object",
        "properties": {
          "reason": {
            "$ref": "#/components/schemas/RevocationReasons"
          }
        },
        "additionalProperties": false,
        "description": ""
      },
      "DecryptDataKeyRequest": {
        "required": [
          "key"
        ],
        "type": "object",
        "properties": {
          "key": {
            "maxLength": 5000,
            "minLength": 1,
            "type": "string",
            "description": "Encrypted data key blob, output of generate data key operations",
            "format": "jwe-token"
          }
        },
        "additionalProperties": false,
        "description": "Request to extract and decrypt data key from protobuffer key metadata message"
      },
      "DecryptDataKeyResponse": {
        "required": [
          "plaintext"
        ],
        "type": "object",
        "properties": {
          "plaintext": {
            "minLength": 1,
            "type": "string",
            "description": "Plaintext data key (base64 encoded bytes)",
            "format": "byte"
          }
        },
        "additionalProperties": false,
        "description": "Response for data key decrypt operation"
      },
      "DecryptRequest": {
        "required": [
          "ciphertext"
        ],
        "type": "object",
        "properties": {
          "ciphertext": {
            "maxLength": 5120,
            "minLength": 1,
            "type": "string",
            "description": "Ciphertext for Decrypt operation",
            "format": "jwe-token"
          },
          "context": {
            "maxLength": 64,
            "type": "string",
            "description": "Optional additional context to be used for decryption if provided on encryption",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Decrypt request model"
      },
      "DecryptResponse": {
        "required": [
          "plaintext"
        ],
        "type": "object",
        "properties": {
          "plaintext": {
            "minLength": 1,
            "type": "string",
            "description": "Decrypted ciphertext",
            "format": "byte"
          }
        },
        "additionalProperties": false,
        "description": "Decrypt operation response model"
      },
      "DigitalSignatureAlgorithms": {
        "enum": [
          "ES256",
          "ES384",
          "ES512",
          "RS256",
          "RS384",
          "RS512",
          "PS256",
          "PS384",
          "PS512"
        ],
        "type": "string"
      },
      "EncryptRequest": {
        "required": [
          "plaintext"
        ],
        "type": "object",
        "properties": {
          "plaintext": {
            "maxLength": 4096,
            "minLength": 1,
            "type": "string",
            "description": "Plaintext for encryption",
            "format": "byte"
          },
          "context": {
            "maxLength": 64,
            "type": "string",
            "description": "Optional additional authenticated data",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Encrypt request model"
      },
      "EncryptResponse": {
        "required": [
          "ciphertext"
        ],
        "type": "object",
        "properties": {
          "ciphertext": {
            "minLength": 1,
            "type": "string",
            "description": "Result of encrypt operation, ciphertext",
            "format": "jwe-token"
          }
        },
        "additionalProperties": false,
        "description": "Encrypt operation response model"
      },
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "error_id": {
            "type": "string",
            "description": "Error id",
            "readOnly": true
          },
          "error_code": {
            "type": "integer",
            "description": "Error code",
            "format": "int32",
            "readOnly": true
          },
          "errors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List with text error messages associated with ErrorId",
            "readOnly": true
          },
          "request_id": {
            "type": "string",
            "description": "Request id",
            "readOnly": true
          }
        },
        "additionalProperties": false,
        "description": "API error response"
      },
      "GenerateDataKeyRequest": {
        "required": [
          "size"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 32,
            "type": "string",
            "description": "Key name",
            "nullable": true
          },
          "size": {
            "maximum": 4096,
            "minimum": 64,
            "type": "integer",
            "description": "Size of the key to be generated in bits",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Generate data key shortcut helper"
      },
      "GenerateDataKeyResponse": {
        "required": [
          "key"
        ],
        "type": "object",
        "properties": {
          "key": {
            "minLength": 1,
            "type": "string",
            "description": "Data key blob (JWE token)",
            "format": "jwe-token"
          },
          "plaintext": {
            "type": "string",
            "description": "Plaintext key material (based64 encoded bytes)",
            "format": "byte"
          }
        },
        "additionalProperties": false,
        "description": "Data key creation model"
      },
      "GetConfigResponse": {
        "type": "object",
        "properties": {
          "request_id": {
            "type": "string",
            "description": "",
            "nullable": true
          },
          "lease_id": {
            "type": "string",
            "description": ""
          },
          "renewable": {
            "type": "boolean",
            "description": ""
          },
          "lease_duration": {
            "type": "integer",
            "description": "",
            "format": "int32"
          },
          "wrap_info": {
            "type": "string",
            "description": "The secret data map",
            "nullable": true
          },
          "warnings": {
            "type": "string",
            "description": "The secret data map",
            "nullable": true
          },
          "auth": {
            "type": "string",
            "description": "The secret data map",
            "nullable": true
          },
          "data": {
            "$ref": "#/components/schemas/PostConfigRequest"
          }
        },
        "additionalProperties": false,
        "description": "Get engine configuration"
      },
      "GetMetadataResponse": {
        "type": "object",
        "properties": {
          "request_id": {
            "type": "string",
            "description": "",
            "nullable": true
          },
          "lease_id": {
            "type": "string",
            "description": ""
          },
          "renewable": {
            "type": "boolean",
            "description": ""
          },
          "lease_duration": {
            "type": "integer",
            "description": "",
            "format": "int32"
          },
          "wrap_info": {
            "type": "string",
            "description": "The secret data map",
            "nullable": true
          },
          "warnings": {
            "type": "string",
            "description": "The secret data map",
            "nullable": true
          },
          "auth": {
            "type": "string",
            "description": "The secret data map",
            "nullable": true
          },
          "data": {
            "$ref": "#/components/schemas/SecretMetadata"
          }
        },
        "additionalProperties": false,
        "description": "Get secret metadata values or list of keys"
      },
      "GetRandomResponse": {
        "required": [
          "bytes"
        ],
        "type": "object",
        "properties": {
          "bytes": {
            "minLength": 1,
            "type": "string",
            "description": "Random bytes string (base64 encoded)",
            "format": "byte"
          }
        },
        "additionalProperties": false,
        "description": "Random bytes response model"
      },
      "GetSecretResponse": {
        "type": "object",
        "properties": {
          "request_id": {
            "type": "string",
            "description": "",
            "nullable": true
          },
          "lease_id": {
            "type": "string",
            "description": ""
          },
          "renewable": {
            "type": "boolean",
            "description": ""
          },
          "lease_duration": {
            "type": "integer",
            "description": "",
            "format": "int32"
          },
          "wrap_info": {
            "type": "string",
            "description": "The secret data map",
            "nullable": true
          },
          "warnings": {
            "type": "string",
            "description": "The secret data map",
            "nullable": true
          },
          "auth": {
            "type": "string",
            "description": "The secret data map",
            "nullable": true
          },
          "data": {
            "$ref": "#/components/schemas/SecretData"
          }
        },
        "additionalProperties": false,
        "description": "Response to get secret operation"
      },
      "GetSecretSubkeysResponse": {
        "type": "object",
        "properties": {
          "request_id": {
            "type": "string",
            "description": "",
            "nullable": true
          },
          "lease_id": {
            "type": "string",
            "description": ""
          },
          "renewable": {
            "type": "boolean",
            "description": ""
          },
          "lease_duration": {
            "type": "integer",
            "description": "",
            "format": "int32"
          },
          "wrap_info": {
            "type": "string",
            "description": "The secret data map",
            "nullable": true
          },
          "warnings": {
            "type": "string",
            "description": "The secret data map",
            "nullable": true
          },
          "auth": {
            "type": "string",
            "description": "The secret data map",
            "nullable": true
          },
          "data": {
            "$ref": "#/components/schemas/SecretDataSubkeys"
          }
        },
        "additionalProperties": false,
        "description": "Get subkeys of the secret"
      },
      "GetServiceKeyResponse": {
        "required": [
          "id",
          "name",
          "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "minLength": 1,
            "type": "string",
            "description": "Id of the key, UUID",
            "format": "uuid"
          },
          "name": {
            "minLength": 1,
            "type": "string",
            "description": "Key friendly name"
          },
          "type": {
            "$ref": "#/components/schemas/KeyTypes"
          },
          "curve": {
            "$ref": "#/components/schemas/Curves"
          },
          "operations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CryptographicUsages"
            },
            "description": "Key usage array specifies key usage"
          },
          "size": {
            "$ref": "#/components/schemas/KeySizes"
          },
          "attributes": {
            "type": "object",
            "additionalProperties": { },
            "description": "Additional key metadata",
            "nullable": true
          },
          "keys": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/JsonWebKeyResponse"
            },
            "description": "Json Web Key Set representing keys in request",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Get service key response"
      },
      "JsonWebKeyRequest": {
        "required": [
          "kty"
        ],
        "type": "object",
        "properties": {
          "use": {
            "$ref": "#/components/schemas/JwkUses"
          },
          "key_ops": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CryptographicUsages"
            },
            "description": "The \"key_ops\" (key operations) parameter identifies the operation(s) for which the key is intended to be used.",
            "nullable": true
          },
          "alg": {
            "$ref": "#/components/schemas/DigitalSignatureAlgorithms"
          },
          "kty": {
            "$ref": "#/components/schemas/KeyTypes"
          },
          "n": {
            "type": "string",
            "description": "The \"n\" (modulus) parameter contains the modulus value for the RSA public key. It is represented as a Base64urlUInt-encoded value.\r\nRequired for RSA public key",
            "format": "base64url",
            "nullable": true
          },
          "e": {
            "type": "string",
            "description": "The \"e\" (exponent) parameter contains the exponent value for the RSA public key. It is represented as a Base64urlUInt-encoded value.\r\nRequired for RSA public key",
            "format": "base64url",
            "nullable": true
          },
          "k": {
            "type": "string",
            "description": "The \"k\" (key value) parameter contains the value of the symmetric (or other single-valued) key.\r\nIt is represented as the base64url encoding of the octet sequence containing the key value.",
            "format": "base64url",
            "nullable": true
          },
          "crv": {
            "$ref": "#/components/schemas/Curves"
          },
          "x": {
            "type": "string",
            "description": "The \"x\" (x coordinate) parameter contains the x coordinate for the Elliptic Curve point.\r\nIt is represented as the base64url encoding of the octet string representation of the coordinate",
            "format": "base64url",
            "nullable": true
          },
          "y": {
            "type": "string",
            "description": "The \"y\" (y coordinate) parameter contains the y coordinate for the Elliptic Curve point.\r\nIt is represented as the base64url encoding of the octet string representation of the coordinate",
            "format": "base64url",
            "nullable": true
          },
          "d": {
            "type": "string",
            "description": "The \"d\" parameter of EC key or RSA private exponent",
            "format": "base64url",
            "nullable": true
          },
          "dp": {
            "type": "string",
            "description": "\"dp\" RSA private key parameter (first factor CRT exponent)",
            "format": "base64url",
            "nullable": true
          },
          "dq": {
            "type": "string",
            "description": "\"dq\" RSA private key parameter (second factor CRT exponent)",
            "format": "base64url",
            "nullable": true
          },
          "p": {
            "type": "string",
            "description": "\"p\" RSA private key parameter (first prime factor)",
            "format": "base64url",
            "nullable": true
          },
          "q": {
            "type": "string",
            "description": "\"q\" RSA private key parameter (second prime factor)",
            "format": "base64url",
            "nullable": true
          },
          "qi": {
            "type": "string",
            "description": "\"qi\" RSA private key parameter (first CRT coefficient)",
            "format": "base64url",
            "nullable": true
          },
          "kid": {
            "type": "string",
            "description": "The \"kid\" (key ID) parameter is used to match a specific key.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "JsonWebKeyResponse": {
        "required": [
          "kid",
          "kty"
        ],
        "type": "object",
        "properties": {
          "use": {
            "$ref": "#/components/schemas/JwkUses"
          },
          "key_ops": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CryptographicUsages"
            },
            "description": "The \"key_ops\" (key operations) parameter identifies the operation(s) for which the key is intended to be used.",
            "nullable": true
          },
          "alg": {
            "$ref": "#/components/schemas/DigitalSignatureAlgorithms"
          },
          "kty": {
            "$ref": "#/components/schemas/KeyTypes"
          },
          "n": {
            "type": "string",
            "description": "The \"n\" (modulus) parameter contains the modulus value for the RSA public key. It is represented as a Base64urlUInt-encoded value.\r\nRequired for RSA public key",
            "format": "base64url",
            "nullable": true
          },
          "e": {
            "type": "string",
            "description": "The \"e\" (exponent) parameter contains the exponent value for the RSA public key. It is represented as a Base64urlUInt-encoded value.\r\nRequired for RSA public key",
            "format": "base64url",
            "nullable": true
          },
          "k": {
            "type": "string",
            "description": "The \"k\" (key value) parameter contains the value of the symmetric (or other single-valued) key.\r\nIt is represented as the base64url encoding of the octet sequence containing the key value.",
            "format": "base64url",
            "nullable": true
          },
          "crv": {
            "$ref": "#/components/schemas/Curves"
          },
          "x": {
            "type": "string",
            "description": "The \"x\" (x coordinate) parameter contains the x coordinate for the Elliptic Curve point.\r\nIt is represented as the base64url encoding of the octet string representation of the coordinate",
            "format": "base64url",
            "nullable": true
          },
          "y": {
            "type": "string",
            "description": "The \"y\" (y coordinate) parameter contains the y coordinate for the Elliptic Curve point.\r\nIt is represented as the base64url encoding of the octet string representation of the coordinate",
            "format": "base64url",
            "nullable": true
          },
          "d": {
            "type": "string",
            "description": "The \"d\" parameter of EC key or RSA private exponent",
            "format": "base64url",
            "nullable": true
          },
          "dp": {
            "type": "string",
            "description": "\"dp\" RSA private key parameter (first factor CRT exponent)",
            "format": "base64url",
            "nullable": true
          },
          "dq": {
            "type": "string",
            "description": "\"dq\" RSA private key parameter (second factor CRT exponent)",
            "format": "base64url",
            "nullable": true
          },
          "p": {
            "type": "string",
            "description": "\"p\" RSA private key parameter (first prime factor)",
            "format": "base64url",
            "nullable": true
          },
          "q": {
            "type": "string",
            "description": "\"q\" RSA private key parameter (second prime factor)",
            "format": "base64url",
            "nullable": true
          },
          "qi": {
            "type": "string",
            "description": "\"qi\" RSA private key parameter (first CRT coefficient)",
            "format": "base64url",
            "nullable": true
          },
          "kid": {
            "minLength": 1,
            "type": "string",
            "description": "The \"kid\" (key ID) parameter is used to match a specific key."
          }
        },
        "additionalProperties": false
      },
      "JwkUses": {
        "enum": [
          "sig",
          "enc"
        ],
        "type": "string"
      },
      "KeyFormats": {
        "enum": [
          "jwk"
        ],
        "type": "string"
      },
      "KeySizes": {
        "enum": [
          128,
          192,
          256,
          2048,
          3072,
          4096
        ],
        "type": "integer"
      },
      "KeyStates": {
        "enum": [
          "pre_active",
          "active",
          "deactivated",
          "compromised",
          "destroyed",
          "destroyed_compromised",
          "all"
        ],
        "type": "string"
      },
      "KeyTypes": {
        "enum": [
          "oct",
          "RSA",
          "EC"
        ],
        "type": "string"
      },
      "ListServiceKeysResponse": {
        "required": [
          "continuation_token",
          "is_truncated",
          "objects_list"
        ],
        "type": "object",
        "properties": {
          "objects_list": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetServiceKeyResponse"
            },
            "description": "List of keys returnede"
          },
          "continuation_token": {
            "minLength": 1,
            "type": "string",
            "description": "continuation token if list is not complete"
          },
          "is_truncated": {
            "type": "boolean",
            "description": "Is the list complete"
          }
        },
        "additionalProperties": false,
        "description": "List domain keys response"
      },
      "PatchSecretResponse": {
        "type": "object",
        "properties": {
          "request_id": {
            "type": "string",
            "description": "",
            "nullable": true
          },
          "lease_id": {
            "type": "string",
            "description": ""
          },
          "renewable": {
            "type": "boolean",
            "description": ""
          },
          "lease_duration": {
            "type": "integer",
            "description": "",
            "format": "int32"
          },
          "wrap_info": {
            "type": "string",
            "description": "The secret data map",
            "nullable": true
          },
          "warnings": {
            "type": "string",
            "description": "The secret data map",
            "nullable": true
          },
          "auth": {
            "type": "string",
            "description": "The secret data map",
            "nullable": true
          },
          "data": {
            "$ref": "#/components/schemas/SecretVersionMetadata"
          }
        },
        "additionalProperties": false,
        "description": "Patch secret operation response"
      },
      "PatchServiceKeyRequest": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "description": "Key friendly name"
          }
        },
        "additionalProperties": false,
        "description": "Patch domain key model"
      },
      "PostConfigRequest": {
        "type": "object",
        "properties": {
          "cas_required": {
            "type": "boolean",
            "description": "cas parameter will be required for each write call if set to true"
          },
          "delete_version_after": {
            "type": "string",
            "description": "The length of time before a version is deleted",
            "nullable": true
          },
          "max_versions": {
            "type": "integer",
            "description": "The number of versions to keep (10 default)",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Default settings for secret API backend service"
      },
      "PostSecretOptions": {
        "type": "object",
        "properties": {
          "cas": {
            "type": "integer",
            "description": "",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Secret request options"
      },
      "PostSecretRequest": {
        "type": "object",
        "properties": {
          "data": {
            "description": "The secret data map to store",
            "nullable": true
          },
          "options": {
            "$ref": "#/components/schemas/PostSecretOptions"
          }
        },
        "additionalProperties": false,
        "description": ""
      },
      "PostSecretResponse": {
        "type": "object",
        "properties": {
          "request_id": {
            "type": "string",
            "description": "",
            "nullable": true
          },
          "lease_id": {
            "type": "string",
            "description": ""
          },
          "renewable": {
            "type": "boolean",
            "description": ""
          },
          "lease_duration": {
            "type": "integer",
            "description": "",
            "format": "int32"
          },
          "wrap_info": {
            "type": "string",
            "description": "The secret data map",
            "nullable": true
          },
          "warnings": {
            "type": "string",
            "description": "The secret data map",
            "nullable": true
          },
          "auth": {
            "type": "string",
            "description": "The secret data map",
            "nullable": true
          },
          "data": {
            "$ref": "#/components/schemas/SecretVersionMetadata"
          }
        },
        "additionalProperties": false,
        "description": "Post secret operation response"
      },
      "RevocationReasons": {
        "enum": [
          "unspecified",
          "key_compromise",
          "ca_compromise",
          "affiliation_changed",
          "superseded",
          "cessation_of_operation",
          "privilege_withdrawn"
        ],
        "type": "string"
      },
      "SecretData": {
        "type": "object",
        "properties": {
          "data": {
            "description": "",
            "nullable": true
          },
          "metadata": {
            "$ref": "#/components/schemas/SecretVersionMetadata"
          }
        },
        "additionalProperties": false,
        "description": ""
      },
      "SecretDataSubkeys": {
        "type": "object",
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/SecretVersionMetadata"
          },
          "subkeys": {
            "description": "",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": ""
      },
      "SecretMetadata": {
        "type": "object",
        "properties": {
          "keys": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "",
            "nullable": true
          },
          "cas_required": {
            "type": "boolean",
            "description": "",
            "nullable": true
          },
          "created_time": {
            "type": "string",
            "description": "",
            "nullable": true
          },
          "current_version": {
            "type": "integer",
            "description": "",
            "format": "int32",
            "nullable": true
          },
          "custom_metadata": {
            "description": "",
            "nullable": true
          },
          "delete_version_after": {
            "type": "string",
            "description": "",
            "nullable": true
          },
          "max_versions": {
            "type": "integer",
            "description": "",
            "format": "int32",
            "nullable": true
          },
          "oldest_version": {
            "type": "integer",
            "description": "",
            "format": "int32",
            "nullable": true
          },
          "updated_time": {
            "type": "string",
            "description": "",
            "nullable": true
          },
          "versions": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/SecretVersionMetadataShort"
            },
            "description": "",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Secret metadata or list of keys"
      },
      "SecretUpdatableMetadata": {
        "type": "object",
        "properties": {
          "cas_required": {
            "type": "boolean",
            "description": "",
            "nullable": true
          },
          "custom_metadata": {
            "description": "",
            "nullable": true
          },
          "delete_version_after": {
            "type": "string",
            "description": "",
            "nullable": true
          },
          "max_versions": {
            "type": "integer",
            "description": "",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": ""
      },
      "SecretVersionMetadata": {
        "type": "object",
        "properties": {
          "created_time": {
            "type": "string",
            "description": "",
            "nullable": true
          },
          "custom_metadata": {
            "description": "",
            "nullable": true
          },
          "deletion_time": {
            "type": "string",
            "description": "",
            "nullable": true
          },
          "destroyed": {
            "type": "boolean",
            "description": "",
            "nullable": true
          },
          "version": {
            "type": "integer",
            "description": "",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Secret version specific metadata fields"
      },
      "SecretVersionMetadataShort": {
        "type": "object",
        "properties": {
          "created_time": {
            "type": "string",
            "description": "",
            "nullable": true
          },
          "deletion_time": {
            "type": "string",
            "description": "",
            "nullable": true
          },
          "destroyed": {
            "type": "boolean",
            "description": ""
          }
        },
        "additionalProperties": false,
        "description": ""
      },
      "SecretVersionsRequest": {
        "required": [
          "versions"
        ],
        "type": "object",
        "properties": {
          "versions": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "The versions to be soft deleted"
          }
        },
        "additionalProperties": false,
        "description": "List of secrets in scope of operation"
      },
      "SignRequest": {
        "required": [
          "alg",
          "message"
        ],
        "type": "object",
        "properties": {
          "message": {
            "maxLength": 4096,
            "minLength": 1,
            "type": "string",
            "description": "Message to be signed",
            "format": "byte"
          },
          "alg": {
            "$ref": "#/components/schemas/DigitalSignatureAlgorithms"
          },
          "isdigest": {
            "type": "boolean",
            "description": "Is the message already hashed"
          }
        },
        "additionalProperties": false,
        "description": "Sign request model"
      },
      "SignResponse": {
        "required": [
          "signature"
        ],
        "type": "object",
        "properties": {
          "signature": {
            "minLength": 1,
            "type": "string",
            "description": "Signature data",
            "format": "string"
          }
        },
        "additionalProperties": false,
        "description": "Sign response model"
      },
      "SignatureFormats": {
        "enum": [
          "raw",
          "jws",
          "jwt"
        ],
        "type": "string",
        "description": "Formats for digital signature result."
      },
      "StatusCodes": {
        "type": "object",
        "additionalProperties": false
      },
      "VerifyRequest": {
        "required": [
          "signature"
        ],
        "type": "object",
        "properties": {
          "message": {
            "maxLength": 4094,
            "type": "string",
            "description": "Signed message to be verified",
            "format": "byte",
            "nullable": true
          },
          "signature": {
            "minLength": 1,
            "type": "string",
            "description": "String token containing signature for verification",
            "format": "string"
          },
          "alg": {
            "$ref": "#/components/schemas/DigitalSignatureAlgorithms"
          },
          "isdigest": {
            "type": "boolean",
            "description": "Is the message already hashed"
          }
        },
        "additionalProperties": false,
        "description": "Verify signature request model"
      },
      "VerifyResponse": {
        "required": [
          "result"
        ],
        "type": "object",
        "properties": {
          "result": {
            "type": "boolean",
            "description": "Result of verify operation"
          }
        },
        "additionalProperties": false,
        "description": "Verify response model"
      }
    }
  }
}