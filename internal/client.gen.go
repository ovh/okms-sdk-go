// Package internal provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package internal

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
	. "github.com/ovh/okms-sdk-go/types"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetSecretConfig request
	GetSecretConfig(ctx context.Context, okmsId OkmsId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSecretConfigWithBody request with any body
	PostSecretConfigWithBody(ctx context.Context, okmsId OkmsId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSecretConfig(ctx context.Context, okmsId OkmsId, body PostSecretConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSecretRequest request
	DeleteSecretRequest(ctx context.Context, okmsId OkmsId, path SecretPath, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSecretRequest request
	GetSecretRequest(ctx context.Context, okmsId OkmsId, path SecretPath, params *GetSecretRequestParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchSecretRequestWithBody request with any body
	PatchSecretRequestWithBody(ctx context.Context, okmsId OkmsId, path SecretPath, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchSecretRequest(ctx context.Context, okmsId OkmsId, path SecretPath, body PatchSecretRequestJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchSecretRequestWithApplicationMergePatchPlusJSONBody(ctx context.Context, okmsId OkmsId, path SecretPath, body PatchSecretRequestApplicationMergePatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSecretRequestWithBody request with any body
	PostSecretRequestWithBody(ctx context.Context, okmsId OkmsId, path SecretPath, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSecretRequest(ctx context.Context, okmsId OkmsId, path SecretPath, body PostSecretRequestJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSecretVersionsWithBody request with any body
	DeleteSecretVersionsWithBody(ctx context.Context, okmsId OkmsId, path SecretPath, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteSecretVersions(ctx context.Context, okmsId OkmsId, path SecretPath, body DeleteSecretVersionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutSecretDestroyWithBody request with any body
	PutSecretDestroyWithBody(ctx context.Context, okmsId OkmsId, path SecretPath, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutSecretDestroy(ctx context.Context, okmsId OkmsId, path SecretPath, body PutSecretDestroyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListSecretsMetadata request
	ListSecretsMetadata(ctx context.Context, okmsId OkmsId, params *ListSecretsMetadataParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSecretMetadata request
	DeleteSecretMetadata(ctx context.Context, okmsId OkmsId, path SecretPath, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSecretsMetadata request
	GetSecretsMetadata(ctx context.Context, okmsId OkmsId, path SecretPath, params *GetSecretsMetadataParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchSecretMetadataWithBody request with any body
	PatchSecretMetadataWithBody(ctx context.Context, okmsId OkmsId, path SecretPath, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchSecretMetadata(ctx context.Context, okmsId OkmsId, path SecretPath, body PatchSecretMetadataJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchSecretMetadataWithApplicationMergePatchPlusJSONBody(ctx context.Context, okmsId OkmsId, path SecretPath, body PatchSecretMetadataApplicationMergePatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSecretMetadataWithBody request with any body
	PostSecretMetadataWithBody(ctx context.Context, okmsId OkmsId, path SecretPath, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSecretMetadata(ctx context.Context, okmsId OkmsId, path SecretPath, body PostSecretMetadataJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSecretSubkeys request
	GetSecretSubkeys(ctx context.Context, okmsId OkmsId, path SecretPath, params *GetSecretSubkeysParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSecretUndeleteWithBody request with any body
	PostSecretUndeleteWithBody(ctx context.Context, okmsId OkmsId, path SecretPath, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSecretUndelete(ctx context.Context, okmsId OkmsId, path SecretPath, body PostSecretUndeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListServiceKeys request
	ListServiceKeys(ctx context.Context, okmsId OkmsId, params *ListServiceKeysParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateImportServiceKeyWithBody request with any body
	CreateImportServiceKeyWithBody(ctx context.Context, okmsId OkmsId, params *CreateImportServiceKeyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateImportServiceKey(ctx context.Context, okmsId OkmsId, params *CreateImportServiceKeyParams, body CreateImportServiceKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteServiceKey request
	DeleteServiceKey(ctx context.Context, okmsId OkmsId, keyId ServicekeyPath, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetServiceKey request
	GetServiceKey(ctx context.Context, okmsId OkmsId, keyId ServicekeyPath, params *GetServiceKeyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchServiceKeyWithBody request with any body
	PatchServiceKeyWithBody(ctx context.Context, okmsId OkmsId, keyId ServicekeyPath, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchServiceKeyWithApplicationWildcardPlusJSONBody(ctx context.Context, okmsId OkmsId, keyId ServicekeyPath, body PatchServiceKeyApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchServiceKey(ctx context.Context, okmsId OkmsId, keyId ServicekeyPath, body PatchServiceKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ActivateServiceKey request
	ActivateServiceKey(ctx context.Context, okmsId OkmsId, keyId ServicekeyPath, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GenerateDataKeyWithBody request with any body
	GenerateDataKeyWithBody(ctx context.Context, okmsId OkmsId, keyId ServicekeyPath, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GenerateDataKey(ctx context.Context, okmsId OkmsId, keyId ServicekeyPath, body GenerateDataKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DecryptDataKeyWithBody request with any body
	DecryptDataKeyWithBody(ctx context.Context, okmsId OkmsId, keyId ServicekeyPath, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DecryptDataKey(ctx context.Context, okmsId OkmsId, keyId ServicekeyPath, body DecryptDataKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeactivateServiceKeyWithBody request with any body
	DeactivateServiceKeyWithBody(ctx context.Context, okmsId OkmsId, keyId ServicekeyPath, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeactivateServiceKey(ctx context.Context, okmsId OkmsId, keyId ServicekeyPath, body DeactivateServiceKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DecryptWithBody request with any body
	DecryptWithBody(ctx context.Context, okmsId OkmsId, keyId ServicekeyPath, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Decrypt(ctx context.Context, okmsId OkmsId, keyId ServicekeyPath, body DecryptJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EncryptWithBody request with any body
	EncryptWithBody(ctx context.Context, okmsId OkmsId, keyId ServicekeyPath, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Encrypt(ctx context.Context, okmsId OkmsId, keyId ServicekeyPath, body EncryptJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SignWithBody request with any body
	SignWithBody(ctx context.Context, okmsId OkmsId, keyId ServicekeyPath, params *SignParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Sign(ctx context.Context, okmsId OkmsId, keyId ServicekeyPath, params *SignParams, body SignJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VerifyWithBody request with any body
	VerifyWithBody(ctx context.Context, okmsId OkmsId, keyId ServicekeyPath, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Verify(ctx context.Context, okmsId OkmsId, keyId ServicekeyPath, body VerifyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListSecretV2 request
	ListSecretV2(ctx context.Context, okmsId OkmsId, params *ListSecretV2Params, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSecretV2WithBody request with any body
	PostSecretV2WithBody(ctx context.Context, okmsId OkmsId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSecretV2(ctx context.Context, okmsId OkmsId, body PostSecretV2JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSecretV2 request
	DeleteSecretV2(ctx context.Context, okmsId OkmsId, path SecretPath, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSecretV2 request
	GetSecretV2(ctx context.Context, okmsId OkmsId, path SecretPath, params *GetSecretV2Params, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutSecretV2WithBody request with any body
	PutSecretV2WithBody(ctx context.Context, okmsId OkmsId, path SecretPath, params *PutSecretV2Params, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutSecretV2(ctx context.Context, okmsId OkmsId, path SecretPath, params *PutSecretV2Params, body PutSecretV2JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListSecretVersionV2 request
	ListSecretVersionV2(ctx context.Context, okmsId OkmsId, path SecretPath, params *ListSecretVersionV2Params, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSecretVersionV2WithBody request with any body
	PostSecretVersionV2WithBody(ctx context.Context, okmsId OkmsId, path SecretPath, params *PostSecretVersionV2Params, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSecretVersionV2(ctx context.Context, okmsId OkmsId, path SecretPath, params *PostSecretVersionV2Params, body PostSecretVersionV2JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSecretVersionV2 request
	GetSecretVersionV2(ctx context.Context, okmsId OkmsId, path SecretPath, version uint32, params *GetSecretVersionV2Params, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutSecretVersionV2WithBody request with any body
	PutSecretVersionV2WithBody(ctx context.Context, okmsId OkmsId, path SecretPath, version uint32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutSecretVersionV2(ctx context.Context, okmsId OkmsId, path SecretPath, version uint32, body PutSecretVersionV2JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSecretConfigV2 request
	GetSecretConfigV2(ctx context.Context, okmsId OkmsId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutSecretConfigV2WithBody request with any body
	PutSecretConfigV2WithBody(ctx context.Context, okmsId OkmsId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutSecretConfigV2(ctx context.Context, okmsId OkmsId, body PutSecretConfigV2JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetSecretConfig(ctx context.Context, okmsId OkmsId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSecretConfigRequest(c.Server, okmsId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSecretConfigWithBody(ctx context.Context, okmsId OkmsId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSecretConfigRequestWithBody(c.Server, okmsId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSecretConfig(ctx context.Context, okmsId OkmsId, body PostSecretConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSecretConfigRequest(c.Server, okmsId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSecretRequest(ctx context.Context, okmsId OkmsId, path SecretPath, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSecretRequestRequest(c.Server, okmsId, path)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSecretRequest(ctx context.Context, okmsId OkmsId, path SecretPath, params *GetSecretRequestParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSecretRequestRequest(c.Server, okmsId, path, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchSecretRequestWithBody(ctx context.Context, okmsId OkmsId, path SecretPath, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchSecretRequestRequestWithBody(c.Server, okmsId, path, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchSecretRequest(ctx context.Context, okmsId OkmsId, path SecretPath, body PatchSecretRequestJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchSecretRequestRequest(c.Server, okmsId, path, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchSecretRequestWithApplicationMergePatchPlusJSONBody(ctx context.Context, okmsId OkmsId, path SecretPath, body PatchSecretRequestApplicationMergePatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchSecretRequestRequestWithApplicationMergePatchPlusJSONBody(c.Server, okmsId, path, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSecretRequestWithBody(ctx context.Context, okmsId OkmsId, path SecretPath, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSecretRequestRequestWithBody(c.Server, okmsId, path, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSecretRequest(ctx context.Context, okmsId OkmsId, path SecretPath, body PostSecretRequestJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSecretRequestRequest(c.Server, okmsId, path, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSecretVersionsWithBody(ctx context.Context, okmsId OkmsId, path SecretPath, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSecretVersionsRequestWithBody(c.Server, okmsId, path, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSecretVersions(ctx context.Context, okmsId OkmsId, path SecretPath, body DeleteSecretVersionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSecretVersionsRequest(c.Server, okmsId, path, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSecretDestroyWithBody(ctx context.Context, okmsId OkmsId, path SecretPath, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSecretDestroyRequestWithBody(c.Server, okmsId, path, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSecretDestroy(ctx context.Context, okmsId OkmsId, path SecretPath, body PutSecretDestroyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSecretDestroyRequest(c.Server, okmsId, path, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListSecretsMetadata(ctx context.Context, okmsId OkmsId, params *ListSecretsMetadataParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListSecretsMetadataRequest(c.Server, okmsId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSecretMetadata(ctx context.Context, okmsId OkmsId, path SecretPath, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSecretMetadataRequest(c.Server, okmsId, path)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSecretsMetadata(ctx context.Context, okmsId OkmsId, path SecretPath, params *GetSecretsMetadataParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSecretsMetadataRequest(c.Server, okmsId, path, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchSecretMetadataWithBody(ctx context.Context, okmsId OkmsId, path SecretPath, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchSecretMetadataRequestWithBody(c.Server, okmsId, path, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchSecretMetadata(ctx context.Context, okmsId OkmsId, path SecretPath, body PatchSecretMetadataJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchSecretMetadataRequest(c.Server, okmsId, path, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchSecretMetadataWithApplicationMergePatchPlusJSONBody(ctx context.Context, okmsId OkmsId, path SecretPath, body PatchSecretMetadataApplicationMergePatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchSecretMetadataRequestWithApplicationMergePatchPlusJSONBody(c.Server, okmsId, path, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSecretMetadataWithBody(ctx context.Context, okmsId OkmsId, path SecretPath, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSecretMetadataRequestWithBody(c.Server, okmsId, path, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSecretMetadata(ctx context.Context, okmsId OkmsId, path SecretPath, body PostSecretMetadataJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSecretMetadataRequest(c.Server, okmsId, path, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSecretSubkeys(ctx context.Context, okmsId OkmsId, path SecretPath, params *GetSecretSubkeysParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSecretSubkeysRequest(c.Server, okmsId, path, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSecretUndeleteWithBody(ctx context.Context, okmsId OkmsId, path SecretPath, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSecretUndeleteRequestWithBody(c.Server, okmsId, path, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSecretUndelete(ctx context.Context, okmsId OkmsId, path SecretPath, body PostSecretUndeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSecretUndeleteRequest(c.Server, okmsId, path, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListServiceKeys(ctx context.Context, okmsId OkmsId, params *ListServiceKeysParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListServiceKeysRequest(c.Server, okmsId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateImportServiceKeyWithBody(ctx context.Context, okmsId OkmsId, params *CreateImportServiceKeyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateImportServiceKeyRequestWithBody(c.Server, okmsId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateImportServiceKey(ctx context.Context, okmsId OkmsId, params *CreateImportServiceKeyParams, body CreateImportServiceKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateImportServiceKeyRequest(c.Server, okmsId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteServiceKey(ctx context.Context, okmsId OkmsId, keyId ServicekeyPath, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteServiceKeyRequest(c.Server, okmsId, keyId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetServiceKey(ctx context.Context, okmsId OkmsId, keyId ServicekeyPath, params *GetServiceKeyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetServiceKeyRequest(c.Server, okmsId, keyId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchServiceKeyWithBody(ctx context.Context, okmsId OkmsId, keyId ServicekeyPath, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchServiceKeyRequestWithBody(c.Server, okmsId, keyId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchServiceKeyWithApplicationWildcardPlusJSONBody(ctx context.Context, okmsId OkmsId, keyId ServicekeyPath, body PatchServiceKeyApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchServiceKeyRequestWithApplicationWildcardPlusJSONBody(c.Server, okmsId, keyId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchServiceKey(ctx context.Context, okmsId OkmsId, keyId ServicekeyPath, body PatchServiceKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchServiceKeyRequest(c.Server, okmsId, keyId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ActivateServiceKey(ctx context.Context, okmsId OkmsId, keyId ServicekeyPath, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewActivateServiceKeyRequest(c.Server, okmsId, keyId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GenerateDataKeyWithBody(ctx context.Context, okmsId OkmsId, keyId ServicekeyPath, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGenerateDataKeyRequestWithBody(c.Server, okmsId, keyId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GenerateDataKey(ctx context.Context, okmsId OkmsId, keyId ServicekeyPath, body GenerateDataKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGenerateDataKeyRequest(c.Server, okmsId, keyId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DecryptDataKeyWithBody(ctx context.Context, okmsId OkmsId, keyId ServicekeyPath, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDecryptDataKeyRequestWithBody(c.Server, okmsId, keyId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DecryptDataKey(ctx context.Context, okmsId OkmsId, keyId ServicekeyPath, body DecryptDataKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDecryptDataKeyRequest(c.Server, okmsId, keyId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeactivateServiceKeyWithBody(ctx context.Context, okmsId OkmsId, keyId ServicekeyPath, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeactivateServiceKeyRequestWithBody(c.Server, okmsId, keyId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeactivateServiceKey(ctx context.Context, okmsId OkmsId, keyId ServicekeyPath, body DeactivateServiceKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeactivateServiceKeyRequest(c.Server, okmsId, keyId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DecryptWithBody(ctx context.Context, okmsId OkmsId, keyId ServicekeyPath, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDecryptRequestWithBody(c.Server, okmsId, keyId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Decrypt(ctx context.Context, okmsId OkmsId, keyId ServicekeyPath, body DecryptJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDecryptRequest(c.Server, okmsId, keyId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EncryptWithBody(ctx context.Context, okmsId OkmsId, keyId ServicekeyPath, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEncryptRequestWithBody(c.Server, okmsId, keyId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Encrypt(ctx context.Context, okmsId OkmsId, keyId ServicekeyPath, body EncryptJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEncryptRequest(c.Server, okmsId, keyId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SignWithBody(ctx context.Context, okmsId OkmsId, keyId ServicekeyPath, params *SignParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSignRequestWithBody(c.Server, okmsId, keyId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Sign(ctx context.Context, okmsId OkmsId, keyId ServicekeyPath, params *SignParams, body SignJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSignRequest(c.Server, okmsId, keyId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VerifyWithBody(ctx context.Context, okmsId OkmsId, keyId ServicekeyPath, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVerifyRequestWithBody(c.Server, okmsId, keyId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Verify(ctx context.Context, okmsId OkmsId, keyId ServicekeyPath, body VerifyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVerifyRequest(c.Server, okmsId, keyId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListSecretV2(ctx context.Context, okmsId OkmsId, params *ListSecretV2Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListSecretV2Request(c.Server, okmsId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSecretV2WithBody(ctx context.Context, okmsId OkmsId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSecretV2RequestWithBody(c.Server, okmsId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSecretV2(ctx context.Context, okmsId OkmsId, body PostSecretV2JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSecretV2Request(c.Server, okmsId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSecretV2(ctx context.Context, okmsId OkmsId, path SecretPath, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSecretV2Request(c.Server, okmsId, path)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSecretV2(ctx context.Context, okmsId OkmsId, path SecretPath, params *GetSecretV2Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSecretV2Request(c.Server, okmsId, path, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSecretV2WithBody(ctx context.Context, okmsId OkmsId, path SecretPath, params *PutSecretV2Params, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSecretV2RequestWithBody(c.Server, okmsId, path, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSecretV2(ctx context.Context, okmsId OkmsId, path SecretPath, params *PutSecretV2Params, body PutSecretV2JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSecretV2Request(c.Server, okmsId, path, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListSecretVersionV2(ctx context.Context, okmsId OkmsId, path SecretPath, params *ListSecretVersionV2Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListSecretVersionV2Request(c.Server, okmsId, path, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSecretVersionV2WithBody(ctx context.Context, okmsId OkmsId, path SecretPath, params *PostSecretVersionV2Params, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSecretVersionV2RequestWithBody(c.Server, okmsId, path, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSecretVersionV2(ctx context.Context, okmsId OkmsId, path SecretPath, params *PostSecretVersionV2Params, body PostSecretVersionV2JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSecretVersionV2Request(c.Server, okmsId, path, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSecretVersionV2(ctx context.Context, okmsId OkmsId, path SecretPath, version uint32, params *GetSecretVersionV2Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSecretVersionV2Request(c.Server, okmsId, path, version, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSecretVersionV2WithBody(ctx context.Context, okmsId OkmsId, path SecretPath, version uint32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSecretVersionV2RequestWithBody(c.Server, okmsId, path, version, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSecretVersionV2(ctx context.Context, okmsId OkmsId, path SecretPath, version uint32, body PutSecretVersionV2JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSecretVersionV2Request(c.Server, okmsId, path, version, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSecretConfigV2(ctx context.Context, okmsId OkmsId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSecretConfigV2Request(c.Server, okmsId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSecretConfigV2WithBody(ctx context.Context, okmsId OkmsId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSecretConfigV2RequestWithBody(c.Server, okmsId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSecretConfigV2(ctx context.Context, okmsId OkmsId, body PutSecretConfigV2JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSecretConfigV2Request(c.Server, okmsId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetSecretConfigRequest generates requests for GetSecretConfig
func NewGetSecretConfigRequest(server string, okmsId OkmsId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "okmsId", runtime.ParamLocationPath, okmsId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/%s/v1/secret/config", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostSecretConfigRequest calls the generic PostSecretConfig builder with application/json body
func NewPostSecretConfigRequest(server string, okmsId OkmsId, body PostSecretConfigJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSecretConfigRequestWithBody(server, okmsId, "application/json", bodyReader)
}

// NewPostSecretConfigRequestWithBody generates requests for PostSecretConfig with any type of body
func NewPostSecretConfigRequestWithBody(server string, okmsId OkmsId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "okmsId", runtime.ParamLocationPath, okmsId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/%s/v1/secret/config", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteSecretRequestRequest generates requests for DeleteSecretRequest
func NewDeleteSecretRequestRequest(server string, okmsId OkmsId, path SecretPath) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "okmsId", runtime.ParamLocationPath, okmsId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "path", runtime.ParamLocationPath, path)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/%s/v1/secret/data/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSecretRequestRequest generates requests for GetSecretRequest
func NewGetSecretRequestRequest(server string, okmsId OkmsId, path SecretPath, params *GetSecretRequestParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "okmsId", runtime.ParamLocationPath, okmsId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "path", runtime.ParamLocationPath, path)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/%s/v1/secret/data/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchSecretRequestRequest calls the generic PatchSecretRequest builder with application/json body
func NewPatchSecretRequestRequest(server string, okmsId OkmsId, path SecretPath, body PatchSecretRequestJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchSecretRequestRequestWithBody(server, okmsId, path, "application/json", bodyReader)
}

// NewPatchSecretRequestRequestWithApplicationMergePatchPlusJSONBody calls the generic PatchSecretRequest builder with application/merge-patch+json body
func NewPatchSecretRequestRequestWithApplicationMergePatchPlusJSONBody(server string, okmsId OkmsId, path SecretPath, body PatchSecretRequestApplicationMergePatchPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchSecretRequestRequestWithBody(server, okmsId, path, "application/merge-patch+json", bodyReader)
}

// NewPatchSecretRequestRequestWithBody generates requests for PatchSecretRequest with any type of body
func NewPatchSecretRequestRequestWithBody(server string, okmsId OkmsId, path SecretPath, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "okmsId", runtime.ParamLocationPath, okmsId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "path", runtime.ParamLocationPath, path)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/%s/v1/secret/data/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostSecretRequestRequest calls the generic PostSecretRequest builder with application/json body
func NewPostSecretRequestRequest(server string, okmsId OkmsId, path SecretPath, body PostSecretRequestJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSecretRequestRequestWithBody(server, okmsId, path, "application/json", bodyReader)
}

// NewPostSecretRequestRequestWithBody generates requests for PostSecretRequest with any type of body
func NewPostSecretRequestRequestWithBody(server string, okmsId OkmsId, path SecretPath, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "okmsId", runtime.ParamLocationPath, okmsId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "path", runtime.ParamLocationPath, path)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/%s/v1/secret/data/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteSecretVersionsRequest calls the generic DeleteSecretVersions builder with application/json body
func NewDeleteSecretVersionsRequest(server string, okmsId OkmsId, path SecretPath, body DeleteSecretVersionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteSecretVersionsRequestWithBody(server, okmsId, path, "application/json", bodyReader)
}

// NewDeleteSecretVersionsRequestWithBody generates requests for DeleteSecretVersions with any type of body
func NewDeleteSecretVersionsRequestWithBody(server string, okmsId OkmsId, path SecretPath, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "okmsId", runtime.ParamLocationPath, okmsId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "path", runtime.ParamLocationPath, path)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/%s/v1/secret/delete/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutSecretDestroyRequest calls the generic PutSecretDestroy builder with application/json body
func NewPutSecretDestroyRequest(server string, okmsId OkmsId, path SecretPath, body PutSecretDestroyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutSecretDestroyRequestWithBody(server, okmsId, path, "application/json", bodyReader)
}

// NewPutSecretDestroyRequestWithBody generates requests for PutSecretDestroy with any type of body
func NewPutSecretDestroyRequestWithBody(server string, okmsId OkmsId, path SecretPath, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "okmsId", runtime.ParamLocationPath, okmsId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "path", runtime.ParamLocationPath, path)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/%s/v1/secret/destroy/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListSecretsMetadataRequest generates requests for ListSecretsMetadata
func NewListSecretsMetadataRequest(server string, okmsId OkmsId, params *ListSecretsMetadataParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "okmsId", runtime.ParamLocationPath, okmsId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/%s/v1/secret/metadata", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XPaginationSize != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Pagination-Size", runtime.ParamLocationHeader, *params.XPaginationSize)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Pagination-Size", headerParam0)
		}

		if params.XPaginationCursor != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "X-Pagination-Cursor", runtime.ParamLocationHeader, *params.XPaginationCursor)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Pagination-Cursor", headerParam1)
		}

	}

	return req, nil
}

// NewDeleteSecretMetadataRequest generates requests for DeleteSecretMetadata
func NewDeleteSecretMetadataRequest(server string, okmsId OkmsId, path SecretPath) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "okmsId", runtime.ParamLocationPath, okmsId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "path", runtime.ParamLocationPath, path)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/%s/v1/secret/metadata/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSecretsMetadataRequest generates requests for GetSecretsMetadata
func NewGetSecretsMetadataRequest(server string, okmsId OkmsId, path SecretPath, params *GetSecretsMetadataParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "okmsId", runtime.ParamLocationPath, okmsId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "path", runtime.ParamLocationPath, path)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/%s/v1/secret/metadata/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.List != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "list", runtime.ParamLocationQuery, *params.List); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XPaginationSize != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Pagination-Size", runtime.ParamLocationHeader, *params.XPaginationSize)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Pagination-Size", headerParam0)
		}

		if params.XPaginationCursor != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "X-Pagination-Cursor", runtime.ParamLocationHeader, *params.XPaginationCursor)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Pagination-Cursor", headerParam1)
		}

	}

	return req, nil
}

// NewPatchSecretMetadataRequest calls the generic PatchSecretMetadata builder with application/json body
func NewPatchSecretMetadataRequest(server string, okmsId OkmsId, path SecretPath, body PatchSecretMetadataJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchSecretMetadataRequestWithBody(server, okmsId, path, "application/json", bodyReader)
}

// NewPatchSecretMetadataRequestWithApplicationMergePatchPlusJSONBody calls the generic PatchSecretMetadata builder with application/merge-patch+json body
func NewPatchSecretMetadataRequestWithApplicationMergePatchPlusJSONBody(server string, okmsId OkmsId, path SecretPath, body PatchSecretMetadataApplicationMergePatchPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchSecretMetadataRequestWithBody(server, okmsId, path, "application/merge-patch+json", bodyReader)
}

// NewPatchSecretMetadataRequestWithBody generates requests for PatchSecretMetadata with any type of body
func NewPatchSecretMetadataRequestWithBody(server string, okmsId OkmsId, path SecretPath, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "okmsId", runtime.ParamLocationPath, okmsId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "path", runtime.ParamLocationPath, path)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/%s/v1/secret/metadata/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostSecretMetadataRequest calls the generic PostSecretMetadata builder with application/json body
func NewPostSecretMetadataRequest(server string, okmsId OkmsId, path SecretPath, body PostSecretMetadataJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSecretMetadataRequestWithBody(server, okmsId, path, "application/json", bodyReader)
}

// NewPostSecretMetadataRequestWithBody generates requests for PostSecretMetadata with any type of body
func NewPostSecretMetadataRequestWithBody(server string, okmsId OkmsId, path SecretPath, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "okmsId", runtime.ParamLocationPath, okmsId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "path", runtime.ParamLocationPath, path)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/%s/v1/secret/metadata/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSecretSubkeysRequest generates requests for GetSecretSubkeys
func NewGetSecretSubkeysRequest(server string, okmsId OkmsId, path SecretPath, params *GetSecretSubkeysParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "okmsId", runtime.ParamLocationPath, okmsId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "path", runtime.ParamLocationPath, path)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/%s/v1/secret/subkeys/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Depth != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "depth", runtime.ParamLocationQuery, *params.Depth); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostSecretUndeleteRequest calls the generic PostSecretUndelete builder with application/json body
func NewPostSecretUndeleteRequest(server string, okmsId OkmsId, path SecretPath, body PostSecretUndeleteJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSecretUndeleteRequestWithBody(server, okmsId, path, "application/json", bodyReader)
}

// NewPostSecretUndeleteRequestWithBody generates requests for PostSecretUndelete with any type of body
func NewPostSecretUndeleteRequestWithBody(server string, okmsId OkmsId, path SecretPath, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "okmsId", runtime.ParamLocationPath, okmsId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "path", runtime.ParamLocationPath, path)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/%s/v1/secret/undelete/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListServiceKeysRequest generates requests for ListServiceKeys
func NewListServiceKeysRequest(server string, okmsId OkmsId, params *ListServiceKeysParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "okmsId", runtime.ParamLocationPath, okmsId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/%s/v1/servicekey", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.State != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "state", runtime.ParamLocationQuery, *params.State); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ContinuationToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "continuation-token", runtime.ParamLocationQuery, *params.ContinuationToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Max != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "max", runtime.ParamLocationQuery, *params.Max); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateImportServiceKeyRequest calls the generic CreateImportServiceKey builder with application/json body
func NewCreateImportServiceKeyRequest(server string, okmsId OkmsId, params *CreateImportServiceKeyParams, body CreateImportServiceKeyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateImportServiceKeyRequestWithBody(server, okmsId, params, "application/json", bodyReader)
}

// NewCreateImportServiceKeyRequestWithBody generates requests for CreateImportServiceKey with any type of body
func NewCreateImportServiceKeyRequestWithBody(server string, okmsId OkmsId, params *CreateImportServiceKeyParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "okmsId", runtime.ParamLocationPath, okmsId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/%s/v1/servicekey", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Format != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "format", runtime.ParamLocationQuery, *params.Format); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteServiceKeyRequest generates requests for DeleteServiceKey
func NewDeleteServiceKeyRequest(server string, okmsId OkmsId, keyId ServicekeyPath) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "okmsId", runtime.ParamLocationPath, okmsId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "keyId", runtime.ParamLocationPath, keyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/%s/v1/servicekey/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetServiceKeyRequest generates requests for GetServiceKey
func NewGetServiceKeyRequest(server string, okmsId OkmsId, keyId ServicekeyPath, params *GetServiceKeyParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "okmsId", runtime.ParamLocationPath, okmsId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "keyId", runtime.ParamLocationPath, keyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/%s/v1/servicekey/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Format != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "format", runtime.ParamLocationQuery, *params.Format); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchServiceKeyRequestWithApplicationWildcardPlusJSONBody calls the generic PatchServiceKey builder with application/*+json body
func NewPatchServiceKeyRequestWithApplicationWildcardPlusJSONBody(server string, okmsId OkmsId, keyId ServicekeyPath, body PatchServiceKeyApplicationWildcardPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchServiceKeyRequestWithBody(server, okmsId, keyId, "application/*+json", bodyReader)
}

// NewPatchServiceKeyRequest calls the generic PatchServiceKey builder with application/json body
func NewPatchServiceKeyRequest(server string, okmsId OkmsId, keyId ServicekeyPath, body PatchServiceKeyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchServiceKeyRequestWithBody(server, okmsId, keyId, "application/json", bodyReader)
}

// NewPatchServiceKeyRequestWithBody generates requests for PatchServiceKey with any type of body
func NewPatchServiceKeyRequestWithBody(server string, okmsId OkmsId, keyId ServicekeyPath, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "okmsId", runtime.ParamLocationPath, okmsId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "keyId", runtime.ParamLocationPath, keyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/%s/v1/servicekey/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewActivateServiceKeyRequest generates requests for ActivateServiceKey
func NewActivateServiceKeyRequest(server string, okmsId OkmsId, keyId ServicekeyPath) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "okmsId", runtime.ParamLocationPath, okmsId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "keyId", runtime.ParamLocationPath, keyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/%s/v1/servicekey/%s/activate", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGenerateDataKeyRequest calls the generic GenerateDataKey builder with application/json body
func NewGenerateDataKeyRequest(server string, okmsId OkmsId, keyId ServicekeyPath, body GenerateDataKeyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGenerateDataKeyRequestWithBody(server, okmsId, keyId, "application/json", bodyReader)
}

// NewGenerateDataKeyRequestWithBody generates requests for GenerateDataKey with any type of body
func NewGenerateDataKeyRequestWithBody(server string, okmsId OkmsId, keyId ServicekeyPath, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "okmsId", runtime.ParamLocationPath, okmsId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "keyId", runtime.ParamLocationPath, keyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/%s/v1/servicekey/%s/datakey", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDecryptDataKeyRequest calls the generic DecryptDataKey builder with application/json body
func NewDecryptDataKeyRequest(server string, okmsId OkmsId, keyId ServicekeyPath, body DecryptDataKeyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDecryptDataKeyRequestWithBody(server, okmsId, keyId, "application/json", bodyReader)
}

// NewDecryptDataKeyRequestWithBody generates requests for DecryptDataKey with any type of body
func NewDecryptDataKeyRequestWithBody(server string, okmsId OkmsId, keyId ServicekeyPath, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "okmsId", runtime.ParamLocationPath, okmsId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "keyId", runtime.ParamLocationPath, keyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/%s/v1/servicekey/%s/datakey/decrypt", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeactivateServiceKeyRequest calls the generic DeactivateServiceKey builder with application/json body
func NewDeactivateServiceKeyRequest(server string, okmsId OkmsId, keyId ServicekeyPath, body DeactivateServiceKeyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeactivateServiceKeyRequestWithBody(server, okmsId, keyId, "application/json", bodyReader)
}

// NewDeactivateServiceKeyRequestWithBody generates requests for DeactivateServiceKey with any type of body
func NewDeactivateServiceKeyRequestWithBody(server string, okmsId OkmsId, keyId ServicekeyPath, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "okmsId", runtime.ParamLocationPath, okmsId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "keyId", runtime.ParamLocationPath, keyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/%s/v1/servicekey/%s/deactivate", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDecryptRequest calls the generic Decrypt builder with application/json body
func NewDecryptRequest(server string, okmsId OkmsId, keyId ServicekeyPath, body DecryptJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDecryptRequestWithBody(server, okmsId, keyId, "application/json", bodyReader)
}

// NewDecryptRequestWithBody generates requests for Decrypt with any type of body
func NewDecryptRequestWithBody(server string, okmsId OkmsId, keyId ServicekeyPath, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "okmsId", runtime.ParamLocationPath, okmsId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "keyId", runtime.ParamLocationPath, keyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/%s/v1/servicekey/%s/decrypt", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewEncryptRequest calls the generic Encrypt builder with application/json body
func NewEncryptRequest(server string, okmsId OkmsId, keyId ServicekeyPath, body EncryptJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEncryptRequestWithBody(server, okmsId, keyId, "application/json", bodyReader)
}

// NewEncryptRequestWithBody generates requests for Encrypt with any type of body
func NewEncryptRequestWithBody(server string, okmsId OkmsId, keyId ServicekeyPath, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "okmsId", runtime.ParamLocationPath, okmsId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "keyId", runtime.ParamLocationPath, keyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/%s/v1/servicekey/%s/encrypt", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSignRequest calls the generic Sign builder with application/json body
func NewSignRequest(server string, okmsId OkmsId, keyId ServicekeyPath, params *SignParams, body SignJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSignRequestWithBody(server, okmsId, keyId, params, "application/json", bodyReader)
}

// NewSignRequestWithBody generates requests for Sign with any type of body
func NewSignRequestWithBody(server string, okmsId OkmsId, keyId ServicekeyPath, params *SignParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "okmsId", runtime.ParamLocationPath, okmsId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "keyId", runtime.ParamLocationPath, keyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/%s/v1/servicekey/%s/sign", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Format != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "format", runtime.ParamLocationQuery, *params.Format); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewVerifyRequest calls the generic Verify builder with application/json body
func NewVerifyRequest(server string, okmsId OkmsId, keyId ServicekeyPath, body VerifyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewVerifyRequestWithBody(server, okmsId, keyId, "application/json", bodyReader)
}

// NewVerifyRequestWithBody generates requests for Verify with any type of body
func NewVerifyRequestWithBody(server string, okmsId OkmsId, keyId ServicekeyPath, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "okmsId", runtime.ParamLocationPath, okmsId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "keyId", runtime.ParamLocationPath, keyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/%s/v1/servicekey/%s/verify", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListSecretV2Request generates requests for ListSecretV2
func NewListSecretV2Request(server string, okmsId OkmsId, params *ListSecretV2Params) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "okmsId", runtime.ParamLocationPath, okmsId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/%s/v2/secret", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XPaginationSize != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Pagination-Size", runtime.ParamLocationHeader, *params.XPaginationSize)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Pagination-Size", headerParam0)
		}

		if params.XPaginationCursor != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "X-Pagination-Cursor", runtime.ParamLocationHeader, *params.XPaginationCursor)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Pagination-Cursor", headerParam1)
		}

	}

	return req, nil
}

// NewPostSecretV2Request calls the generic PostSecretV2 builder with application/json body
func NewPostSecretV2Request(server string, okmsId OkmsId, body PostSecretV2JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSecretV2RequestWithBody(server, okmsId, "application/json", bodyReader)
}

// NewPostSecretV2RequestWithBody generates requests for PostSecretV2 with any type of body
func NewPostSecretV2RequestWithBody(server string, okmsId OkmsId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "okmsId", runtime.ParamLocationPath, okmsId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/%s/v2/secret", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteSecretV2Request generates requests for DeleteSecretV2
func NewDeleteSecretV2Request(server string, okmsId OkmsId, path SecretPath) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "okmsId", runtime.ParamLocationPath, okmsId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "path", runtime.ParamLocationPath, path)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/%s/v2/secret/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSecretV2Request generates requests for GetSecretV2
func NewGetSecretV2Request(server string, okmsId OkmsId, path SecretPath, params *GetSecretV2Params) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "okmsId", runtime.ParamLocationPath, okmsId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "path", runtime.ParamLocationPath, path)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/%s/v2/secret/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IncludeData != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeData", runtime.ParamLocationQuery, *params.IncludeData); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutSecretV2Request calls the generic PutSecretV2 builder with application/json body
func NewPutSecretV2Request(server string, okmsId OkmsId, path SecretPath, params *PutSecretV2Params, body PutSecretV2JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutSecretV2RequestWithBody(server, okmsId, path, params, "application/json", bodyReader)
}

// NewPutSecretV2RequestWithBody generates requests for PutSecretV2 with any type of body
func NewPutSecretV2RequestWithBody(server string, okmsId OkmsId, path SecretPath, params *PutSecretV2Params, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "okmsId", runtime.ParamLocationPath, okmsId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "path", runtime.ParamLocationPath, path)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/%s/v2/secret/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Cas != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cas", runtime.ParamLocationQuery, *params.Cas); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListSecretVersionV2Request generates requests for ListSecretVersionV2
func NewListSecretVersionV2Request(server string, okmsId OkmsId, path SecretPath, params *ListSecretVersionV2Params) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "okmsId", runtime.ParamLocationPath, okmsId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "path", runtime.ParamLocationPath, path)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/%s/v2/secret/%s/version", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XPaginationSize != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Pagination-Size", runtime.ParamLocationHeader, *params.XPaginationSize)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Pagination-Size", headerParam0)
		}

		if params.XPaginationCursor != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "X-Pagination-Cursor", runtime.ParamLocationHeader, *params.XPaginationCursor)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Pagination-Cursor", headerParam1)
		}

	}

	return req, nil
}

// NewPostSecretVersionV2Request calls the generic PostSecretVersionV2 builder with application/json body
func NewPostSecretVersionV2Request(server string, okmsId OkmsId, path SecretPath, params *PostSecretVersionV2Params, body PostSecretVersionV2JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSecretVersionV2RequestWithBody(server, okmsId, path, params, "application/json", bodyReader)
}

// NewPostSecretVersionV2RequestWithBody generates requests for PostSecretVersionV2 with any type of body
func NewPostSecretVersionV2RequestWithBody(server string, okmsId OkmsId, path SecretPath, params *PostSecretVersionV2Params, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "okmsId", runtime.ParamLocationPath, okmsId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "path", runtime.ParamLocationPath, path)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/%s/v2/secret/%s/version", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Cas != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cas", runtime.ParamLocationQuery, *params.Cas); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSecretVersionV2Request generates requests for GetSecretVersionV2
func NewGetSecretVersionV2Request(server string, okmsId OkmsId, path SecretPath, version uint32, params *GetSecretVersionV2Params) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "okmsId", runtime.ParamLocationPath, okmsId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "path", runtime.ParamLocationPath, path)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "version", runtime.ParamLocationPath, version)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/%s/v2/secret/%s/version/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.IncludeData != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeData", runtime.ParamLocationQuery, *params.IncludeData); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutSecretVersionV2Request calls the generic PutSecretVersionV2 builder with application/json body
func NewPutSecretVersionV2Request(server string, okmsId OkmsId, path SecretPath, version uint32, body PutSecretVersionV2JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutSecretVersionV2RequestWithBody(server, okmsId, path, version, "application/json", bodyReader)
}

// NewPutSecretVersionV2RequestWithBody generates requests for PutSecretVersionV2 with any type of body
func NewPutSecretVersionV2RequestWithBody(server string, okmsId OkmsId, path SecretPath, version uint32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "okmsId", runtime.ParamLocationPath, okmsId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "path", runtime.ParamLocationPath, path)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "version", runtime.ParamLocationPath, version)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/%s/v2/secret/%s/version/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSecretConfigV2Request generates requests for GetSecretConfigV2
func NewGetSecretConfigV2Request(server string, okmsId OkmsId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "okmsId", runtime.ParamLocationPath, okmsId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/%s/v2/secretConfig", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutSecretConfigV2Request calls the generic PutSecretConfigV2 builder with application/json body
func NewPutSecretConfigV2Request(server string, okmsId OkmsId, body PutSecretConfigV2JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutSecretConfigV2RequestWithBody(server, okmsId, "application/json", bodyReader)
}

// NewPutSecretConfigV2RequestWithBody generates requests for PutSecretConfigV2 with any type of body
func NewPutSecretConfigV2RequestWithBody(server string, okmsId OkmsId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "okmsId", runtime.ParamLocationPath, okmsId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/%s/v2/secretConfig", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetSecretConfigWithResponse request
	GetSecretConfigWithResponse(ctx context.Context, okmsId OkmsId, reqEditors ...RequestEditorFn) (*GetSecretConfigHTTPResponse, error)

	// PostSecretConfigWithBodyWithResponse request with any body
	PostSecretConfigWithBodyWithResponse(ctx context.Context, okmsId OkmsId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSecretConfigHTTPResponse, error)

	PostSecretConfigWithResponse(ctx context.Context, okmsId OkmsId, body PostSecretConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSecretConfigHTTPResponse, error)

	// DeleteSecretRequestWithResponse request
	DeleteSecretRequestWithResponse(ctx context.Context, okmsId OkmsId, path SecretPath, reqEditors ...RequestEditorFn) (*DeleteSecretRequestHTTPResponse, error)

	// GetSecretRequestWithResponse request
	GetSecretRequestWithResponse(ctx context.Context, okmsId OkmsId, path SecretPath, params *GetSecretRequestParams, reqEditors ...RequestEditorFn) (*GetSecretRequestHTTPResponse, error)

	// PatchSecretRequestWithBodyWithResponse request with any body
	PatchSecretRequestWithBodyWithResponse(ctx context.Context, okmsId OkmsId, path SecretPath, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchSecretRequestHTTPResponse, error)

	PatchSecretRequestWithResponse(ctx context.Context, okmsId OkmsId, path SecretPath, body PatchSecretRequestJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchSecretRequestHTTPResponse, error)

	PatchSecretRequestWithApplicationMergePatchPlusJSONBodyWithResponse(ctx context.Context, okmsId OkmsId, path SecretPath, body PatchSecretRequestApplicationMergePatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchSecretRequestHTTPResponse, error)

	// PostSecretRequestWithBodyWithResponse request with any body
	PostSecretRequestWithBodyWithResponse(ctx context.Context, okmsId OkmsId, path SecretPath, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSecretRequestHTTPResponse, error)

	PostSecretRequestWithResponse(ctx context.Context, okmsId OkmsId, path SecretPath, body PostSecretRequestJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSecretRequestHTTPResponse, error)

	// DeleteSecretVersionsWithBodyWithResponse request with any body
	DeleteSecretVersionsWithBodyWithResponse(ctx context.Context, okmsId OkmsId, path SecretPath, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteSecretVersionsHTTPResponse, error)

	DeleteSecretVersionsWithResponse(ctx context.Context, okmsId OkmsId, path SecretPath, body DeleteSecretVersionsJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteSecretVersionsHTTPResponse, error)

	// PutSecretDestroyWithBodyWithResponse request with any body
	PutSecretDestroyWithBodyWithResponse(ctx context.Context, okmsId OkmsId, path SecretPath, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSecretDestroyHTTPResponse, error)

	PutSecretDestroyWithResponse(ctx context.Context, okmsId OkmsId, path SecretPath, body PutSecretDestroyJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSecretDestroyHTTPResponse, error)

	// ListSecretsMetadataWithResponse request
	ListSecretsMetadataWithResponse(ctx context.Context, okmsId OkmsId, params *ListSecretsMetadataParams, reqEditors ...RequestEditorFn) (*ListSecretsMetadataHTTPResponse, error)

	// DeleteSecretMetadataWithResponse request
	DeleteSecretMetadataWithResponse(ctx context.Context, okmsId OkmsId, path SecretPath, reqEditors ...RequestEditorFn) (*DeleteSecretMetadataHTTPResponse, error)

	// GetSecretsMetadataWithResponse request
	GetSecretsMetadataWithResponse(ctx context.Context, okmsId OkmsId, path SecretPath, params *GetSecretsMetadataParams, reqEditors ...RequestEditorFn) (*GetSecretsMetadataHTTPResponse, error)

	// PatchSecretMetadataWithBodyWithResponse request with any body
	PatchSecretMetadataWithBodyWithResponse(ctx context.Context, okmsId OkmsId, path SecretPath, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchSecretMetadataHTTPResponse, error)

	PatchSecretMetadataWithResponse(ctx context.Context, okmsId OkmsId, path SecretPath, body PatchSecretMetadataJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchSecretMetadataHTTPResponse, error)

	PatchSecretMetadataWithApplicationMergePatchPlusJSONBodyWithResponse(ctx context.Context, okmsId OkmsId, path SecretPath, body PatchSecretMetadataApplicationMergePatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchSecretMetadataHTTPResponse, error)

	// PostSecretMetadataWithBodyWithResponse request with any body
	PostSecretMetadataWithBodyWithResponse(ctx context.Context, okmsId OkmsId, path SecretPath, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSecretMetadataHTTPResponse, error)

	PostSecretMetadataWithResponse(ctx context.Context, okmsId OkmsId, path SecretPath, body PostSecretMetadataJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSecretMetadataHTTPResponse, error)

	// GetSecretSubkeysWithResponse request
	GetSecretSubkeysWithResponse(ctx context.Context, okmsId OkmsId, path SecretPath, params *GetSecretSubkeysParams, reqEditors ...RequestEditorFn) (*GetSecretSubkeysHTTPResponse, error)

	// PostSecretUndeleteWithBodyWithResponse request with any body
	PostSecretUndeleteWithBodyWithResponse(ctx context.Context, okmsId OkmsId, path SecretPath, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSecretUndeleteHTTPResponse, error)

	PostSecretUndeleteWithResponse(ctx context.Context, okmsId OkmsId, path SecretPath, body PostSecretUndeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSecretUndeleteHTTPResponse, error)

	// ListServiceKeysWithResponse request
	ListServiceKeysWithResponse(ctx context.Context, okmsId OkmsId, params *ListServiceKeysParams, reqEditors ...RequestEditorFn) (*ListServiceKeysHTTPResponse, error)

	// CreateImportServiceKeyWithBodyWithResponse request with any body
	CreateImportServiceKeyWithBodyWithResponse(ctx context.Context, okmsId OkmsId, params *CreateImportServiceKeyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateImportServiceKeyHTTPResponse, error)

	CreateImportServiceKeyWithResponse(ctx context.Context, okmsId OkmsId, params *CreateImportServiceKeyParams, body CreateImportServiceKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateImportServiceKeyHTTPResponse, error)

	// DeleteServiceKeyWithResponse request
	DeleteServiceKeyWithResponse(ctx context.Context, okmsId OkmsId, keyId ServicekeyPath, reqEditors ...RequestEditorFn) (*DeleteServiceKeyHTTPResponse, error)

	// GetServiceKeyWithResponse request
	GetServiceKeyWithResponse(ctx context.Context, okmsId OkmsId, keyId ServicekeyPath, params *GetServiceKeyParams, reqEditors ...RequestEditorFn) (*GetServiceKeyHTTPResponse, error)

	// PatchServiceKeyWithBodyWithResponse request with any body
	PatchServiceKeyWithBodyWithResponse(ctx context.Context, okmsId OkmsId, keyId ServicekeyPath, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchServiceKeyHTTPResponse, error)

	PatchServiceKeyWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, okmsId OkmsId, keyId ServicekeyPath, body PatchServiceKeyApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchServiceKeyHTTPResponse, error)

	PatchServiceKeyWithResponse(ctx context.Context, okmsId OkmsId, keyId ServicekeyPath, body PatchServiceKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchServiceKeyHTTPResponse, error)

	// ActivateServiceKeyWithResponse request
	ActivateServiceKeyWithResponse(ctx context.Context, okmsId OkmsId, keyId ServicekeyPath, reqEditors ...RequestEditorFn) (*ActivateServiceKeyHTTPResponse, error)

	// GenerateDataKeyWithBodyWithResponse request with any body
	GenerateDataKeyWithBodyWithResponse(ctx context.Context, okmsId OkmsId, keyId ServicekeyPath, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GenerateDataKeyHTTPResponse, error)

	GenerateDataKeyWithResponse(ctx context.Context, okmsId OkmsId, keyId ServicekeyPath, body GenerateDataKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*GenerateDataKeyHTTPResponse, error)

	// DecryptDataKeyWithBodyWithResponse request with any body
	DecryptDataKeyWithBodyWithResponse(ctx context.Context, okmsId OkmsId, keyId ServicekeyPath, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DecryptDataKeyHTTPResponse, error)

	DecryptDataKeyWithResponse(ctx context.Context, okmsId OkmsId, keyId ServicekeyPath, body DecryptDataKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*DecryptDataKeyHTTPResponse, error)

	// DeactivateServiceKeyWithBodyWithResponse request with any body
	DeactivateServiceKeyWithBodyWithResponse(ctx context.Context, okmsId OkmsId, keyId ServicekeyPath, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeactivateServiceKeyHTTPResponse, error)

	DeactivateServiceKeyWithResponse(ctx context.Context, okmsId OkmsId, keyId ServicekeyPath, body DeactivateServiceKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*DeactivateServiceKeyHTTPResponse, error)

	// DecryptWithBodyWithResponse request with any body
	DecryptWithBodyWithResponse(ctx context.Context, okmsId OkmsId, keyId ServicekeyPath, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DecryptHTTPResponse, error)

	DecryptWithResponse(ctx context.Context, okmsId OkmsId, keyId ServicekeyPath, body DecryptJSONRequestBody, reqEditors ...RequestEditorFn) (*DecryptHTTPResponse, error)

	// EncryptWithBodyWithResponse request with any body
	EncryptWithBodyWithResponse(ctx context.Context, okmsId OkmsId, keyId ServicekeyPath, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EncryptHTTPResponse, error)

	EncryptWithResponse(ctx context.Context, okmsId OkmsId, keyId ServicekeyPath, body EncryptJSONRequestBody, reqEditors ...RequestEditorFn) (*EncryptHTTPResponse, error)

	// SignWithBodyWithResponse request with any body
	SignWithBodyWithResponse(ctx context.Context, okmsId OkmsId, keyId ServicekeyPath, params *SignParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SignHTTPResponse, error)

	SignWithResponse(ctx context.Context, okmsId OkmsId, keyId ServicekeyPath, params *SignParams, body SignJSONRequestBody, reqEditors ...RequestEditorFn) (*SignHTTPResponse, error)

	// VerifyWithBodyWithResponse request with any body
	VerifyWithBodyWithResponse(ctx context.Context, okmsId OkmsId, keyId ServicekeyPath, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*VerifyHTTPResponse, error)

	VerifyWithResponse(ctx context.Context, okmsId OkmsId, keyId ServicekeyPath, body VerifyJSONRequestBody, reqEditors ...RequestEditorFn) (*VerifyHTTPResponse, error)

	// ListSecretV2WithResponse request
	ListSecretV2WithResponse(ctx context.Context, okmsId OkmsId, params *ListSecretV2Params, reqEditors ...RequestEditorFn) (*ListSecretV2HTTPResponse, error)

	// PostSecretV2WithBodyWithResponse request with any body
	PostSecretV2WithBodyWithResponse(ctx context.Context, okmsId OkmsId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSecretV2HTTPResponse, error)

	PostSecretV2WithResponse(ctx context.Context, okmsId OkmsId, body PostSecretV2JSONRequestBody, reqEditors ...RequestEditorFn) (*PostSecretV2HTTPResponse, error)

	// DeleteSecretV2WithResponse request
	DeleteSecretV2WithResponse(ctx context.Context, okmsId OkmsId, path SecretPath, reqEditors ...RequestEditorFn) (*DeleteSecretV2HTTPResponse, error)

	// GetSecretV2WithResponse request
	GetSecretV2WithResponse(ctx context.Context, okmsId OkmsId, path SecretPath, params *GetSecretV2Params, reqEditors ...RequestEditorFn) (*GetSecretV2HTTPResponse, error)

	// PutSecretV2WithBodyWithResponse request with any body
	PutSecretV2WithBodyWithResponse(ctx context.Context, okmsId OkmsId, path SecretPath, params *PutSecretV2Params, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSecretV2HTTPResponse, error)

	PutSecretV2WithResponse(ctx context.Context, okmsId OkmsId, path SecretPath, params *PutSecretV2Params, body PutSecretV2JSONRequestBody, reqEditors ...RequestEditorFn) (*PutSecretV2HTTPResponse, error)

	// ListSecretVersionV2WithResponse request
	ListSecretVersionV2WithResponse(ctx context.Context, okmsId OkmsId, path SecretPath, params *ListSecretVersionV2Params, reqEditors ...RequestEditorFn) (*ListSecretVersionV2HTTPResponse, error)

	// PostSecretVersionV2WithBodyWithResponse request with any body
	PostSecretVersionV2WithBodyWithResponse(ctx context.Context, okmsId OkmsId, path SecretPath, params *PostSecretVersionV2Params, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSecretVersionV2HTTPResponse, error)

	PostSecretVersionV2WithResponse(ctx context.Context, okmsId OkmsId, path SecretPath, params *PostSecretVersionV2Params, body PostSecretVersionV2JSONRequestBody, reqEditors ...RequestEditorFn) (*PostSecretVersionV2HTTPResponse, error)

	// GetSecretVersionV2WithResponse request
	GetSecretVersionV2WithResponse(ctx context.Context, okmsId OkmsId, path SecretPath, version uint32, params *GetSecretVersionV2Params, reqEditors ...RequestEditorFn) (*GetSecretVersionV2HTTPResponse, error)

	// PutSecretVersionV2WithBodyWithResponse request with any body
	PutSecretVersionV2WithBodyWithResponse(ctx context.Context, okmsId OkmsId, path SecretPath, version uint32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSecretVersionV2HTTPResponse, error)

	PutSecretVersionV2WithResponse(ctx context.Context, okmsId OkmsId, path SecretPath, version uint32, body PutSecretVersionV2JSONRequestBody, reqEditors ...RequestEditorFn) (*PutSecretVersionV2HTTPResponse, error)

	// GetSecretConfigV2WithResponse request
	GetSecretConfigV2WithResponse(ctx context.Context, okmsId OkmsId, reqEditors ...RequestEditorFn) (*GetSecretConfigV2HTTPResponse, error)

	// PutSecretConfigV2WithBodyWithResponse request with any body
	PutSecretConfigV2WithBodyWithResponse(ctx context.Context, okmsId OkmsId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSecretConfigV2HTTPResponse, error)

	PutSecretConfigV2WithResponse(ctx context.Context, okmsId OkmsId, body PutSecretConfigV2JSONRequestBody, reqEditors ...RequestEditorFn) (*PutSecretConfigV2HTTPResponse, error)
}

type GetSecretConfigHTTPResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetConfigResponse
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON404      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetSecretConfigHTTPResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSecretConfigHTTPResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSecretConfigHTTPResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON404      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostSecretConfigHTTPResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSecretConfigHTTPResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSecretRequestHTTPResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON404      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteSecretRequestHTTPResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSecretRequestHTTPResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSecretRequestHTTPResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetSecretResponse
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON404      *GetErrorResponseWithMetadata
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetSecretRequestHTTPResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSecretRequestHTTPResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchSecretRequestHTTPResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PatchSecretResponse
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON404      *PatchErrorResponseWithMetadata
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r PatchSecretRequestHTTPResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchSecretRequestHTTPResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSecretRequestHTTPResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PostSecretResponse
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON404      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostSecretRequestHTTPResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSecretRequestHTTPResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSecretVersionsHTTPResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON404      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteSecretVersionsHTTPResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSecretVersionsHTTPResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutSecretDestroyHTTPResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON404      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r PutSecretDestroyHTTPResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutSecretDestroyHTTPResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListSecretsMetadataHTTPResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetMetadataResponse
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON404      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r ListSecretsMetadataHTTPResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListSecretsMetadataHTTPResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSecretMetadataHTTPResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON404      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteSecretMetadataHTTPResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSecretMetadataHTTPResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSecretsMetadataHTTPResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetMetadataResponse
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON404      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetSecretsMetadataHTTPResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSecretsMetadataHTTPResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchSecretMetadataHTTPResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Warnings
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON404      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r PatchSecretMetadataHTTPResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchSecretMetadataHTTPResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSecretMetadataHTTPResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Warnings
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON404      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostSecretMetadataHTTPResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSecretMetadataHTTPResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSecretSubkeysHTTPResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetSecretSubkeysResponse
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON404      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetSecretSubkeysHTTPResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSecretSubkeysHTTPResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSecretUndeleteHTTPResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON404      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostSecretUndeleteHTTPResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSecretUndeleteHTTPResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListServiceKeysHTTPResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListServiceKeysResponse
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON404      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r ListServiceKeysHTTPResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListServiceKeysHTTPResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateImportServiceKeyHTTPResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *GetServiceKeyResponse
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CreateImportServiceKeyHTTPResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateImportServiceKeyHTTPResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteServiceKeyHTTPResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON404      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteServiceKeyHTTPResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteServiceKeyHTTPResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetServiceKeyHTTPResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetServiceKeyResponse
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON404      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetServiceKeyHTTPResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetServiceKeyHTTPResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchServiceKeyHTTPResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetServiceKeyResponse
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON404      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r PatchServiceKeyHTTPResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchServiceKeyHTTPResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ActivateServiceKeyHTTPResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON404      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r ActivateServiceKeyHTTPResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ActivateServiceKeyHTTPResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GenerateDataKeyHTTPResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *GenerateDataKeyResponse
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON404      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GenerateDataKeyHTTPResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GenerateDataKeyHTTPResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DecryptDataKeyHTTPResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DecryptDataKeyResponse
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON404      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r DecryptDataKeyHTTPResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DecryptDataKeyHTTPResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeactivateServiceKeyHTTPResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON404      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeactivateServiceKeyHTTPResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeactivateServiceKeyHTTPResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DecryptHTTPResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DecryptResponse
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON404      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r DecryptHTTPResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DecryptHTTPResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EncryptHTTPResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EncryptResponse
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON404      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r EncryptHTTPResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EncryptHTTPResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SignHTTPResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SignResponse
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON404      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r SignHTTPResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SignHTTPResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VerifyHTTPResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VerifyResponse
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON404      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r VerifyHTTPResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VerifyHTTPResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListSecretV2HTTPResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListSecretV2Response
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON404      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r ListSecretV2HTTPResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListSecretV2HTTPResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSecretV2HTTPResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PostSecretV2Response
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON404      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostSecretV2HTTPResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSecretV2HTTPResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSecretV2HTTPResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON404      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteSecretV2HTTPResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSecretV2HTTPResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSecretV2HTTPResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetSecretV2Response
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON404      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetSecretV2HTTPResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSecretV2HTTPResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutSecretV2HTTPResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PutSecretV2Response
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON404      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r PutSecretV2HTTPResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutSecretV2HTTPResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListSecretVersionV2HTTPResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListSecretVersionV2Response
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON404      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r ListSecretVersionV2HTTPResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListSecretVersionV2HTTPResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSecretVersionV2HTTPResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SecretV2Version
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON404      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostSecretVersionV2HTTPResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSecretVersionV2HTTPResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSecretVersionV2HTTPResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SecretV2Version
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON404      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetSecretVersionV2HTTPResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSecretVersionV2HTTPResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutSecretVersionV2HTTPResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SecretV2Version
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON404      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r PutSecretVersionV2HTTPResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutSecretVersionV2HTTPResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSecretConfigV2HTTPResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetSecretConfigV2Response
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON404      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetSecretConfigV2HTTPResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSecretConfigV2HTTPResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutSecretConfigV2HTTPResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PutSecretConfigV2Response
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON404      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r PutSecretConfigV2HTTPResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutSecretConfigV2HTTPResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetSecretConfigWithResponse request returning *GetSecretConfigHTTPResponse
func (c *ClientWithResponses) GetSecretConfigWithResponse(ctx context.Context, okmsId OkmsId, reqEditors ...RequestEditorFn) (*GetSecretConfigHTTPResponse, error) {
	rsp, err := c.GetSecretConfig(ctx, okmsId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSecretConfigHTTPResponse(rsp)
}

// PostSecretConfigWithBodyWithResponse request with arbitrary body returning *PostSecretConfigHTTPResponse
func (c *ClientWithResponses) PostSecretConfigWithBodyWithResponse(ctx context.Context, okmsId OkmsId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSecretConfigHTTPResponse, error) {
	rsp, err := c.PostSecretConfigWithBody(ctx, okmsId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSecretConfigHTTPResponse(rsp)
}

func (c *ClientWithResponses) PostSecretConfigWithResponse(ctx context.Context, okmsId OkmsId, body PostSecretConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSecretConfigHTTPResponse, error) {
	rsp, err := c.PostSecretConfig(ctx, okmsId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSecretConfigHTTPResponse(rsp)
}

// DeleteSecretRequestWithResponse request returning *DeleteSecretRequestHTTPResponse
func (c *ClientWithResponses) DeleteSecretRequestWithResponse(ctx context.Context, okmsId OkmsId, path SecretPath, reqEditors ...RequestEditorFn) (*DeleteSecretRequestHTTPResponse, error) {
	rsp, err := c.DeleteSecretRequest(ctx, okmsId, path, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSecretRequestHTTPResponse(rsp)
}

// GetSecretRequestWithResponse request returning *GetSecretRequestHTTPResponse
func (c *ClientWithResponses) GetSecretRequestWithResponse(ctx context.Context, okmsId OkmsId, path SecretPath, params *GetSecretRequestParams, reqEditors ...RequestEditorFn) (*GetSecretRequestHTTPResponse, error) {
	rsp, err := c.GetSecretRequest(ctx, okmsId, path, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSecretRequestHTTPResponse(rsp)
}

// PatchSecretRequestWithBodyWithResponse request with arbitrary body returning *PatchSecretRequestHTTPResponse
func (c *ClientWithResponses) PatchSecretRequestWithBodyWithResponse(ctx context.Context, okmsId OkmsId, path SecretPath, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchSecretRequestHTTPResponse, error) {
	rsp, err := c.PatchSecretRequestWithBody(ctx, okmsId, path, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchSecretRequestHTTPResponse(rsp)
}

func (c *ClientWithResponses) PatchSecretRequestWithResponse(ctx context.Context, okmsId OkmsId, path SecretPath, body PatchSecretRequestJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchSecretRequestHTTPResponse, error) {
	rsp, err := c.PatchSecretRequest(ctx, okmsId, path, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchSecretRequestHTTPResponse(rsp)
}

func (c *ClientWithResponses) PatchSecretRequestWithApplicationMergePatchPlusJSONBodyWithResponse(ctx context.Context, okmsId OkmsId, path SecretPath, body PatchSecretRequestApplicationMergePatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchSecretRequestHTTPResponse, error) {
	rsp, err := c.PatchSecretRequestWithApplicationMergePatchPlusJSONBody(ctx, okmsId, path, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchSecretRequestHTTPResponse(rsp)
}

// PostSecretRequestWithBodyWithResponse request with arbitrary body returning *PostSecretRequestHTTPResponse
func (c *ClientWithResponses) PostSecretRequestWithBodyWithResponse(ctx context.Context, okmsId OkmsId, path SecretPath, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSecretRequestHTTPResponse, error) {
	rsp, err := c.PostSecretRequestWithBody(ctx, okmsId, path, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSecretRequestHTTPResponse(rsp)
}

func (c *ClientWithResponses) PostSecretRequestWithResponse(ctx context.Context, okmsId OkmsId, path SecretPath, body PostSecretRequestJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSecretRequestHTTPResponse, error) {
	rsp, err := c.PostSecretRequest(ctx, okmsId, path, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSecretRequestHTTPResponse(rsp)
}

// DeleteSecretVersionsWithBodyWithResponse request with arbitrary body returning *DeleteSecretVersionsHTTPResponse
func (c *ClientWithResponses) DeleteSecretVersionsWithBodyWithResponse(ctx context.Context, okmsId OkmsId, path SecretPath, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteSecretVersionsHTTPResponse, error) {
	rsp, err := c.DeleteSecretVersionsWithBody(ctx, okmsId, path, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSecretVersionsHTTPResponse(rsp)
}

func (c *ClientWithResponses) DeleteSecretVersionsWithResponse(ctx context.Context, okmsId OkmsId, path SecretPath, body DeleteSecretVersionsJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteSecretVersionsHTTPResponse, error) {
	rsp, err := c.DeleteSecretVersions(ctx, okmsId, path, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSecretVersionsHTTPResponse(rsp)
}

// PutSecretDestroyWithBodyWithResponse request with arbitrary body returning *PutSecretDestroyHTTPResponse
func (c *ClientWithResponses) PutSecretDestroyWithBodyWithResponse(ctx context.Context, okmsId OkmsId, path SecretPath, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSecretDestroyHTTPResponse, error) {
	rsp, err := c.PutSecretDestroyWithBody(ctx, okmsId, path, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSecretDestroyHTTPResponse(rsp)
}

func (c *ClientWithResponses) PutSecretDestroyWithResponse(ctx context.Context, okmsId OkmsId, path SecretPath, body PutSecretDestroyJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSecretDestroyHTTPResponse, error) {
	rsp, err := c.PutSecretDestroy(ctx, okmsId, path, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSecretDestroyHTTPResponse(rsp)
}

// ListSecretsMetadataWithResponse request returning *ListSecretsMetadataHTTPResponse
func (c *ClientWithResponses) ListSecretsMetadataWithResponse(ctx context.Context, okmsId OkmsId, params *ListSecretsMetadataParams, reqEditors ...RequestEditorFn) (*ListSecretsMetadataHTTPResponse, error) {
	rsp, err := c.ListSecretsMetadata(ctx, okmsId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListSecretsMetadataHTTPResponse(rsp)
}

// DeleteSecretMetadataWithResponse request returning *DeleteSecretMetadataHTTPResponse
func (c *ClientWithResponses) DeleteSecretMetadataWithResponse(ctx context.Context, okmsId OkmsId, path SecretPath, reqEditors ...RequestEditorFn) (*DeleteSecretMetadataHTTPResponse, error) {
	rsp, err := c.DeleteSecretMetadata(ctx, okmsId, path, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSecretMetadataHTTPResponse(rsp)
}

// GetSecretsMetadataWithResponse request returning *GetSecretsMetadataHTTPResponse
func (c *ClientWithResponses) GetSecretsMetadataWithResponse(ctx context.Context, okmsId OkmsId, path SecretPath, params *GetSecretsMetadataParams, reqEditors ...RequestEditorFn) (*GetSecretsMetadataHTTPResponse, error) {
	rsp, err := c.GetSecretsMetadata(ctx, okmsId, path, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSecretsMetadataHTTPResponse(rsp)
}

// PatchSecretMetadataWithBodyWithResponse request with arbitrary body returning *PatchSecretMetadataHTTPResponse
func (c *ClientWithResponses) PatchSecretMetadataWithBodyWithResponse(ctx context.Context, okmsId OkmsId, path SecretPath, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchSecretMetadataHTTPResponse, error) {
	rsp, err := c.PatchSecretMetadataWithBody(ctx, okmsId, path, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchSecretMetadataHTTPResponse(rsp)
}

func (c *ClientWithResponses) PatchSecretMetadataWithResponse(ctx context.Context, okmsId OkmsId, path SecretPath, body PatchSecretMetadataJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchSecretMetadataHTTPResponse, error) {
	rsp, err := c.PatchSecretMetadata(ctx, okmsId, path, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchSecretMetadataHTTPResponse(rsp)
}

func (c *ClientWithResponses) PatchSecretMetadataWithApplicationMergePatchPlusJSONBodyWithResponse(ctx context.Context, okmsId OkmsId, path SecretPath, body PatchSecretMetadataApplicationMergePatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchSecretMetadataHTTPResponse, error) {
	rsp, err := c.PatchSecretMetadataWithApplicationMergePatchPlusJSONBody(ctx, okmsId, path, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchSecretMetadataHTTPResponse(rsp)
}

// PostSecretMetadataWithBodyWithResponse request with arbitrary body returning *PostSecretMetadataHTTPResponse
func (c *ClientWithResponses) PostSecretMetadataWithBodyWithResponse(ctx context.Context, okmsId OkmsId, path SecretPath, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSecretMetadataHTTPResponse, error) {
	rsp, err := c.PostSecretMetadataWithBody(ctx, okmsId, path, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSecretMetadataHTTPResponse(rsp)
}

func (c *ClientWithResponses) PostSecretMetadataWithResponse(ctx context.Context, okmsId OkmsId, path SecretPath, body PostSecretMetadataJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSecretMetadataHTTPResponse, error) {
	rsp, err := c.PostSecretMetadata(ctx, okmsId, path, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSecretMetadataHTTPResponse(rsp)
}

// GetSecretSubkeysWithResponse request returning *GetSecretSubkeysHTTPResponse
func (c *ClientWithResponses) GetSecretSubkeysWithResponse(ctx context.Context, okmsId OkmsId, path SecretPath, params *GetSecretSubkeysParams, reqEditors ...RequestEditorFn) (*GetSecretSubkeysHTTPResponse, error) {
	rsp, err := c.GetSecretSubkeys(ctx, okmsId, path, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSecretSubkeysHTTPResponse(rsp)
}

// PostSecretUndeleteWithBodyWithResponse request with arbitrary body returning *PostSecretUndeleteHTTPResponse
func (c *ClientWithResponses) PostSecretUndeleteWithBodyWithResponse(ctx context.Context, okmsId OkmsId, path SecretPath, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSecretUndeleteHTTPResponse, error) {
	rsp, err := c.PostSecretUndeleteWithBody(ctx, okmsId, path, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSecretUndeleteHTTPResponse(rsp)
}

func (c *ClientWithResponses) PostSecretUndeleteWithResponse(ctx context.Context, okmsId OkmsId, path SecretPath, body PostSecretUndeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSecretUndeleteHTTPResponse, error) {
	rsp, err := c.PostSecretUndelete(ctx, okmsId, path, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSecretUndeleteHTTPResponse(rsp)
}

// ListServiceKeysWithResponse request returning *ListServiceKeysHTTPResponse
func (c *ClientWithResponses) ListServiceKeysWithResponse(ctx context.Context, okmsId OkmsId, params *ListServiceKeysParams, reqEditors ...RequestEditorFn) (*ListServiceKeysHTTPResponse, error) {
	rsp, err := c.ListServiceKeys(ctx, okmsId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListServiceKeysHTTPResponse(rsp)
}

// CreateImportServiceKeyWithBodyWithResponse request with arbitrary body returning *CreateImportServiceKeyHTTPResponse
func (c *ClientWithResponses) CreateImportServiceKeyWithBodyWithResponse(ctx context.Context, okmsId OkmsId, params *CreateImportServiceKeyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateImportServiceKeyHTTPResponse, error) {
	rsp, err := c.CreateImportServiceKeyWithBody(ctx, okmsId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateImportServiceKeyHTTPResponse(rsp)
}

func (c *ClientWithResponses) CreateImportServiceKeyWithResponse(ctx context.Context, okmsId OkmsId, params *CreateImportServiceKeyParams, body CreateImportServiceKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateImportServiceKeyHTTPResponse, error) {
	rsp, err := c.CreateImportServiceKey(ctx, okmsId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateImportServiceKeyHTTPResponse(rsp)
}

// DeleteServiceKeyWithResponse request returning *DeleteServiceKeyHTTPResponse
func (c *ClientWithResponses) DeleteServiceKeyWithResponse(ctx context.Context, okmsId OkmsId, keyId ServicekeyPath, reqEditors ...RequestEditorFn) (*DeleteServiceKeyHTTPResponse, error) {
	rsp, err := c.DeleteServiceKey(ctx, okmsId, keyId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteServiceKeyHTTPResponse(rsp)
}

// GetServiceKeyWithResponse request returning *GetServiceKeyHTTPResponse
func (c *ClientWithResponses) GetServiceKeyWithResponse(ctx context.Context, okmsId OkmsId, keyId ServicekeyPath, params *GetServiceKeyParams, reqEditors ...RequestEditorFn) (*GetServiceKeyHTTPResponse, error) {
	rsp, err := c.GetServiceKey(ctx, okmsId, keyId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetServiceKeyHTTPResponse(rsp)
}

// PatchServiceKeyWithBodyWithResponse request with arbitrary body returning *PatchServiceKeyHTTPResponse
func (c *ClientWithResponses) PatchServiceKeyWithBodyWithResponse(ctx context.Context, okmsId OkmsId, keyId ServicekeyPath, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchServiceKeyHTTPResponse, error) {
	rsp, err := c.PatchServiceKeyWithBody(ctx, okmsId, keyId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchServiceKeyHTTPResponse(rsp)
}

func (c *ClientWithResponses) PatchServiceKeyWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, okmsId OkmsId, keyId ServicekeyPath, body PatchServiceKeyApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchServiceKeyHTTPResponse, error) {
	rsp, err := c.PatchServiceKeyWithApplicationWildcardPlusJSONBody(ctx, okmsId, keyId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchServiceKeyHTTPResponse(rsp)
}

func (c *ClientWithResponses) PatchServiceKeyWithResponse(ctx context.Context, okmsId OkmsId, keyId ServicekeyPath, body PatchServiceKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchServiceKeyHTTPResponse, error) {
	rsp, err := c.PatchServiceKey(ctx, okmsId, keyId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchServiceKeyHTTPResponse(rsp)
}

// ActivateServiceKeyWithResponse request returning *ActivateServiceKeyHTTPResponse
func (c *ClientWithResponses) ActivateServiceKeyWithResponse(ctx context.Context, okmsId OkmsId, keyId ServicekeyPath, reqEditors ...RequestEditorFn) (*ActivateServiceKeyHTTPResponse, error) {
	rsp, err := c.ActivateServiceKey(ctx, okmsId, keyId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseActivateServiceKeyHTTPResponse(rsp)
}

// GenerateDataKeyWithBodyWithResponse request with arbitrary body returning *GenerateDataKeyHTTPResponse
func (c *ClientWithResponses) GenerateDataKeyWithBodyWithResponse(ctx context.Context, okmsId OkmsId, keyId ServicekeyPath, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GenerateDataKeyHTTPResponse, error) {
	rsp, err := c.GenerateDataKeyWithBody(ctx, okmsId, keyId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGenerateDataKeyHTTPResponse(rsp)
}

func (c *ClientWithResponses) GenerateDataKeyWithResponse(ctx context.Context, okmsId OkmsId, keyId ServicekeyPath, body GenerateDataKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*GenerateDataKeyHTTPResponse, error) {
	rsp, err := c.GenerateDataKey(ctx, okmsId, keyId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGenerateDataKeyHTTPResponse(rsp)
}

// DecryptDataKeyWithBodyWithResponse request with arbitrary body returning *DecryptDataKeyHTTPResponse
func (c *ClientWithResponses) DecryptDataKeyWithBodyWithResponse(ctx context.Context, okmsId OkmsId, keyId ServicekeyPath, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DecryptDataKeyHTTPResponse, error) {
	rsp, err := c.DecryptDataKeyWithBody(ctx, okmsId, keyId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDecryptDataKeyHTTPResponse(rsp)
}

func (c *ClientWithResponses) DecryptDataKeyWithResponse(ctx context.Context, okmsId OkmsId, keyId ServicekeyPath, body DecryptDataKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*DecryptDataKeyHTTPResponse, error) {
	rsp, err := c.DecryptDataKey(ctx, okmsId, keyId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDecryptDataKeyHTTPResponse(rsp)
}

// DeactivateServiceKeyWithBodyWithResponse request with arbitrary body returning *DeactivateServiceKeyHTTPResponse
func (c *ClientWithResponses) DeactivateServiceKeyWithBodyWithResponse(ctx context.Context, okmsId OkmsId, keyId ServicekeyPath, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeactivateServiceKeyHTTPResponse, error) {
	rsp, err := c.DeactivateServiceKeyWithBody(ctx, okmsId, keyId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeactivateServiceKeyHTTPResponse(rsp)
}

func (c *ClientWithResponses) DeactivateServiceKeyWithResponse(ctx context.Context, okmsId OkmsId, keyId ServicekeyPath, body DeactivateServiceKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*DeactivateServiceKeyHTTPResponse, error) {
	rsp, err := c.DeactivateServiceKey(ctx, okmsId, keyId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeactivateServiceKeyHTTPResponse(rsp)
}

// DecryptWithBodyWithResponse request with arbitrary body returning *DecryptHTTPResponse
func (c *ClientWithResponses) DecryptWithBodyWithResponse(ctx context.Context, okmsId OkmsId, keyId ServicekeyPath, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DecryptHTTPResponse, error) {
	rsp, err := c.DecryptWithBody(ctx, okmsId, keyId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDecryptHTTPResponse(rsp)
}

func (c *ClientWithResponses) DecryptWithResponse(ctx context.Context, okmsId OkmsId, keyId ServicekeyPath, body DecryptJSONRequestBody, reqEditors ...RequestEditorFn) (*DecryptHTTPResponse, error) {
	rsp, err := c.Decrypt(ctx, okmsId, keyId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDecryptHTTPResponse(rsp)
}

// EncryptWithBodyWithResponse request with arbitrary body returning *EncryptHTTPResponse
func (c *ClientWithResponses) EncryptWithBodyWithResponse(ctx context.Context, okmsId OkmsId, keyId ServicekeyPath, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EncryptHTTPResponse, error) {
	rsp, err := c.EncryptWithBody(ctx, okmsId, keyId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEncryptHTTPResponse(rsp)
}

func (c *ClientWithResponses) EncryptWithResponse(ctx context.Context, okmsId OkmsId, keyId ServicekeyPath, body EncryptJSONRequestBody, reqEditors ...RequestEditorFn) (*EncryptHTTPResponse, error) {
	rsp, err := c.Encrypt(ctx, okmsId, keyId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEncryptHTTPResponse(rsp)
}

// SignWithBodyWithResponse request with arbitrary body returning *SignHTTPResponse
func (c *ClientWithResponses) SignWithBodyWithResponse(ctx context.Context, okmsId OkmsId, keyId ServicekeyPath, params *SignParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SignHTTPResponse, error) {
	rsp, err := c.SignWithBody(ctx, okmsId, keyId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSignHTTPResponse(rsp)
}

func (c *ClientWithResponses) SignWithResponse(ctx context.Context, okmsId OkmsId, keyId ServicekeyPath, params *SignParams, body SignJSONRequestBody, reqEditors ...RequestEditorFn) (*SignHTTPResponse, error) {
	rsp, err := c.Sign(ctx, okmsId, keyId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSignHTTPResponse(rsp)
}

// VerifyWithBodyWithResponse request with arbitrary body returning *VerifyHTTPResponse
func (c *ClientWithResponses) VerifyWithBodyWithResponse(ctx context.Context, okmsId OkmsId, keyId ServicekeyPath, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*VerifyHTTPResponse, error) {
	rsp, err := c.VerifyWithBody(ctx, okmsId, keyId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVerifyHTTPResponse(rsp)
}

func (c *ClientWithResponses) VerifyWithResponse(ctx context.Context, okmsId OkmsId, keyId ServicekeyPath, body VerifyJSONRequestBody, reqEditors ...RequestEditorFn) (*VerifyHTTPResponse, error) {
	rsp, err := c.Verify(ctx, okmsId, keyId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVerifyHTTPResponse(rsp)
}

// ListSecretV2WithResponse request returning *ListSecretV2HTTPResponse
func (c *ClientWithResponses) ListSecretV2WithResponse(ctx context.Context, okmsId OkmsId, params *ListSecretV2Params, reqEditors ...RequestEditorFn) (*ListSecretV2HTTPResponse, error) {
	rsp, err := c.ListSecretV2(ctx, okmsId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListSecretV2HTTPResponse(rsp)
}

// PostSecretV2WithBodyWithResponse request with arbitrary body returning *PostSecretV2HTTPResponse
func (c *ClientWithResponses) PostSecretV2WithBodyWithResponse(ctx context.Context, okmsId OkmsId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSecretV2HTTPResponse, error) {
	rsp, err := c.PostSecretV2WithBody(ctx, okmsId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSecretV2HTTPResponse(rsp)
}

func (c *ClientWithResponses) PostSecretV2WithResponse(ctx context.Context, okmsId OkmsId, body PostSecretV2JSONRequestBody, reqEditors ...RequestEditorFn) (*PostSecretV2HTTPResponse, error) {
	rsp, err := c.PostSecretV2(ctx, okmsId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSecretV2HTTPResponse(rsp)
}

// DeleteSecretV2WithResponse request returning *DeleteSecretV2HTTPResponse
func (c *ClientWithResponses) DeleteSecretV2WithResponse(ctx context.Context, okmsId OkmsId, path SecretPath, reqEditors ...RequestEditorFn) (*DeleteSecretV2HTTPResponse, error) {
	rsp, err := c.DeleteSecretV2(ctx, okmsId, path, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSecretV2HTTPResponse(rsp)
}

// GetSecretV2WithResponse request returning *GetSecretV2HTTPResponse
func (c *ClientWithResponses) GetSecretV2WithResponse(ctx context.Context, okmsId OkmsId, path SecretPath, params *GetSecretV2Params, reqEditors ...RequestEditorFn) (*GetSecretV2HTTPResponse, error) {
	rsp, err := c.GetSecretV2(ctx, okmsId, path, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSecretV2HTTPResponse(rsp)
}

// PutSecretV2WithBodyWithResponse request with arbitrary body returning *PutSecretV2HTTPResponse
func (c *ClientWithResponses) PutSecretV2WithBodyWithResponse(ctx context.Context, okmsId OkmsId, path SecretPath, params *PutSecretV2Params, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSecretV2HTTPResponse, error) {
	rsp, err := c.PutSecretV2WithBody(ctx, okmsId, path, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSecretV2HTTPResponse(rsp)
}

func (c *ClientWithResponses) PutSecretV2WithResponse(ctx context.Context, okmsId OkmsId, path SecretPath, params *PutSecretV2Params, body PutSecretV2JSONRequestBody, reqEditors ...RequestEditorFn) (*PutSecretV2HTTPResponse, error) {
	rsp, err := c.PutSecretV2(ctx, okmsId, path, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSecretV2HTTPResponse(rsp)
}

// ListSecretVersionV2WithResponse request returning *ListSecretVersionV2HTTPResponse
func (c *ClientWithResponses) ListSecretVersionV2WithResponse(ctx context.Context, okmsId OkmsId, path SecretPath, params *ListSecretVersionV2Params, reqEditors ...RequestEditorFn) (*ListSecretVersionV2HTTPResponse, error) {
	rsp, err := c.ListSecretVersionV2(ctx, okmsId, path, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListSecretVersionV2HTTPResponse(rsp)
}

// PostSecretVersionV2WithBodyWithResponse request with arbitrary body returning *PostSecretVersionV2HTTPResponse
func (c *ClientWithResponses) PostSecretVersionV2WithBodyWithResponse(ctx context.Context, okmsId OkmsId, path SecretPath, params *PostSecretVersionV2Params, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSecretVersionV2HTTPResponse, error) {
	rsp, err := c.PostSecretVersionV2WithBody(ctx, okmsId, path, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSecretVersionV2HTTPResponse(rsp)
}

func (c *ClientWithResponses) PostSecretVersionV2WithResponse(ctx context.Context, okmsId OkmsId, path SecretPath, params *PostSecretVersionV2Params, body PostSecretVersionV2JSONRequestBody, reqEditors ...RequestEditorFn) (*PostSecretVersionV2HTTPResponse, error) {
	rsp, err := c.PostSecretVersionV2(ctx, okmsId, path, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSecretVersionV2HTTPResponse(rsp)
}

// GetSecretVersionV2WithResponse request returning *GetSecretVersionV2HTTPResponse
func (c *ClientWithResponses) GetSecretVersionV2WithResponse(ctx context.Context, okmsId OkmsId, path SecretPath, version uint32, params *GetSecretVersionV2Params, reqEditors ...RequestEditorFn) (*GetSecretVersionV2HTTPResponse, error) {
	rsp, err := c.GetSecretVersionV2(ctx, okmsId, path, version, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSecretVersionV2HTTPResponse(rsp)
}

// PutSecretVersionV2WithBodyWithResponse request with arbitrary body returning *PutSecretVersionV2HTTPResponse
func (c *ClientWithResponses) PutSecretVersionV2WithBodyWithResponse(ctx context.Context, okmsId OkmsId, path SecretPath, version uint32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSecretVersionV2HTTPResponse, error) {
	rsp, err := c.PutSecretVersionV2WithBody(ctx, okmsId, path, version, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSecretVersionV2HTTPResponse(rsp)
}

func (c *ClientWithResponses) PutSecretVersionV2WithResponse(ctx context.Context, okmsId OkmsId, path SecretPath, version uint32, body PutSecretVersionV2JSONRequestBody, reqEditors ...RequestEditorFn) (*PutSecretVersionV2HTTPResponse, error) {
	rsp, err := c.PutSecretVersionV2(ctx, okmsId, path, version, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSecretVersionV2HTTPResponse(rsp)
}

// GetSecretConfigV2WithResponse request returning *GetSecretConfigV2HTTPResponse
func (c *ClientWithResponses) GetSecretConfigV2WithResponse(ctx context.Context, okmsId OkmsId, reqEditors ...RequestEditorFn) (*GetSecretConfigV2HTTPResponse, error) {
	rsp, err := c.GetSecretConfigV2(ctx, okmsId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSecretConfigV2HTTPResponse(rsp)
}

// PutSecretConfigV2WithBodyWithResponse request with arbitrary body returning *PutSecretConfigV2HTTPResponse
func (c *ClientWithResponses) PutSecretConfigV2WithBodyWithResponse(ctx context.Context, okmsId OkmsId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSecretConfigV2HTTPResponse, error) {
	rsp, err := c.PutSecretConfigV2WithBody(ctx, okmsId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSecretConfigV2HTTPResponse(rsp)
}

func (c *ClientWithResponses) PutSecretConfigV2WithResponse(ctx context.Context, okmsId OkmsId, body PutSecretConfigV2JSONRequestBody, reqEditors ...RequestEditorFn) (*PutSecretConfigV2HTTPResponse, error) {
	rsp, err := c.PutSecretConfigV2(ctx, okmsId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSecretConfigV2HTTPResponse(rsp)
}

// ParseGetSecretConfigHTTPResponse parses an HTTP response from a GetSecretConfigWithResponse call
func ParseGetSecretConfigHTTPResponse(rsp *http.Response) (*GetSecretConfigHTTPResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSecretConfigHTTPResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetConfigResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostSecretConfigHTTPResponse parses an HTTP response from a PostSecretConfigWithResponse call
func ParsePostSecretConfigHTTPResponse(rsp *http.Response) (*PostSecretConfigHTTPResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSecretConfigHTTPResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteSecretRequestHTTPResponse parses an HTTP response from a DeleteSecretRequestWithResponse call
func ParseDeleteSecretRequestHTTPResponse(rsp *http.Response) (*DeleteSecretRequestHTTPResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteSecretRequestHTTPResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetSecretRequestHTTPResponse parses an HTTP response from a GetSecretRequestWithResponse call
func ParseGetSecretRequestHTTPResponse(rsp *http.Response) (*GetSecretRequestHTTPResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSecretRequestHTTPResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetSecretResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest GetErrorResponseWithMetadata
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePatchSecretRequestHTTPResponse parses an HTTP response from a PatchSecretRequestWithResponse call
func ParsePatchSecretRequestHTTPResponse(rsp *http.Response) (*PatchSecretRequestHTTPResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchSecretRequestHTTPResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PatchSecretResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest PatchErrorResponseWithMetadata
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostSecretRequestHTTPResponse parses an HTTP response from a PostSecretRequestWithResponse call
func ParsePostSecretRequestHTTPResponse(rsp *http.Response) (*PostSecretRequestHTTPResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSecretRequestHTTPResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PostSecretResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteSecretVersionsHTTPResponse parses an HTTP response from a DeleteSecretVersionsWithResponse call
func ParseDeleteSecretVersionsHTTPResponse(rsp *http.Response) (*DeleteSecretVersionsHTTPResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteSecretVersionsHTTPResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePutSecretDestroyHTTPResponse parses an HTTP response from a PutSecretDestroyWithResponse call
func ParsePutSecretDestroyHTTPResponse(rsp *http.Response) (*PutSecretDestroyHTTPResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutSecretDestroyHTTPResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseListSecretsMetadataHTTPResponse parses an HTTP response from a ListSecretsMetadataWithResponse call
func ParseListSecretsMetadataHTTPResponse(rsp *http.Response) (*ListSecretsMetadataHTTPResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListSecretsMetadataHTTPResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetMetadataResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteSecretMetadataHTTPResponse parses an HTTP response from a DeleteSecretMetadataWithResponse call
func ParseDeleteSecretMetadataHTTPResponse(rsp *http.Response) (*DeleteSecretMetadataHTTPResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteSecretMetadataHTTPResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetSecretsMetadataHTTPResponse parses an HTTP response from a GetSecretsMetadataWithResponse call
func ParseGetSecretsMetadataHTTPResponse(rsp *http.Response) (*GetSecretsMetadataHTTPResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSecretsMetadataHTTPResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetMetadataResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePatchSecretMetadataHTTPResponse parses an HTTP response from a PatchSecretMetadataWithResponse call
func ParsePatchSecretMetadataHTTPResponse(rsp *http.Response) (*PatchSecretMetadataHTTPResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchSecretMetadataHTTPResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Warnings
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostSecretMetadataHTTPResponse parses an HTTP response from a PostSecretMetadataWithResponse call
func ParsePostSecretMetadataHTTPResponse(rsp *http.Response) (*PostSecretMetadataHTTPResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSecretMetadataHTTPResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Warnings
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetSecretSubkeysHTTPResponse parses an HTTP response from a GetSecretSubkeysWithResponse call
func ParseGetSecretSubkeysHTTPResponse(rsp *http.Response) (*GetSecretSubkeysHTTPResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSecretSubkeysHTTPResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetSecretSubkeysResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostSecretUndeleteHTTPResponse parses an HTTP response from a PostSecretUndeleteWithResponse call
func ParsePostSecretUndeleteHTTPResponse(rsp *http.Response) (*PostSecretUndeleteHTTPResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSecretUndeleteHTTPResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseListServiceKeysHTTPResponse parses an HTTP response from a ListServiceKeysWithResponse call
func ParseListServiceKeysHTTPResponse(rsp *http.Response) (*ListServiceKeysHTTPResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListServiceKeysHTTPResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListServiceKeysResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreateImportServiceKeyHTTPResponse parses an HTTP response from a CreateImportServiceKeyWithResponse call
func ParseCreateImportServiceKeyHTTPResponse(rsp *http.Response) (*CreateImportServiceKeyHTTPResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateImportServiceKeyHTTPResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest GetServiceKeyResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteServiceKeyHTTPResponse parses an HTTP response from a DeleteServiceKeyWithResponse call
func ParseDeleteServiceKeyHTTPResponse(rsp *http.Response) (*DeleteServiceKeyHTTPResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteServiceKeyHTTPResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetServiceKeyHTTPResponse parses an HTTP response from a GetServiceKeyWithResponse call
func ParseGetServiceKeyHTTPResponse(rsp *http.Response) (*GetServiceKeyHTTPResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetServiceKeyHTTPResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetServiceKeyResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePatchServiceKeyHTTPResponse parses an HTTP response from a PatchServiceKeyWithResponse call
func ParsePatchServiceKeyHTTPResponse(rsp *http.Response) (*PatchServiceKeyHTTPResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchServiceKeyHTTPResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetServiceKeyResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseActivateServiceKeyHTTPResponse parses an HTTP response from a ActivateServiceKeyWithResponse call
func ParseActivateServiceKeyHTTPResponse(rsp *http.Response) (*ActivateServiceKeyHTTPResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ActivateServiceKeyHTTPResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGenerateDataKeyHTTPResponse parses an HTTP response from a GenerateDataKeyWithResponse call
func ParseGenerateDataKeyHTTPResponse(rsp *http.Response) (*GenerateDataKeyHTTPResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GenerateDataKeyHTTPResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest GenerateDataKeyResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDecryptDataKeyHTTPResponse parses an HTTP response from a DecryptDataKeyWithResponse call
func ParseDecryptDataKeyHTTPResponse(rsp *http.Response) (*DecryptDataKeyHTTPResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DecryptDataKeyHTTPResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DecryptDataKeyResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeactivateServiceKeyHTTPResponse parses an HTTP response from a DeactivateServiceKeyWithResponse call
func ParseDeactivateServiceKeyHTTPResponse(rsp *http.Response) (*DeactivateServiceKeyHTTPResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeactivateServiceKeyHTTPResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDecryptHTTPResponse parses an HTTP response from a DecryptWithResponse call
func ParseDecryptHTTPResponse(rsp *http.Response) (*DecryptHTTPResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DecryptHTTPResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DecryptResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseEncryptHTTPResponse parses an HTTP response from a EncryptWithResponse call
func ParseEncryptHTTPResponse(rsp *http.Response) (*EncryptHTTPResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EncryptHTTPResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EncryptResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseSignHTTPResponse parses an HTTP response from a SignWithResponse call
func ParseSignHTTPResponse(rsp *http.Response) (*SignHTTPResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SignHTTPResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SignResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseVerifyHTTPResponse parses an HTTP response from a VerifyWithResponse call
func ParseVerifyHTTPResponse(rsp *http.Response) (*VerifyHTTPResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VerifyHTTPResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VerifyResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseListSecretV2HTTPResponse parses an HTTP response from a ListSecretV2WithResponse call
func ParseListSecretV2HTTPResponse(rsp *http.Response) (*ListSecretV2HTTPResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListSecretV2HTTPResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListSecretV2Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostSecretV2HTTPResponse parses an HTTP response from a PostSecretV2WithResponse call
func ParsePostSecretV2HTTPResponse(rsp *http.Response) (*PostSecretV2HTTPResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSecretV2HTTPResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PostSecretV2Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteSecretV2HTTPResponse parses an HTTP response from a DeleteSecretV2WithResponse call
func ParseDeleteSecretV2HTTPResponse(rsp *http.Response) (*DeleteSecretV2HTTPResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteSecretV2HTTPResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetSecretV2HTTPResponse parses an HTTP response from a GetSecretV2WithResponse call
func ParseGetSecretV2HTTPResponse(rsp *http.Response) (*GetSecretV2HTTPResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSecretV2HTTPResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetSecretV2Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePutSecretV2HTTPResponse parses an HTTP response from a PutSecretV2WithResponse call
func ParsePutSecretV2HTTPResponse(rsp *http.Response) (*PutSecretV2HTTPResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutSecretV2HTTPResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PutSecretV2Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseListSecretVersionV2HTTPResponse parses an HTTP response from a ListSecretVersionV2WithResponse call
func ParseListSecretVersionV2HTTPResponse(rsp *http.Response) (*ListSecretVersionV2HTTPResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListSecretVersionV2HTTPResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListSecretVersionV2Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostSecretVersionV2HTTPResponse parses an HTTP response from a PostSecretVersionV2WithResponse call
func ParsePostSecretVersionV2HTTPResponse(rsp *http.Response) (*PostSecretVersionV2HTTPResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSecretVersionV2HTTPResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SecretV2Version
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetSecretVersionV2HTTPResponse parses an HTTP response from a GetSecretVersionV2WithResponse call
func ParseGetSecretVersionV2HTTPResponse(rsp *http.Response) (*GetSecretVersionV2HTTPResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSecretVersionV2HTTPResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SecretV2Version
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePutSecretVersionV2HTTPResponse parses an HTTP response from a PutSecretVersionV2WithResponse call
func ParsePutSecretVersionV2HTTPResponse(rsp *http.Response) (*PutSecretVersionV2HTTPResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutSecretVersionV2HTTPResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SecretV2Version
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetSecretConfigV2HTTPResponse parses an HTTP response from a GetSecretConfigV2WithResponse call
func ParseGetSecretConfigV2HTTPResponse(rsp *http.Response) (*GetSecretConfigV2HTTPResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSecretConfigV2HTTPResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetSecretConfigV2Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePutSecretConfigV2HTTPResponse parses an HTTP response from a PutSecretConfigV2WithResponse call
func ParsePutSecretConfigV2HTTPResponse(rsp *http.Response) (*PutSecretConfigV2HTTPResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutSecretConfigV2HTTPResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PutSecretConfigV2Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}
